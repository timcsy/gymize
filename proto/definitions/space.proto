syntax = "proto3";

option csharp_namespace = "PAIA.Marenv.Protobuf";

// Tensors use the C-like index order,
// with the last axis index changing fastest,
// back to the first axis index changing slowest.

message FloatTensor {
	repeated int32 shape = 1;
	repeated float array = 2;
}

message IntTensor {
	repeated int32 shape = 1;
	repeated int32 array = 2;
}

message BoolTensor {
	repeated int32 shape = 1;
	repeated bool array = 2;
}

message GraphSpace {
	Space node_space = 1;
	Space edge_space = 2;
}

message Graph {
	FloatTensor nodes = 1;
	FloatTensor edges = 2;
	IntTensor edge_links = 3;
}

enum CompressionType {
	COMPRESSION_TYPE_UNSPECIFIED = 0;
	COMPRESSION_TYPE_NONE = 1;
	COMPRESSION_TYPE_PNG = 2;
	COMPRESSION_TYPE_JPG = 3;
}

message Image {
	CompressionType compression_type = 1;
	bytes data = 2;
	repeated int32 shape = 3; // (H, W, C) or (H, W)
	repeated int32 dimension_mapping = 4; // (H, W, C) to [0, 1, 2]
}

enum SpaceType {
	SPACE_TYPE_UNSPECIFIED = 0;
	SPACE_TYPE_BOX = 1;
	SPACE_TYPE_DISCRETE = 2;
	SPACE_TYPE_MULTI_BINARY = 3;
	SPACE_TYPE_MULTI_DISCRETE = 4;
	SPACE_TYPE_TEXT = 5;
	SPACE_TYPE_DICT = 6;
	SPACE_TYPE_TUPLE = 7;
	SPACE_TYPE_SEQUENCE = 8;
	SPACE_TYPE_GRAPH = 9;
}

enum DataType {
	DATA_TYPE_UNSPECIFIED = 0;
	DATA_TYPE_FLOAT = 1;
	DATA_TYPE_INT = 2;
	DATA_TYPE_BOOLEAN = 3;
}

message Space {
	SpaceType space_type = 1;
	repeated int32 shape = 2; // also the n of the MultiBinary
	DataType data_type = 3;
	repeated float low = 4;
	repeated float high = 5;
	int32 min = 6; // start of the Discrete, min_length of the Text
	int32 max = 7; // n of the Discrete, max_length of the Text
	repeated int32 nvec = 8;
	repeated string charset = 9;
	map<string, Space> dict_space = 10;
	map<int32, Space> list_space = 11; // Tuple and Sequence
	GraphSpace graph_space = 12;
}

message Data { // Data is a point(instance) in(belongs to) the space
	SpaceType space_type = 1;
	FloatTensor box = 2;
	int32 discrete = 3;
	BoolTensor multi_binary = 4;
	IntTensor multi_discrete = 5;
	string text = 6;
	map<string, Data> dict = 7;
	map<int32, Data> list = 8; // Tuple and Sequence
	Graph graph = 9;
	Image image = 10; // Box space instance which is a compressed image (H, W, C)
}