// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: render.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Render.pbobjc.h"
#import "Space.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(FrameProto);
GPBObjCClassDeclaration(InstanceProto);
GPBObjCClassDeclaration(VideoProto);
GPBObjCClassDeclaration(ViewProto);

#pragma mark - RenderRoot

@implementation RenderRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - RenderRoot_FileDescriptor

static GPBFileDescriptor *RenderRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ViewProto

@implementation ViewProto

@dynamic name;
@dynamic isSingleFrame;

typedef struct ViewProto__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} ViewProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ViewProto_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewProto__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSingleFrame",
        .dataTypeSpecific.clazz = Nil,
        .number = ViewProto_FieldNumber_IsSingleFrame,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewProto class]
                                     rootClass:[RenderRoot class]
                                          file:RenderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FrameProto

@implementation FrameProto

@dynamic hasImage, image;
@dynamic duration;

typedef struct FrameProto__storage_ {
  uint32_t _has_storage_[1];
  float duration;
  InstanceProto *image;
} FrameProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "image",
        .dataTypeSpecific.clazz = GPBObjCClass(InstanceProto),
        .number = FrameProto_FieldNumber_Image,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FrameProto__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = FrameProto_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FrameProto__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FrameProto class]
                                     rootClass:[RenderRoot class]
                                          file:RenderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FrameProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VideoProto

@implementation VideoProto

@dynamic name;
@dynamic framesArray, framesArray_Count;
@dynamic audio;

typedef struct VideoProto__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *framesArray;
  NSData *audio;
} VideoProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoProto_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VideoProto__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "framesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(FrameProto),
        .number = VideoProto_FieldNumber_FramesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VideoProto__storage_, framesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audio",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoProto_FieldNumber_Audio,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VideoProto__storage_, audio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VideoProto class]
                                     rootClass:[RenderRoot class]
                                          file:RenderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VideoProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RenderProto

@implementation RenderProto

@dynamic viewConfigsArray, viewConfigsArray_Count;
@dynamic beginViewsArray, beginViewsArray_Count;
@dynamic endViewsArray, endViewsArray_Count;
@dynamic requestViewsArray, requestViewsArray_Count;
@dynamic videosArray, videosArray_Count;

typedef struct RenderProto__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *viewConfigsArray;
  NSMutableArray *beginViewsArray;
  NSMutableArray *endViewsArray;
  NSMutableArray *requestViewsArray;
  NSMutableArray *videosArray;
} RenderProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "viewConfigsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ViewProto),
        .number = RenderProto_FieldNumber_ViewConfigsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RenderProto__storage_, viewConfigsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "beginViewsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RenderProto_FieldNumber_BeginViewsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RenderProto__storage_, beginViewsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endViewsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RenderProto_FieldNumber_EndViewsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RenderProto__storage_, endViewsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestViewsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RenderProto_FieldNumber_RequestViewsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RenderProto__storage_, requestViewsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(VideoProto),
        .number = RenderProto_FieldNumber_VideosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RenderProto__storage_, videosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RenderProto class]
                                     rootClass:[RenderRoot class]
                                          file:RenderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RenderProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
