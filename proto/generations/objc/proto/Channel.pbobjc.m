// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Channel.pbobjc.h"
#import "Gymize.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ContentProto);
GPBObjCClassDeclaration(GymizeProto);
GPBObjCClassDeclaration(HeaderProto);

#pragma mark - ChannelRoot

@implementation ChannelRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ChannelRoot_FileDescriptor

static GPBFileDescriptor *ChannelRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MessageTypeProto

GPBEnumDescriptor *MessageTypeProto_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MessageTypeProtoUnspecified\000MessageTypeP"
        "rotoMessage\000MessageTypeProtoRequest\000Mess"
        "ageTypeProtoResponse\000";
    static const int32_t values[] = {
        MessageTypeProto_MessageTypeProtoUnspecified,
        MessageTypeProto_MessageTypeProtoMessage,
        MessageTypeProto_MessageTypeProtoRequest,
        MessageTypeProto_MessageTypeProtoResponse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MessageTypeProto)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MessageTypeProto_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MessageTypeProto_IsValidValue(int32_t value__) {
  switch (value__) {
    case MessageTypeProto_MessageTypeProtoUnspecified:
    case MessageTypeProto_MessageTypeProtoMessage:
    case MessageTypeProto_MessageTypeProtoRequest:
    case MessageTypeProto_MessageTypeProtoResponse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - HeaderProto

@implementation HeaderProto

@dynamic messageType;
@dynamic id_p;
@dynamic uuid;

typedef struct HeaderProto__storage_ {
  uint32_t _has_storage_[1];
  MessageTypeProto messageType;
  NSString *id_p;
  NSData *uuid;
} HeaderProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageType",
        .dataTypeSpecific.enumDescFunc = MessageTypeProto_EnumDescriptor,
        .number = HeaderProto_FieldNumber_MessageType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeaderProto__storage_, messageType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = HeaderProto_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HeaderProto__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = HeaderProto_FieldNumber_Uuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HeaderProto__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeaderProto class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeaderProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HeaderProto_MessageType_RawValue(HeaderProto *message) {
  GPBDescriptor *descriptor = [HeaderProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HeaderProto_FieldNumber_MessageType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetHeaderProto_MessageType_RawValue(HeaderProto *message, int32_t value) {
  GPBDescriptor *descriptor = [HeaderProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HeaderProto_FieldNumber_MessageType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ContentProto

@implementation ContentProto

@dynamic dataOneOfCase;
@dynamic raw;
@dynamic text;
@dynamic gymize;

typedef struct ContentProto__storage_ {
  uint32_t _has_storage_[2];
  NSData *raw;
  NSString *text;
  GymizeProto *gymize;
} ContentProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "raw",
        .dataTypeSpecific.clazz = Nil,
        .number = ContentProto_FieldNumber_Raw,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ContentProto__storage_, raw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = ContentProto_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ContentProto__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gymize",
        .dataTypeSpecific.clazz = GPBObjCClass(GymizeProto),
        .number = ContentProto_FieldNumber_Gymize,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ContentProto__storage_, gymize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ContentProto class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContentProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "data",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ContentProto_ClearDataOneOfCase(ContentProto *message) {
  GPBDescriptor *descriptor = [ContentProto descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - MessageProto

@implementation MessageProto

@dynamic hasHeader, header;
@dynamic hasContent, content;

typedef struct MessageProto__storage_ {
  uint32_t _has_storage_[1];
  HeaderProto *header;
  ContentProto *content;
} MessageProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.clazz = GPBObjCClass(HeaderProto),
        .number = MessageProto_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageProto__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = GPBObjCClass(ContentProto),
        .number = MessageProto_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageProto__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageProto class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
