// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Channel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Content);
GPBObjCClassDeclaration(Header);

#pragma mark - ChannelRoot

@implementation ChannelRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ChannelRoot_FileDescriptor

static GPBFileDescriptor *ChannelRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MessageType

GPBEnumDescriptor *MessageType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MessageTypeUnspecified\000MessageTypeMessag"
        "e\000MessageTypeRequest\000MessageTypeResponse"
        "\000";
    static const int32_t values[] = {
        MessageType_MessageTypeUnspecified,
        MessageType_MessageTypeMessage,
        MessageType_MessageTypeRequest,
        MessageType_MessageTypeResponse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MessageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MessageType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MessageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MessageType_MessageTypeUnspecified:
    case MessageType_MessageTypeMessage:
    case MessageType_MessageTypeRequest:
    case MessageType_MessageTypeResponse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Header

@implementation Header

@dynamic messageType;
@dynamic id_p;
@dynamic uuid;

typedef struct Header__storage_ {
  uint32_t _has_storage_[1];
  MessageType messageType;
  NSString *id_p;
  NSData *uuid;
} Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageType",
        .dataTypeSpecific.enumDescFunc = MessageType_EnumDescriptor,
        .number = Header_FieldNumber_MessageType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Header__storage_, messageType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Header__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Uuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Header__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Header class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Header__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Header_MessageType_RawValue(Header *message) {
  GPBDescriptor *descriptor = [Header descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Header_FieldNumber_MessageType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetHeader_MessageType_RawValue(Header *message, int32_t value) {
  GPBDescriptor *descriptor = [Header descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Header_FieldNumber_MessageType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Content

@implementation Content

@dynamic dataOneOfCase;
@dynamic raw;
@dynamic text;

typedef struct Content__storage_ {
  uint32_t _has_storage_[2];
  NSData *raw;
  NSString *text;
} Content__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "raw",
        .dataTypeSpecific.clazz = Nil,
        .number = Content_FieldNumber_Raw,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Content__storage_, raw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = Content_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Content__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Content class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Content__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "data",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Content_ClearDataOneOfCase(Content *message) {
  GPBDescriptor *descriptor = [Content descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Message

@implementation Message

@dynamic hasHeader, header;
@dynamic hasContent, content;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  Header *header;
  Content *content;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.clazz = GPBObjCClass(Header),
        .number = Message_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = GPBObjCClass(Content),
        .number = Message_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
