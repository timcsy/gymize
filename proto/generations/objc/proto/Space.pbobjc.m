// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: space.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Space.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GraphProto);
GPBObjCClassDeclaration(ImageProto);
GPBObjCClassDeclaration(InstanceProto);
GPBObjCClassDeclaration(TensorProto);

#pragma mark - SpaceRoot

@implementation SpaceRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SpaceRoot_FileDescriptor

static GPBFileDescriptor *SpaceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum CompressionTypeProto

GPBEnumDescriptor *CompressionTypeProto_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CompressionTypeProtoUnspecified\000Compress"
        "ionTypeProtoNone\000CompressionTypeProtoPng"
        "\000CompressionTypeProtoJpg\000";
    static const int32_t values[] = {
        CompressionTypeProto_CompressionTypeProtoUnspecified,
        CompressionTypeProto_CompressionTypeProtoNone,
        CompressionTypeProto_CompressionTypeProtoPng,
        CompressionTypeProto_CompressionTypeProtoJpg,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CompressionTypeProto)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CompressionTypeProto_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CompressionTypeProto_IsValidValue(int32_t value__) {
  switch (value__) {
    case CompressionTypeProto_CompressionTypeProtoUnspecified:
    case CompressionTypeProto_CompressionTypeProtoNone:
    case CompressionTypeProto_CompressionTypeProtoPng:
    case CompressionTypeProto_CompressionTypeProtoJpg:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum InstanceTypeProto

GPBEnumDescriptor *InstanceTypeProto_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InstanceTypeProtoUnspecified\000InstanceTyp"
        "eProtoRaw\000InstanceTypeProtoTensor\000Instan"
        "ceTypeProtoDiscrete\000InstanceTypeProtoTex"
        "t\000InstanceTypeProtoDict\000InstanceTypeProt"
        "oList\000InstanceTypeProtoGraph\000InstanceTyp"
        "eProtoImage\000InstanceTypeProtoFloat\000Insta"
        "nceTypeProtoBool\000InstanceTypeProtoNull\000I"
        "nstanceTypeProtoJson\000";
    static const int32_t values[] = {
        InstanceTypeProto_InstanceTypeProtoUnspecified,
        InstanceTypeProto_InstanceTypeProtoRaw,
        InstanceTypeProto_InstanceTypeProtoTensor,
        InstanceTypeProto_InstanceTypeProtoDiscrete,
        InstanceTypeProto_InstanceTypeProtoText,
        InstanceTypeProto_InstanceTypeProtoDict,
        InstanceTypeProto_InstanceTypeProtoList,
        InstanceTypeProto_InstanceTypeProtoGraph,
        InstanceTypeProto_InstanceTypeProtoImage,
        InstanceTypeProto_InstanceTypeProtoFloat,
        InstanceTypeProto_InstanceTypeProtoBool,
        InstanceTypeProto_InstanceTypeProtoNull,
        InstanceTypeProto_InstanceTypeProtoJson,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(InstanceTypeProto)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:InstanceTypeProto_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL InstanceTypeProto_IsValidValue(int32_t value__) {
  switch (value__) {
    case InstanceTypeProto_InstanceTypeProtoUnspecified:
    case InstanceTypeProto_InstanceTypeProtoRaw:
    case InstanceTypeProto_InstanceTypeProtoTensor:
    case InstanceTypeProto_InstanceTypeProtoDiscrete:
    case InstanceTypeProto_InstanceTypeProtoText:
    case InstanceTypeProto_InstanceTypeProtoDict:
    case InstanceTypeProto_InstanceTypeProtoList:
    case InstanceTypeProto_InstanceTypeProtoGraph:
    case InstanceTypeProto_InstanceTypeProtoImage:
    case InstanceTypeProto_InstanceTypeProtoFloat:
    case InstanceTypeProto_InstanceTypeProtoBool:
    case InstanceTypeProto_InstanceTypeProtoNull:
    case InstanceTypeProto_InstanceTypeProtoJson:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TensorProto

@implementation TensorProto

@dynamic data_p;
@dynamic dtype;
@dynamic shapeArray, shapeArray_Count;

typedef struct TensorProto__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
  NSString *dtype;
  GPBInt32Array *shapeArray;
} TensorProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = TensorProto_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TensorProto__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "dtype",
        .dataTypeSpecific.clazz = Nil,
        .number = TensorProto_FieldNumber_Dtype,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TensorProto__storage_, dtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shapeArray",
        .dataTypeSpecific.clazz = Nil,
        .number = TensorProto_FieldNumber_ShapeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, shapeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TensorProto class]
                                     rootClass:[SpaceRoot class]
                                          file:SpaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TensorProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GraphProto

@implementation GraphProto

@dynamic hasNodes, nodes;
@dynamic hasEdges, edges;
@dynamic hasEdgeLinks, edgeLinks;

typedef struct GraphProto__storage_ {
  uint32_t _has_storage_[1];
  TensorProto *nodes;
  TensorProto *edges;
  TensorProto *edgeLinks;
} GraphProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nodes",
        .dataTypeSpecific.clazz = GPBObjCClass(TensorProto),
        .number = GraphProto_FieldNumber_Nodes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GraphProto__storage_, nodes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "edges",
        .dataTypeSpecific.clazz = GPBObjCClass(TensorProto),
        .number = GraphProto_FieldNumber_Edges,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GraphProto__storage_, edges),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "edgeLinks",
        .dataTypeSpecific.clazz = GPBObjCClass(TensorProto),
        .number = GraphProto_FieldNumber_EdgeLinks,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GraphProto__storage_, edgeLinks),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GraphProto class]
                                     rootClass:[SpaceRoot class]
                                          file:SpaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GraphProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImageProto

@implementation ImageProto

@dynamic compressionType;
@dynamic data_p;
@dynamic dtype;
@dynamic shapeArray, shapeArray_Count;
@dynamic transposeAxesArray, transposeAxesArray_Count;

typedef struct ImageProto__storage_ {
  uint32_t _has_storage_[1];
  CompressionTypeProto compressionType;
  NSData *data_p;
  NSString *dtype;
  GPBInt32Array *shapeArray;
  GPBInt32Array *transposeAxesArray;
} ImageProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "compressionType",
        .dataTypeSpecific.enumDescFunc = CompressionTypeProto_EnumDescriptor,
        .number = ImageProto_FieldNumber_CompressionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImageProto__storage_, compressionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageProto_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImageProto__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "dtype",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageProto_FieldNumber_Dtype,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ImageProto__storage_, dtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shapeArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageProto_FieldNumber_ShapeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ImageProto__storage_, shapeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "transposeAxesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageProto_FieldNumber_TransposeAxesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ImageProto__storage_, transposeAxesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImageProto class]
                                     rootClass:[SpaceRoot class]
                                          file:SpaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImageProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ImageProto_CompressionType_RawValue(ImageProto *message) {
  GPBDescriptor *descriptor = [ImageProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ImageProto_FieldNumber_CompressionType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetImageProto_CompressionType_RawValue(ImageProto *message, int32_t value) {
  GPBDescriptor *descriptor = [ImageProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ImageProto_FieldNumber_CompressionType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - InstanceProto

@implementation InstanceProto

@dynamic type;
@dynamic rawData;
@dynamic hasTensor, tensor;
@dynamic discrete;
@dynamic text;
@dynamic dict, dict_Count;
@dynamic listArray, listArray_Count;
@dynamic hasGraph, graph;
@dynamic hasImage, image;
@dynamic float_p;
@dynamic boolean;
@dynamic json;

typedef struct InstanceProto__storage_ {
  uint32_t _has_storage_[1];
  InstanceTypeProto type;
  NSData *rawData;
  TensorProto *tensor;
  NSString *text;
  NSMutableDictionary *dict;
  NSMutableArray *listArray;
  GraphProto *graph;
  ImageProto *image;
  NSString *json;
  int64_t discrete;
  double float_p;
} InstanceProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = InstanceTypeProto_EnumDescriptor,
        .number = InstanceProto_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rawData",
        .dataTypeSpecific.clazz = Nil,
        .number = InstanceProto_FieldNumber_RawData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, rawData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "tensor",
        .dataTypeSpecific.clazz = GPBObjCClass(TensorProto),
        .number = InstanceProto_FieldNumber_Tensor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, tensor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "discrete",
        .dataTypeSpecific.clazz = Nil,
        .number = InstanceProto_FieldNumber_Discrete,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, discrete),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = InstanceProto_FieldNumber_Text,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, text),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dict",
        .dataTypeSpecific.clazz = GPBObjCClass(InstanceProto),
        .number = InstanceProto_FieldNumber_Dict,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, dict),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.clazz = GPBObjCClass(InstanceProto),
        .number = InstanceProto_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "graph",
        .dataTypeSpecific.clazz = GPBObjCClass(GraphProto),
        .number = InstanceProto_FieldNumber_Graph,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, graph),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "image",
        .dataTypeSpecific.clazz = GPBObjCClass(ImageProto),
        .number = InstanceProto_FieldNumber_Image,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "float_p",
        .dataTypeSpecific.clazz = Nil,
        .number = InstanceProto_FieldNumber_Float_p,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, float_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "boolean",
        .dataTypeSpecific.clazz = Nil,
        .number = InstanceProto_FieldNumber_Boolean,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "json",
        .dataTypeSpecific.clazz = Nil,
        .number = InstanceProto_FieldNumber_Json,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(InstanceProto__storage_, json),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InstanceProto class]
                                     rootClass:[SpaceRoot class]
                                          file:SpaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InstanceProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t InstanceProto_Type_RawValue(InstanceProto *message) {
  GPBDescriptor *descriptor = [InstanceProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InstanceProto_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetInstanceProto_Type_RawValue(InstanceProto *message, int32_t value) {
  GPBDescriptor *descriptor = [InstanceProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InstanceProto_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
