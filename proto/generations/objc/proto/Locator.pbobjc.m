// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: locator.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Locator.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(MappingProto);
GPBObjCClassDeclaration(SelectorProto);
GPBObjCClassDeclaration(SliceProto);

#pragma mark - LocatorRoot

@implementation LocatorRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - LocatorRoot_FileDescriptor

static GPBFileDescriptor *LocatorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SelectorTypeProto

GPBEnumDescriptor *SelectorTypeProto_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SelectorTypeProtoUnspecified\000SelectorTyp"
        "eProtoDict\000SelectorTypeProtoTuple\000Select"
        "orTypeProtoSequence\000SelectorTypeProtoTen"
        "sor\000";
    static const int32_t values[] = {
        SelectorTypeProto_SelectorTypeProtoUnspecified,
        SelectorTypeProto_SelectorTypeProtoDict,
        SelectorTypeProto_SelectorTypeProtoTuple,
        SelectorTypeProto_SelectorTypeProtoSequence,
        SelectorTypeProto_SelectorTypeProtoTensor,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SelectorTypeProto)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SelectorTypeProto_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SelectorTypeProto_IsValidValue(int32_t value__) {
  switch (value__) {
    case SelectorTypeProto_SelectorTypeProtoUnspecified:
    case SelectorTypeProto_SelectorTypeProtoDict:
    case SelectorTypeProto_SelectorTypeProtoTuple:
    case SelectorTypeProto_SelectorTypeProtoSequence:
    case SelectorTypeProto_SelectorTypeProtoTensor:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SliceProto

@implementation SliceProto

@dynamic hasStart;
@dynamic start;
@dynamic hasStop;
@dynamic stop;
@dynamic step;
@dynamic isIndex;
@dynamic isEllipsis;
@dynamic isNewAxis;

typedef struct SliceProto__storage_ {
  uint32_t _has_storage_[1];
  int32_t start;
  int32_t stop;
  int32_t step;
} SliceProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hasStart",
        .dataTypeSpecific.clazz = Nil,
        .number = SliceProto_FieldNumber_HasStart,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "start",
        .dataTypeSpecific.clazz = Nil,
        .number = SliceProto_FieldNumber_Start,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SliceProto__storage_, start),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hasStop",
        .dataTypeSpecific.clazz = Nil,
        .number = SliceProto_FieldNumber_HasStop,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "stop",
        .dataTypeSpecific.clazz = Nil,
        .number = SliceProto_FieldNumber_Stop,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SliceProto__storage_, stop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "step",
        .dataTypeSpecific.clazz = Nil,
        .number = SliceProto_FieldNumber_Step,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SliceProto__storage_, step),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = SliceProto_FieldNumber_IsIndex,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isEllipsis",
        .dataTypeSpecific.clazz = Nil,
        .number = SliceProto_FieldNumber_IsEllipsis,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isNewAxis",
        .dataTypeSpecific.clazz = Nil,
        .number = SliceProto_FieldNumber_IsNewAxis,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SliceProto class]
                                     rootClass:[LocatorRoot class]
                                          file:LocatorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SliceProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SelectorProto

@implementation SelectorProto

@dynamic type;
@dynamic slicesArray, slicesArray_Count;
@dynamic key;

typedef struct SelectorProto__storage_ {
  uint32_t _has_storage_[1];
  SelectorTypeProto type;
  NSMutableArray *slicesArray;
  NSString *key;
} SelectorProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = SelectorTypeProto_EnumDescriptor,
        .number = SelectorProto_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SelectorProto__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "slicesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SliceProto),
        .number = SelectorProto_FieldNumber_SlicesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SelectorProto__storage_, slicesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = SelectorProto_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SelectorProto__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SelectorProto class]
                                     rootClass:[LocatorRoot class]
                                          file:LocatorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SelectorProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SelectorProto_Type_RawValue(SelectorProto *message) {
  GPBDescriptor *descriptor = [SelectorProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SelectorProto_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSelectorProto_Type_RawValue(SelectorProto *message, int32_t value) {
  GPBDescriptor *descriptor = [SelectorProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SelectorProto_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MappingProto

@implementation MappingProto

@dynamic isAllAgents;
@dynamic agentsArray, agentsArray_Count;
@dynamic isRoot;
@dynamic destinationArray, destinationArray_Count;
@dynamic sourceArray, sourceArray_Count;

typedef struct MappingProto__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *agentsArray;
  NSMutableArray *destinationArray;
  NSMutableArray *sourceArray;
} MappingProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isAllAgents",
        .dataTypeSpecific.clazz = Nil,
        .number = MappingProto_FieldNumber_IsAllAgents,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "agentsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MappingProto_FieldNumber_AgentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MappingProto__storage_, agentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isRoot",
        .dataTypeSpecific.clazz = Nil,
        .number = MappingProto_FieldNumber_IsRoot,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "destinationArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SelectorProto),
        .number = MappingProto_FieldNumber_DestinationArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MappingProto__storage_, destinationArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sourceArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SelectorProto),
        .number = MappingProto_FieldNumber_SourceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MappingProto__storage_, sourceArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MappingProto class]
                                     rootClass:[LocatorRoot class]
                                          file:LocatorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MappingProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LocatorProto

@implementation LocatorProto

@dynamic mappingsArray, mappingsArray_Count;

typedef struct LocatorProto__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *mappingsArray;
} LocatorProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mappingsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MappingProto),
        .number = LocatorProto_FieldNumber_MappingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LocatorProto__storage_, mappingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LocatorProto class]
                                     rootClass:[LocatorRoot class]
                                          file:LocatorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LocatorProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
