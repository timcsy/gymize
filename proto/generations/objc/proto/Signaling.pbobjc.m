// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signaling.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Signaling.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SignalingRoot

@implementation SignalingRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SignalingRoot_FileDescriptor

static GPBFileDescriptor *SignalingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SignalTypeProto

GPBEnumDescriptor *SignalTypeProto_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SignalTypeProtoUnspecified\000SignalTypePro"
        "toInit\000SignalTypeProtoUpdate\000SignalTypeP"
        "rotoResume\000SignalTypeProtoClose\000";
    static const int32_t values[] = {
        SignalTypeProto_SignalTypeProtoUnspecified,
        SignalTypeProto_SignalTypeProtoInit,
        SignalTypeProto_SignalTypeProtoUpdate,
        SignalTypeProto_SignalTypeProtoResume,
        SignalTypeProto_SignalTypeProtoClose,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SignalTypeProto)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SignalTypeProto_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SignalTypeProto_IsValidValue(int32_t value__) {
  switch (value__) {
    case SignalTypeProto_SignalTypeProtoUnspecified:
    case SignalTypeProto_SignalTypeProtoInit:
    case SignalTypeProto_SignalTypeProtoUpdate:
    case SignalTypeProto_SignalTypeProtoResume:
    case SignalTypeProto_SignalTypeProtoClose:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PeerTypeProto

GPBEnumDescriptor *PeerTypeProto_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PeerTypeProtoUnspecified\000PeerTypeProtoAc"
        "tive\000PeerTypeProtoPassive\000";
    static const int32_t values[] = {
        PeerTypeProto_PeerTypeProtoUnspecified,
        PeerTypeProto_PeerTypeProtoActive,
        PeerTypeProto_PeerTypeProtoPassive,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PeerTypeProto)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PeerTypeProto_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PeerTypeProto_IsValidValue(int32_t value__) {
  switch (value__) {
    case PeerTypeProto_PeerTypeProtoUnspecified:
    case PeerTypeProto_PeerTypeProtoActive:
    case PeerTypeProto_PeerTypeProtoPassive:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SignalProto

@implementation SignalProto

@dynamic signalType;
@dynamic id_p;
@dynamic data_p;
@dynamic name;
@dynamic peerType;
@dynamic URL;

typedef struct SignalProto__storage_ {
  uint32_t _has_storage_[1];
  SignalTypeProto signalType;
  PeerTypeProto peerType;
  NSString *id_p;
  NSData *data_p;
  NSString *name;
  NSString *URL;
} SignalProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signalType",
        .dataTypeSpecific.enumDescFunc = SignalTypeProto_EnumDescriptor,
        .number = SignalProto_FieldNumber_SignalType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignalProto__storage_, signalType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SignalProto_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SignalProto__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SignalProto_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SignalProto__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SignalProto_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SignalProto__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "peerType",
        .dataTypeSpecific.enumDescFunc = PeerTypeProto_EnumDescriptor,
        .number = SignalProto_FieldNumber_PeerType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SignalProto__storage_, peerType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = SignalProto_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SignalProto__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SignalProto class]
                                     rootClass:[SignalingRoot class]
                                          file:SignalingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignalProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SignalProto_SignalType_RawValue(SignalProto *message) {
  GPBDescriptor *descriptor = [SignalProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignalProto_FieldNumber_SignalType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSignalProto_SignalType_RawValue(SignalProto *message, int32_t value) {
  GPBDescriptor *descriptor = [SignalProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignalProto_FieldNumber_SignalType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SignalProto_PeerType_RawValue(SignalProto *message) {
  GPBDescriptor *descriptor = [SignalProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignalProto_FieldNumber_PeerType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSignalProto_PeerType_RawValue(SignalProto *message, int32_t value) {
  GPBDescriptor *descriptor = [SignalProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignalProto_FieldNumber_PeerType];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
