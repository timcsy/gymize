// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signaling.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Signaling.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SignalingRoot

@implementation SignalingRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SignalingRoot_FileDescriptor

static GPBFileDescriptor *SignalingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SignalType

GPBEnumDescriptor *SignalType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SignalTypeUnspecified\000SignalTypeInit\000Sig"
        "nalTypeUpdate\000SignalTypeResume\000SignalTyp"
        "eClose\000";
    static const int32_t values[] = {
        SignalType_SignalTypeUnspecified,
        SignalType_SignalTypeInit,
        SignalType_SignalTypeUpdate,
        SignalType_SignalTypeResume,
        SignalType_SignalTypeClose,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SignalType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SignalType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SignalType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SignalType_SignalTypeUnspecified:
    case SignalType_SignalTypeInit:
    case SignalType_SignalTypeUpdate:
    case SignalType_SignalTypeResume:
    case SignalType_SignalTypeClose:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PeerType

GPBEnumDescriptor *PeerType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PeerTypeUnspecified\000PeerTypeActive\000PeerT"
        "ypePassive\000";
    static const int32_t values[] = {
        PeerType_PeerTypeUnspecified,
        PeerType_PeerTypeActive,
        PeerType_PeerTypePassive,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PeerType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PeerType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PeerType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PeerType_PeerTypeUnspecified:
    case PeerType_PeerTypeActive:
    case PeerType_PeerTypePassive:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Signal

@implementation Signal

@dynamic signalType;
@dynamic id_p;
@dynamic data_p;
@dynamic name;
@dynamic peerType;
@dynamic URL;

typedef struct Signal__storage_ {
  uint32_t _has_storage_[1];
  SignalType signalType;
  PeerType peerType;
  NSString *id_p;
  NSData *data_p;
  NSString *name;
  NSString *URL;
} Signal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signalType",
        .dataTypeSpecific.enumDescFunc = SignalType_EnumDescriptor,
        .number = Signal_FieldNumber_SignalType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Signal__storage_, signalType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Signal_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Signal__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Signal_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Signal__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Signal_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Signal__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "peerType",
        .dataTypeSpecific.enumDescFunc = PeerType_EnumDescriptor,
        .number = Signal_FieldNumber_PeerType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Signal__storage_, peerType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = Signal_FieldNumber_URL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Signal__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Signal class]
                                     rootClass:[SignalingRoot class]
                                          file:SignalingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Signal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Signal_SignalType_RawValue(Signal *message) {
  GPBDescriptor *descriptor = [Signal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Signal_FieldNumber_SignalType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSignal_SignalType_RawValue(Signal *message, int32_t value) {
  GPBDescriptor *descriptor = [Signal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Signal_FieldNumber_SignalType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Signal_PeerType_RawValue(Signal *message) {
  GPBDescriptor *descriptor = [Signal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Signal_FieldNumber_PeerType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSignal_PeerType_RawValue(Signal *message, int32_t value) {
  GPBDescriptor *descriptor = [Signal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Signal_FieldNumber_PeerType];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
