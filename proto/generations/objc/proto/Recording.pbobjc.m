// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recording.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Recording.pbobjc.h"
#import "Space.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AudioFrameProto);
GPBObjCClassDeclaration(ImageFrameProto);
GPBObjCClassDeclaration(InstanceProto);
GPBObjCClassDeclaration(VideoProto);

#pragma mark - RecordingRoot

@implementation RecordingRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - RecordingRoot_FileDescriptor

static GPBFileDescriptor *RecordingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ImageFrameProto

@implementation ImageFrameProto

@dynamic hasImage, image;
@dynamic duration;

typedef struct ImageFrameProto__storage_ {
  uint32_t _has_storage_[1];
  float duration;
  InstanceProto *image;
} ImageFrameProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "image",
        .dataTypeSpecific.clazz = GPBObjCClass(InstanceProto),
        .number = ImageFrameProto_FieldNumber_Image,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImageFrameProto__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = ImageFrameProto_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImageFrameProto__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImageFrameProto class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImageFrameProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioFrameProto

@implementation AudioFrameProto

@dynamic hasData_p, data_p;
@dynamic duration;

typedef struct AudioFrameProto__storage_ {
  uint32_t _has_storage_[1];
  float duration;
  InstanceProto *data_p;
} AudioFrameProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(InstanceProto),
        .number = AudioFrameProto_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AudioFrameProto__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioFrameProto_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AudioFrameProto__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioFrameProto class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioFrameProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VideoProto

@implementation VideoProto

@dynamic imagesArray, imagesArray_Count;
@dynamic audiosArray, audiosArray_Count;

typedef struct VideoProto__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *imagesArray;
  NSMutableArray *audiosArray;
} VideoProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ImageFrameProto),
        .number = VideoProto_FieldNumber_ImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VideoProto__storage_, imagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audiosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioFrameProto),
        .number = VideoProto_FieldNumber_AudiosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VideoProto__storage_, audiosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VideoProto class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VideoProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecordingProto

@implementation RecordingProto

@dynamic renderMode;
@dynamic hasVideo, video;

typedef struct RecordingProto__storage_ {
  uint32_t _has_storage_[1];
  NSString *renderMode;
  VideoProto *video;
} RecordingProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "renderMode",
        .dataTypeSpecific.clazz = Nil,
        .number = RecordingProto_FieldNumber_RenderMode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RecordingProto__storage_, renderMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "video",
        .dataTypeSpecific.clazz = GPBObjCClass(VideoProto),
        .number = RecordingProto_FieldNumber_Video,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RecordingProto__storage_, video),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecordingProto class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RecordingProto__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
