// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recording.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_recording_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_recording_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "space.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_recording_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_recording_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_recording_2eproto;
class AudioFrameProto;
struct AudioFrameProtoDefaultTypeInternal;
extern AudioFrameProtoDefaultTypeInternal _AudioFrameProto_default_instance_;
class ImageFrameProto;
struct ImageFrameProtoDefaultTypeInternal;
extern ImageFrameProtoDefaultTypeInternal _ImageFrameProto_default_instance_;
class RecordingProto;
struct RecordingProtoDefaultTypeInternal;
extern RecordingProtoDefaultTypeInternal _RecordingProto_default_instance_;
class VideoProto;
struct VideoProtoDefaultTypeInternal;
extern VideoProtoDefaultTypeInternal _VideoProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AudioFrameProto* Arena::CreateMaybeMessage<::AudioFrameProto>(Arena*);
template<> ::ImageFrameProto* Arena::CreateMaybeMessage<::ImageFrameProto>(Arena*);
template<> ::RecordingProto* Arena::CreateMaybeMessage<::RecordingProto>(Arena*);
template<> ::VideoProto* Arena::CreateMaybeMessage<::VideoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ImageFrameProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageFrameProto) */ {
 public:
  inline ImageFrameProto() : ImageFrameProto(nullptr) {}
  ~ImageFrameProto() override;
  explicit constexpr ImageFrameProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageFrameProto(const ImageFrameProto& from);
  ImageFrameProto(ImageFrameProto&& from) noexcept
    : ImageFrameProto() {
    *this = ::std::move(from);
  }

  inline ImageFrameProto& operator=(const ImageFrameProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageFrameProto& operator=(ImageFrameProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageFrameProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageFrameProto* internal_default_instance() {
    return reinterpret_cast<const ImageFrameProto*>(
               &_ImageFrameProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageFrameProto& a, ImageFrameProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageFrameProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageFrameProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageFrameProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageFrameProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageFrameProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageFrameProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageFrameProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageFrameProto";
  }
  protected:
  explicit ImageFrameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // .InstanceProto image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::InstanceProto& image() const;
  PROTOBUF_NODISCARD ::InstanceProto* release_image();
  ::InstanceProto* mutable_image();
  void set_allocated_image(::InstanceProto* image);
  private:
  const ::InstanceProto& _internal_image() const;
  ::InstanceProto* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::InstanceProto* image);
  ::InstanceProto* unsafe_arena_release_image();

  // float duration = 2;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:ImageFrameProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InstanceProto* image_;
  float duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recording_2eproto;
};
// -------------------------------------------------------------------

class AudioFrameProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AudioFrameProto) */ {
 public:
  inline AudioFrameProto() : AudioFrameProto(nullptr) {}
  ~AudioFrameProto() override;
  explicit constexpr AudioFrameProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioFrameProto(const AudioFrameProto& from);
  AudioFrameProto(AudioFrameProto&& from) noexcept
    : AudioFrameProto() {
    *this = ::std::move(from);
  }

  inline AudioFrameProto& operator=(const AudioFrameProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioFrameProto& operator=(AudioFrameProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioFrameProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioFrameProto* internal_default_instance() {
    return reinterpret_cast<const AudioFrameProto*>(
               &_AudioFrameProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioFrameProto& a, AudioFrameProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioFrameProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioFrameProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioFrameProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioFrameProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioFrameProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioFrameProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioFrameProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AudioFrameProto";
  }
  protected:
  explicit AudioFrameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // .InstanceProto data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::InstanceProto& data() const;
  PROTOBUF_NODISCARD ::InstanceProto* release_data();
  ::InstanceProto* mutable_data();
  void set_allocated_data(::InstanceProto* data);
  private:
  const ::InstanceProto& _internal_data() const;
  ::InstanceProto* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::InstanceProto* data);
  ::InstanceProto* unsafe_arena_release_data();

  // float duration = 2;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:AudioFrameProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InstanceProto* data_;
  float duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recording_2eproto;
};
// -------------------------------------------------------------------

class VideoProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VideoProto) */ {
 public:
  inline VideoProto() : VideoProto(nullptr) {}
  ~VideoProto() override;
  explicit constexpr VideoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoProto(const VideoProto& from);
  VideoProto(VideoProto&& from) noexcept
    : VideoProto() {
    *this = ::std::move(from);
  }

  inline VideoProto& operator=(const VideoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoProto& operator=(VideoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoProto* internal_default_instance() {
    return reinterpret_cast<const VideoProto*>(
               &_VideoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VideoProto& a, VideoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VideoProto";
  }
  protected:
  explicit VideoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
    kAudiosFieldNumber = 2,
  };
  // repeated .ImageFrameProto images = 1;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::ImageFrameProto* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageFrameProto >*
      mutable_images();
  private:
  const ::ImageFrameProto& _internal_images(int index) const;
  ::ImageFrameProto* _internal_add_images();
  public:
  const ::ImageFrameProto& images(int index) const;
  ::ImageFrameProto* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageFrameProto >&
      images() const;

  // repeated .AudioFrameProto audios = 2;
  int audios_size() const;
  private:
  int _internal_audios_size() const;
  public:
  void clear_audios();
  ::AudioFrameProto* mutable_audios(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AudioFrameProto >*
      mutable_audios();
  private:
  const ::AudioFrameProto& _internal_audios(int index) const;
  ::AudioFrameProto* _internal_add_audios();
  public:
  const ::AudioFrameProto& audios(int index) const;
  ::AudioFrameProto* add_audios();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AudioFrameProto >&
      audios() const;

  // @@protoc_insertion_point(class_scope:VideoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageFrameProto > images_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AudioFrameProto > audios_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recording_2eproto;
};
// -------------------------------------------------------------------

class RecordingProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RecordingProto) */ {
 public:
  inline RecordingProto() : RecordingProto(nullptr) {}
  ~RecordingProto() override;
  explicit constexpr RecordingProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordingProto(const RecordingProto& from);
  RecordingProto(RecordingProto&& from) noexcept
    : RecordingProto() {
    *this = ::std::move(from);
  }

  inline RecordingProto& operator=(const RecordingProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingProto& operator=(RecordingProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordingProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordingProto* internal_default_instance() {
    return reinterpret_cast<const RecordingProto*>(
               &_RecordingProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RecordingProto& a, RecordingProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordingProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordingProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordingProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordingProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RecordingProto";
  }
  protected:
  explicit RecordingProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRenderModeFieldNumber = 1,
    kVideoFieldNumber = 2,
  };
  // string render_mode = 1;
  void clear_render_mode();
  const std::string& render_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_render_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_render_mode();
  PROTOBUF_NODISCARD std::string* release_render_mode();
  void set_allocated_render_mode(std::string* render_mode);
  private:
  const std::string& _internal_render_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_render_mode(const std::string& value);
  std::string* _internal_mutable_render_mode();
  public:

  // .VideoProto video = 2;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::VideoProto& video() const;
  PROTOBUF_NODISCARD ::VideoProto* release_video();
  ::VideoProto* mutable_video();
  void set_allocated_video(::VideoProto* video);
  private:
  const ::VideoProto& _internal_video() const;
  ::VideoProto* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::VideoProto* video);
  ::VideoProto* unsafe_arena_release_video();

  // @@protoc_insertion_point(class_scope:RecordingProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr render_mode_;
  ::VideoProto* video_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recording_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageFrameProto

// .InstanceProto image = 1;
inline bool ImageFrameProto::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool ImageFrameProto::has_image() const {
  return _internal_has_image();
}
inline const ::InstanceProto& ImageFrameProto::_internal_image() const {
  const ::InstanceProto* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::InstanceProto&>(
      ::_InstanceProto_default_instance_);
}
inline const ::InstanceProto& ImageFrameProto::image() const {
  // @@protoc_insertion_point(field_get:ImageFrameProto.image)
  return _internal_image();
}
inline void ImageFrameProto::unsafe_arena_set_allocated_image(
    ::InstanceProto* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ImageFrameProto.image)
}
inline ::InstanceProto* ImageFrameProto::release_image() {
  
  ::InstanceProto* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InstanceProto* ImageFrameProto::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:ImageFrameProto.image)
  
  ::InstanceProto* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::InstanceProto* ImageFrameProto::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::InstanceProto>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::InstanceProto* ImageFrameProto::mutable_image() {
  ::InstanceProto* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:ImageFrameProto.image)
  return _msg;
}
inline void ImageFrameProto::set_allocated_image(::InstanceProto* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:ImageFrameProto.image)
}

// float duration = 2;
inline void ImageFrameProto::clear_duration() {
  duration_ = 0;
}
inline float ImageFrameProto::_internal_duration() const {
  return duration_;
}
inline float ImageFrameProto::duration() const {
  // @@protoc_insertion_point(field_get:ImageFrameProto.duration)
  return _internal_duration();
}
inline void ImageFrameProto::_internal_set_duration(float value) {
  
  duration_ = value;
}
inline void ImageFrameProto::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:ImageFrameProto.duration)
}

// -------------------------------------------------------------------

// AudioFrameProto

// .InstanceProto data = 1;
inline bool AudioFrameProto::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool AudioFrameProto::has_data() const {
  return _internal_has_data();
}
inline const ::InstanceProto& AudioFrameProto::_internal_data() const {
  const ::InstanceProto* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::InstanceProto&>(
      ::_InstanceProto_default_instance_);
}
inline const ::InstanceProto& AudioFrameProto::data() const {
  // @@protoc_insertion_point(field_get:AudioFrameProto.data)
  return _internal_data();
}
inline void AudioFrameProto::unsafe_arena_set_allocated_data(
    ::InstanceProto* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AudioFrameProto.data)
}
inline ::InstanceProto* AudioFrameProto::release_data() {
  
  ::InstanceProto* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InstanceProto* AudioFrameProto::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:AudioFrameProto.data)
  
  ::InstanceProto* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::InstanceProto* AudioFrameProto::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::InstanceProto>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::InstanceProto* AudioFrameProto::mutable_data() {
  ::InstanceProto* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:AudioFrameProto.data)
  return _msg;
}
inline void AudioFrameProto::set_allocated_data(::InstanceProto* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:AudioFrameProto.data)
}

// float duration = 2;
inline void AudioFrameProto::clear_duration() {
  duration_ = 0;
}
inline float AudioFrameProto::_internal_duration() const {
  return duration_;
}
inline float AudioFrameProto::duration() const {
  // @@protoc_insertion_point(field_get:AudioFrameProto.duration)
  return _internal_duration();
}
inline void AudioFrameProto::_internal_set_duration(float value) {
  
  duration_ = value;
}
inline void AudioFrameProto::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:AudioFrameProto.duration)
}

// -------------------------------------------------------------------

// VideoProto

// repeated .ImageFrameProto images = 1;
inline int VideoProto::_internal_images_size() const {
  return images_.size();
}
inline int VideoProto::images_size() const {
  return _internal_images_size();
}
inline void VideoProto::clear_images() {
  images_.Clear();
}
inline ::ImageFrameProto* VideoProto::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:VideoProto.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageFrameProto >*
VideoProto::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:VideoProto.images)
  return &images_;
}
inline const ::ImageFrameProto& VideoProto::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::ImageFrameProto& VideoProto::images(int index) const {
  // @@protoc_insertion_point(field_get:VideoProto.images)
  return _internal_images(index);
}
inline ::ImageFrameProto* VideoProto::_internal_add_images() {
  return images_.Add();
}
inline ::ImageFrameProto* VideoProto::add_images() {
  ::ImageFrameProto* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:VideoProto.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageFrameProto >&
VideoProto::images() const {
  // @@protoc_insertion_point(field_list:VideoProto.images)
  return images_;
}

// repeated .AudioFrameProto audios = 2;
inline int VideoProto::_internal_audios_size() const {
  return audios_.size();
}
inline int VideoProto::audios_size() const {
  return _internal_audios_size();
}
inline void VideoProto::clear_audios() {
  audios_.Clear();
}
inline ::AudioFrameProto* VideoProto::mutable_audios(int index) {
  // @@protoc_insertion_point(field_mutable:VideoProto.audios)
  return audios_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AudioFrameProto >*
VideoProto::mutable_audios() {
  // @@protoc_insertion_point(field_mutable_list:VideoProto.audios)
  return &audios_;
}
inline const ::AudioFrameProto& VideoProto::_internal_audios(int index) const {
  return audios_.Get(index);
}
inline const ::AudioFrameProto& VideoProto::audios(int index) const {
  // @@protoc_insertion_point(field_get:VideoProto.audios)
  return _internal_audios(index);
}
inline ::AudioFrameProto* VideoProto::_internal_add_audios() {
  return audios_.Add();
}
inline ::AudioFrameProto* VideoProto::add_audios() {
  ::AudioFrameProto* _add = _internal_add_audios();
  // @@protoc_insertion_point(field_add:VideoProto.audios)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AudioFrameProto >&
VideoProto::audios() const {
  // @@protoc_insertion_point(field_list:VideoProto.audios)
  return audios_;
}

// -------------------------------------------------------------------

// RecordingProto

// string render_mode = 1;
inline void RecordingProto::clear_render_mode() {
  render_mode_.ClearToEmpty();
}
inline const std::string& RecordingProto::render_mode() const {
  // @@protoc_insertion_point(field_get:RecordingProto.render_mode)
  return _internal_render_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordingProto::set_render_mode(ArgT0&& arg0, ArgT... args) {
 
 render_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RecordingProto.render_mode)
}
inline std::string* RecordingProto::mutable_render_mode() {
  std::string* _s = _internal_mutable_render_mode();
  // @@protoc_insertion_point(field_mutable:RecordingProto.render_mode)
  return _s;
}
inline const std::string& RecordingProto::_internal_render_mode() const {
  return render_mode_.Get();
}
inline void RecordingProto::_internal_set_render_mode(const std::string& value) {
  
  render_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RecordingProto::_internal_mutable_render_mode() {
  
  return render_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RecordingProto::release_render_mode() {
  // @@protoc_insertion_point(field_release:RecordingProto.render_mode)
  return render_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RecordingProto::set_allocated_render_mode(std::string* render_mode) {
  if (render_mode != nullptr) {
    
  } else {
    
  }
  render_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), render_mode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (render_mode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    render_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RecordingProto.render_mode)
}

// .VideoProto video = 2;
inline bool RecordingProto::_internal_has_video() const {
  return this != internal_default_instance() && video_ != nullptr;
}
inline bool RecordingProto::has_video() const {
  return _internal_has_video();
}
inline void RecordingProto::clear_video() {
  if (GetArenaForAllocation() == nullptr && video_ != nullptr) {
    delete video_;
  }
  video_ = nullptr;
}
inline const ::VideoProto& RecordingProto::_internal_video() const {
  const ::VideoProto* p = video_;
  return p != nullptr ? *p : reinterpret_cast<const ::VideoProto&>(
      ::_VideoProto_default_instance_);
}
inline const ::VideoProto& RecordingProto::video() const {
  // @@protoc_insertion_point(field_get:RecordingProto.video)
  return _internal_video();
}
inline void RecordingProto::unsafe_arena_set_allocated_video(
    ::VideoProto* video) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_);
  }
  video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RecordingProto.video)
}
inline ::VideoProto* RecordingProto::release_video() {
  
  ::VideoProto* temp = video_;
  video_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VideoProto* RecordingProto::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:RecordingProto.video)
  
  ::VideoProto* temp = video_;
  video_ = nullptr;
  return temp;
}
inline ::VideoProto* RecordingProto::_internal_mutable_video() {
  
  if (video_ == nullptr) {
    auto* p = CreateMaybeMessage<::VideoProto>(GetArenaForAllocation());
    video_ = p;
  }
  return video_;
}
inline ::VideoProto* RecordingProto::mutable_video() {
  ::VideoProto* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:RecordingProto.video)
  return _msg;
}
inline void RecordingProto::set_allocated_video(::VideoProto* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::VideoProto>::GetOwningArena(video);
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  video_ = video;
  // @@protoc_insertion_point(field_set_allocated:RecordingProto.video)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_recording_2eproto
