// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: render.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_render_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_render_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "space.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_render_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_render_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_render_2eproto;
class FrameProto;
struct FrameProtoDefaultTypeInternal;
extern FrameProtoDefaultTypeInternal _FrameProto_default_instance_;
class RenderProto;
struct RenderProtoDefaultTypeInternal;
extern RenderProtoDefaultTypeInternal _RenderProto_default_instance_;
class VideoProto;
struct VideoProtoDefaultTypeInternal;
extern VideoProtoDefaultTypeInternal _VideoProto_default_instance_;
class ViewProto;
struct ViewProtoDefaultTypeInternal;
extern ViewProtoDefaultTypeInternal _ViewProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FrameProto* Arena::CreateMaybeMessage<::FrameProto>(Arena*);
template<> ::RenderProto* Arena::CreateMaybeMessage<::RenderProto>(Arena*);
template<> ::VideoProto* Arena::CreateMaybeMessage<::VideoProto>(Arena*);
template<> ::ViewProto* Arena::CreateMaybeMessage<::ViewProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ViewProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ViewProto) */ {
 public:
  inline ViewProto() : ViewProto(nullptr) {}
  ~ViewProto() override;
  explicit constexpr ViewProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewProto(const ViewProto& from);
  ViewProto(ViewProto&& from) noexcept
    : ViewProto() {
    *this = ::std::move(from);
  }

  inline ViewProto& operator=(const ViewProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewProto& operator=(ViewProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewProto* internal_default_instance() {
    return reinterpret_cast<const ViewProto*>(
               &_ViewProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ViewProto& a, ViewProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ViewProto";
  }
  protected:
  explicit ViewProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kScreenWidthFieldNumber = 3,
    kIsSingleFrameFieldNumber = 2,
    kFullscreenFieldNumber = 5,
    kScreenHeightFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 screen_width = 3;
  void clear_screen_width();
  int32_t screen_width() const;
  void set_screen_width(int32_t value);
  private:
  int32_t _internal_screen_width() const;
  void _internal_set_screen_width(int32_t value);
  public:

  // bool is_single_frame = 2;
  void clear_is_single_frame();
  bool is_single_frame() const;
  void set_is_single_frame(bool value);
  private:
  bool _internal_is_single_frame() const;
  void _internal_set_is_single_frame(bool value);
  public:

  // bool fullscreen = 5;
  void clear_fullscreen();
  bool fullscreen() const;
  void set_fullscreen(bool value);
  private:
  bool _internal_fullscreen() const;
  void _internal_set_fullscreen(bool value);
  public:

  // int32 screen_height = 4;
  void clear_screen_height();
  int32_t screen_height() const;
  void set_screen_height(int32_t value);
  private:
  int32_t _internal_screen_height() const;
  void _internal_set_screen_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ViewProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t screen_width_;
  bool is_single_frame_;
  bool fullscreen_;
  int32_t screen_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_render_2eproto;
};
// -------------------------------------------------------------------

class FrameProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameProto) */ {
 public:
  inline FrameProto() : FrameProto(nullptr) {}
  ~FrameProto() override;
  explicit constexpr FrameProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameProto(const FrameProto& from);
  FrameProto(FrameProto&& from) noexcept
    : FrameProto() {
    *this = ::std::move(from);
  }

  inline FrameProto& operator=(const FrameProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameProto& operator=(FrameProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameProto* internal_default_instance() {
    return reinterpret_cast<const FrameProto*>(
               &_FrameProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameProto& a, FrameProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameProto";
  }
  protected:
  explicit FrameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // .InstanceProto image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::InstanceProto& image() const;
  PROTOBUF_NODISCARD ::InstanceProto* release_image();
  ::InstanceProto* mutable_image();
  void set_allocated_image(::InstanceProto* image);
  private:
  const ::InstanceProto& _internal_image() const;
  ::InstanceProto* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::InstanceProto* image);
  ::InstanceProto* unsafe_arena_release_image();

  // float duration = 2;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:FrameProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InstanceProto* image_;
  float duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_render_2eproto;
};
// -------------------------------------------------------------------

class VideoProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VideoProto) */ {
 public:
  inline VideoProto() : VideoProto(nullptr) {}
  ~VideoProto() override;
  explicit constexpr VideoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoProto(const VideoProto& from);
  VideoProto(VideoProto&& from) noexcept
    : VideoProto() {
    *this = ::std::move(from);
  }

  inline VideoProto& operator=(const VideoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoProto& operator=(VideoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoProto* internal_default_instance() {
    return reinterpret_cast<const VideoProto*>(
               &_VideoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VideoProto& a, VideoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VideoProto";
  }
  protected:
  explicit VideoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 2,
    kNameFieldNumber = 1,
    kAudioFieldNumber = 3,
  };
  // repeated .FrameProto frames = 2;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::FrameProto* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto >*
      mutable_frames();
  private:
  const ::FrameProto& _internal_frames(int index) const;
  ::FrameProto* _internal_add_frames();
  public:
  const ::FrameProto& frames(int index) const;
  ::FrameProto* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto >&
      frames() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes audio = 3;
  void clear_audio();
  const std::string& audio() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio();
  PROTOBUF_NODISCARD std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // @@protoc_insertion_point(class_scope:VideoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto > frames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_render_2eproto;
};
// -------------------------------------------------------------------

class RenderProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RenderProto) */ {
 public:
  inline RenderProto() : RenderProto(nullptr) {}
  ~RenderProto() override;
  explicit constexpr RenderProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderProto(const RenderProto& from);
  RenderProto(RenderProto&& from) noexcept
    : RenderProto() {
    *this = ::std::move(from);
  }

  inline RenderProto& operator=(const RenderProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderProto& operator=(RenderProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderProto* internal_default_instance() {
    return reinterpret_cast<const RenderProto*>(
               &_RenderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RenderProto& a, RenderProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenderProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RenderProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RenderProto";
  }
  protected:
  explicit RenderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewConfigsFieldNumber = 1,
    kBeginViewsFieldNumber = 2,
    kEndViewsFieldNumber = 3,
    kRequestViewsFieldNumber = 4,
    kVideosFieldNumber = 5,
  };
  // repeated .ViewProto view_configs = 1;
  int view_configs_size() const;
  private:
  int _internal_view_configs_size() const;
  public:
  void clear_view_configs();
  ::ViewProto* mutable_view_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ViewProto >*
      mutable_view_configs();
  private:
  const ::ViewProto& _internal_view_configs(int index) const;
  ::ViewProto* _internal_add_view_configs();
  public:
  const ::ViewProto& view_configs(int index) const;
  ::ViewProto* add_view_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ViewProto >&
      view_configs() const;

  // repeated string begin_views = 2;
  int begin_views_size() const;
  private:
  int _internal_begin_views_size() const;
  public:
  void clear_begin_views();
  const std::string& begin_views(int index) const;
  std::string* mutable_begin_views(int index);
  void set_begin_views(int index, const std::string& value);
  void set_begin_views(int index, std::string&& value);
  void set_begin_views(int index, const char* value);
  void set_begin_views(int index, const char* value, size_t size);
  std::string* add_begin_views();
  void add_begin_views(const std::string& value);
  void add_begin_views(std::string&& value);
  void add_begin_views(const char* value);
  void add_begin_views(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& begin_views() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_begin_views();
  private:
  const std::string& _internal_begin_views(int index) const;
  std::string* _internal_add_begin_views();
  public:

  // repeated string end_views = 3;
  int end_views_size() const;
  private:
  int _internal_end_views_size() const;
  public:
  void clear_end_views();
  const std::string& end_views(int index) const;
  std::string* mutable_end_views(int index);
  void set_end_views(int index, const std::string& value);
  void set_end_views(int index, std::string&& value);
  void set_end_views(int index, const char* value);
  void set_end_views(int index, const char* value, size_t size);
  std::string* add_end_views();
  void add_end_views(const std::string& value);
  void add_end_views(std::string&& value);
  void add_end_views(const char* value);
  void add_end_views(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& end_views() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_end_views();
  private:
  const std::string& _internal_end_views(int index) const;
  std::string* _internal_add_end_views();
  public:

  // repeated string request_views = 4;
  int request_views_size() const;
  private:
  int _internal_request_views_size() const;
  public:
  void clear_request_views();
  const std::string& request_views(int index) const;
  std::string* mutable_request_views(int index);
  void set_request_views(int index, const std::string& value);
  void set_request_views(int index, std::string&& value);
  void set_request_views(int index, const char* value);
  void set_request_views(int index, const char* value, size_t size);
  std::string* add_request_views();
  void add_request_views(const std::string& value);
  void add_request_views(std::string&& value);
  void add_request_views(const char* value);
  void add_request_views(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& request_views() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_request_views();
  private:
  const std::string& _internal_request_views(int index) const;
  std::string* _internal_add_request_views();
  public:

  // repeated .VideoProto videos = 5;
  int videos_size() const;
  private:
  int _internal_videos_size() const;
  public:
  void clear_videos();
  ::VideoProto* mutable_videos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoProto >*
      mutable_videos();
  private:
  const ::VideoProto& _internal_videos(int index) const;
  ::VideoProto* _internal_add_videos();
  public:
  const ::VideoProto& videos(int index) const;
  ::VideoProto* add_videos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoProto >&
      videos() const;

  // @@protoc_insertion_point(class_scope:RenderProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ViewProto > view_configs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> begin_views_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> end_views_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> request_views_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoProto > videos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_render_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ViewProto

// string name = 1;
inline void ViewProto::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ViewProto::name() const {
  // @@protoc_insertion_point(field_get:ViewProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ViewProto.name)
}
inline std::string* ViewProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ViewProto.name)
  return _s;
}
inline const std::string& ViewProto::_internal_name() const {
  return name_.Get();
}
inline void ViewProto::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewProto::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewProto::release_name() {
  // @@protoc_insertion_point(field_release:ViewProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ViewProto.name)
}

// bool is_single_frame = 2;
inline void ViewProto::clear_is_single_frame() {
  is_single_frame_ = false;
}
inline bool ViewProto::_internal_is_single_frame() const {
  return is_single_frame_;
}
inline bool ViewProto::is_single_frame() const {
  // @@protoc_insertion_point(field_get:ViewProto.is_single_frame)
  return _internal_is_single_frame();
}
inline void ViewProto::_internal_set_is_single_frame(bool value) {
  
  is_single_frame_ = value;
}
inline void ViewProto::set_is_single_frame(bool value) {
  _internal_set_is_single_frame(value);
  // @@protoc_insertion_point(field_set:ViewProto.is_single_frame)
}

// int32 screen_width = 3;
inline void ViewProto::clear_screen_width() {
  screen_width_ = 0;
}
inline int32_t ViewProto::_internal_screen_width() const {
  return screen_width_;
}
inline int32_t ViewProto::screen_width() const {
  // @@protoc_insertion_point(field_get:ViewProto.screen_width)
  return _internal_screen_width();
}
inline void ViewProto::_internal_set_screen_width(int32_t value) {
  
  screen_width_ = value;
}
inline void ViewProto::set_screen_width(int32_t value) {
  _internal_set_screen_width(value);
  // @@protoc_insertion_point(field_set:ViewProto.screen_width)
}

// int32 screen_height = 4;
inline void ViewProto::clear_screen_height() {
  screen_height_ = 0;
}
inline int32_t ViewProto::_internal_screen_height() const {
  return screen_height_;
}
inline int32_t ViewProto::screen_height() const {
  // @@protoc_insertion_point(field_get:ViewProto.screen_height)
  return _internal_screen_height();
}
inline void ViewProto::_internal_set_screen_height(int32_t value) {
  
  screen_height_ = value;
}
inline void ViewProto::set_screen_height(int32_t value) {
  _internal_set_screen_height(value);
  // @@protoc_insertion_point(field_set:ViewProto.screen_height)
}

// bool fullscreen = 5;
inline void ViewProto::clear_fullscreen() {
  fullscreen_ = false;
}
inline bool ViewProto::_internal_fullscreen() const {
  return fullscreen_;
}
inline bool ViewProto::fullscreen() const {
  // @@protoc_insertion_point(field_get:ViewProto.fullscreen)
  return _internal_fullscreen();
}
inline void ViewProto::_internal_set_fullscreen(bool value) {
  
  fullscreen_ = value;
}
inline void ViewProto::set_fullscreen(bool value) {
  _internal_set_fullscreen(value);
  // @@protoc_insertion_point(field_set:ViewProto.fullscreen)
}

// -------------------------------------------------------------------

// FrameProto

// .InstanceProto image = 1;
inline bool FrameProto::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool FrameProto::has_image() const {
  return _internal_has_image();
}
inline const ::InstanceProto& FrameProto::_internal_image() const {
  const ::InstanceProto* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::InstanceProto&>(
      ::_InstanceProto_default_instance_);
}
inline const ::InstanceProto& FrameProto::image() const {
  // @@protoc_insertion_point(field_get:FrameProto.image)
  return _internal_image();
}
inline void FrameProto::unsafe_arena_set_allocated_image(
    ::InstanceProto* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FrameProto.image)
}
inline ::InstanceProto* FrameProto::release_image() {
  
  ::InstanceProto* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InstanceProto* FrameProto::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:FrameProto.image)
  
  ::InstanceProto* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::InstanceProto* FrameProto::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::InstanceProto>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::InstanceProto* FrameProto::mutable_image() {
  ::InstanceProto* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:FrameProto.image)
  return _msg;
}
inline void FrameProto::set_allocated_image(::InstanceProto* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:FrameProto.image)
}

// float duration = 2;
inline void FrameProto::clear_duration() {
  duration_ = 0;
}
inline float FrameProto::_internal_duration() const {
  return duration_;
}
inline float FrameProto::duration() const {
  // @@protoc_insertion_point(field_get:FrameProto.duration)
  return _internal_duration();
}
inline void FrameProto::_internal_set_duration(float value) {
  
  duration_ = value;
}
inline void FrameProto::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:FrameProto.duration)
}

// -------------------------------------------------------------------

// VideoProto

// string name = 1;
inline void VideoProto::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& VideoProto::name() const {
  // @@protoc_insertion_point(field_get:VideoProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VideoProto.name)
}
inline std::string* VideoProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:VideoProto.name)
  return _s;
}
inline const std::string& VideoProto::_internal_name() const {
  return name_.Get();
}
inline void VideoProto::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VideoProto::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VideoProto::release_name() {
  // @@protoc_insertion_point(field_release:VideoProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VideoProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VideoProto.name)
}

// repeated .FrameProto frames = 2;
inline int VideoProto::_internal_frames_size() const {
  return frames_.size();
}
inline int VideoProto::frames_size() const {
  return _internal_frames_size();
}
inline void VideoProto::clear_frames() {
  frames_.Clear();
}
inline ::FrameProto* VideoProto::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:VideoProto.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto >*
VideoProto::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:VideoProto.frames)
  return &frames_;
}
inline const ::FrameProto& VideoProto::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::FrameProto& VideoProto::frames(int index) const {
  // @@protoc_insertion_point(field_get:VideoProto.frames)
  return _internal_frames(index);
}
inline ::FrameProto* VideoProto::_internal_add_frames() {
  return frames_.Add();
}
inline ::FrameProto* VideoProto::add_frames() {
  ::FrameProto* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:VideoProto.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto >&
VideoProto::frames() const {
  // @@protoc_insertion_point(field_list:VideoProto.frames)
  return frames_;
}

// bytes audio = 3;
inline void VideoProto::clear_audio() {
  audio_.ClearToEmpty();
}
inline const std::string& VideoProto::audio() const {
  // @@protoc_insertion_point(field_get:VideoProto.audio)
  return _internal_audio();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoProto::set_audio(ArgT0&& arg0, ArgT... args) {
 
 audio_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VideoProto.audio)
}
inline std::string* VideoProto::mutable_audio() {
  std::string* _s = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:VideoProto.audio)
  return _s;
}
inline const std::string& VideoProto::_internal_audio() const {
  return audio_.Get();
}
inline void VideoProto::_internal_set_audio(const std::string& value) {
  
  audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VideoProto::_internal_mutable_audio() {
  
  return audio_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VideoProto::release_audio() {
  // @@protoc_insertion_point(field_release:VideoProto.audio)
  return audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VideoProto::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    
  } else {
    
  }
  audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (audio_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VideoProto.audio)
}

// -------------------------------------------------------------------

// RenderProto

// repeated .ViewProto view_configs = 1;
inline int RenderProto::_internal_view_configs_size() const {
  return view_configs_.size();
}
inline int RenderProto::view_configs_size() const {
  return _internal_view_configs_size();
}
inline void RenderProto::clear_view_configs() {
  view_configs_.Clear();
}
inline ::ViewProto* RenderProto::mutable_view_configs(int index) {
  // @@protoc_insertion_point(field_mutable:RenderProto.view_configs)
  return view_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ViewProto >*
RenderProto::mutable_view_configs() {
  // @@protoc_insertion_point(field_mutable_list:RenderProto.view_configs)
  return &view_configs_;
}
inline const ::ViewProto& RenderProto::_internal_view_configs(int index) const {
  return view_configs_.Get(index);
}
inline const ::ViewProto& RenderProto::view_configs(int index) const {
  // @@protoc_insertion_point(field_get:RenderProto.view_configs)
  return _internal_view_configs(index);
}
inline ::ViewProto* RenderProto::_internal_add_view_configs() {
  return view_configs_.Add();
}
inline ::ViewProto* RenderProto::add_view_configs() {
  ::ViewProto* _add = _internal_add_view_configs();
  // @@protoc_insertion_point(field_add:RenderProto.view_configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ViewProto >&
RenderProto::view_configs() const {
  // @@protoc_insertion_point(field_list:RenderProto.view_configs)
  return view_configs_;
}

// repeated string begin_views = 2;
inline int RenderProto::_internal_begin_views_size() const {
  return begin_views_.size();
}
inline int RenderProto::begin_views_size() const {
  return _internal_begin_views_size();
}
inline void RenderProto::clear_begin_views() {
  begin_views_.Clear();
}
inline std::string* RenderProto::add_begin_views() {
  std::string* _s = _internal_add_begin_views();
  // @@protoc_insertion_point(field_add_mutable:RenderProto.begin_views)
  return _s;
}
inline const std::string& RenderProto::_internal_begin_views(int index) const {
  return begin_views_.Get(index);
}
inline const std::string& RenderProto::begin_views(int index) const {
  // @@protoc_insertion_point(field_get:RenderProto.begin_views)
  return _internal_begin_views(index);
}
inline std::string* RenderProto::mutable_begin_views(int index) {
  // @@protoc_insertion_point(field_mutable:RenderProto.begin_views)
  return begin_views_.Mutable(index);
}
inline void RenderProto::set_begin_views(int index, const std::string& value) {
  begin_views_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:RenderProto.begin_views)
}
inline void RenderProto::set_begin_views(int index, std::string&& value) {
  begin_views_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:RenderProto.begin_views)
}
inline void RenderProto::set_begin_views(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  begin_views_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RenderProto.begin_views)
}
inline void RenderProto::set_begin_views(int index, const char* value, size_t size) {
  begin_views_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RenderProto.begin_views)
}
inline std::string* RenderProto::_internal_add_begin_views() {
  return begin_views_.Add();
}
inline void RenderProto::add_begin_views(const std::string& value) {
  begin_views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RenderProto.begin_views)
}
inline void RenderProto::add_begin_views(std::string&& value) {
  begin_views_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RenderProto.begin_views)
}
inline void RenderProto::add_begin_views(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  begin_views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RenderProto.begin_views)
}
inline void RenderProto::add_begin_views(const char* value, size_t size) {
  begin_views_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RenderProto.begin_views)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RenderProto::begin_views() const {
  // @@protoc_insertion_point(field_list:RenderProto.begin_views)
  return begin_views_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RenderProto::mutable_begin_views() {
  // @@protoc_insertion_point(field_mutable_list:RenderProto.begin_views)
  return &begin_views_;
}

// repeated string end_views = 3;
inline int RenderProto::_internal_end_views_size() const {
  return end_views_.size();
}
inline int RenderProto::end_views_size() const {
  return _internal_end_views_size();
}
inline void RenderProto::clear_end_views() {
  end_views_.Clear();
}
inline std::string* RenderProto::add_end_views() {
  std::string* _s = _internal_add_end_views();
  // @@protoc_insertion_point(field_add_mutable:RenderProto.end_views)
  return _s;
}
inline const std::string& RenderProto::_internal_end_views(int index) const {
  return end_views_.Get(index);
}
inline const std::string& RenderProto::end_views(int index) const {
  // @@protoc_insertion_point(field_get:RenderProto.end_views)
  return _internal_end_views(index);
}
inline std::string* RenderProto::mutable_end_views(int index) {
  // @@protoc_insertion_point(field_mutable:RenderProto.end_views)
  return end_views_.Mutable(index);
}
inline void RenderProto::set_end_views(int index, const std::string& value) {
  end_views_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:RenderProto.end_views)
}
inline void RenderProto::set_end_views(int index, std::string&& value) {
  end_views_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:RenderProto.end_views)
}
inline void RenderProto::set_end_views(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  end_views_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RenderProto.end_views)
}
inline void RenderProto::set_end_views(int index, const char* value, size_t size) {
  end_views_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RenderProto.end_views)
}
inline std::string* RenderProto::_internal_add_end_views() {
  return end_views_.Add();
}
inline void RenderProto::add_end_views(const std::string& value) {
  end_views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RenderProto.end_views)
}
inline void RenderProto::add_end_views(std::string&& value) {
  end_views_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RenderProto.end_views)
}
inline void RenderProto::add_end_views(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  end_views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RenderProto.end_views)
}
inline void RenderProto::add_end_views(const char* value, size_t size) {
  end_views_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RenderProto.end_views)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RenderProto::end_views() const {
  // @@protoc_insertion_point(field_list:RenderProto.end_views)
  return end_views_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RenderProto::mutable_end_views() {
  // @@protoc_insertion_point(field_mutable_list:RenderProto.end_views)
  return &end_views_;
}

// repeated string request_views = 4;
inline int RenderProto::_internal_request_views_size() const {
  return request_views_.size();
}
inline int RenderProto::request_views_size() const {
  return _internal_request_views_size();
}
inline void RenderProto::clear_request_views() {
  request_views_.Clear();
}
inline std::string* RenderProto::add_request_views() {
  std::string* _s = _internal_add_request_views();
  // @@protoc_insertion_point(field_add_mutable:RenderProto.request_views)
  return _s;
}
inline const std::string& RenderProto::_internal_request_views(int index) const {
  return request_views_.Get(index);
}
inline const std::string& RenderProto::request_views(int index) const {
  // @@protoc_insertion_point(field_get:RenderProto.request_views)
  return _internal_request_views(index);
}
inline std::string* RenderProto::mutable_request_views(int index) {
  // @@protoc_insertion_point(field_mutable:RenderProto.request_views)
  return request_views_.Mutable(index);
}
inline void RenderProto::set_request_views(int index, const std::string& value) {
  request_views_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:RenderProto.request_views)
}
inline void RenderProto::set_request_views(int index, std::string&& value) {
  request_views_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:RenderProto.request_views)
}
inline void RenderProto::set_request_views(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_views_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RenderProto.request_views)
}
inline void RenderProto::set_request_views(int index, const char* value, size_t size) {
  request_views_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RenderProto.request_views)
}
inline std::string* RenderProto::_internal_add_request_views() {
  return request_views_.Add();
}
inline void RenderProto::add_request_views(const std::string& value) {
  request_views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RenderProto.request_views)
}
inline void RenderProto::add_request_views(std::string&& value) {
  request_views_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RenderProto.request_views)
}
inline void RenderProto::add_request_views(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_views_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RenderProto.request_views)
}
inline void RenderProto::add_request_views(const char* value, size_t size) {
  request_views_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RenderProto.request_views)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RenderProto::request_views() const {
  // @@protoc_insertion_point(field_list:RenderProto.request_views)
  return request_views_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RenderProto::mutable_request_views() {
  // @@protoc_insertion_point(field_mutable_list:RenderProto.request_views)
  return &request_views_;
}

// repeated .VideoProto videos = 5;
inline int RenderProto::_internal_videos_size() const {
  return videos_.size();
}
inline int RenderProto::videos_size() const {
  return _internal_videos_size();
}
inline void RenderProto::clear_videos() {
  videos_.Clear();
}
inline ::VideoProto* RenderProto::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:RenderProto.videos)
  return videos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoProto >*
RenderProto::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:RenderProto.videos)
  return &videos_;
}
inline const ::VideoProto& RenderProto::_internal_videos(int index) const {
  return videos_.Get(index);
}
inline const ::VideoProto& RenderProto::videos(int index) const {
  // @@protoc_insertion_point(field_get:RenderProto.videos)
  return _internal_videos(index);
}
inline ::VideoProto* RenderProto::_internal_add_videos() {
  return videos_.Add();
}
inline ::VideoProto* RenderProto::add_videos() {
  ::VideoProto* _add = _internal_add_videos();
  // @@protoc_insertion_point(field_add:RenderProto.videos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoProto >&
RenderProto::videos() const {
  // @@protoc_insertion_point(field_list:RenderProto.videos)
  return videos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_render_2eproto
