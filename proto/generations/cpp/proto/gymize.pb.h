// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gymize.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gymize_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gymize_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "space.pb.h"
#include "locator.pb.h"
#include "recording.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gymize_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gymize_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gymize_2eproto;
class ActionProto;
struct ActionProtoDefaultTypeInternal;
extern ActionProtoDefaultTypeInternal _ActionProto_default_instance_;
class GymizeProto;
struct GymizeProtoDefaultTypeInternal;
extern GymizeProtoDefaultTypeInternal _GymizeProto_default_instance_;
class InfoProto;
struct InfoProtoDefaultTypeInternal;
extern InfoProtoDefaultTypeInternal _InfoProto_default_instance_;
class ObservationProto;
struct ObservationProtoDefaultTypeInternal;
extern ObservationProtoDefaultTypeInternal _ObservationProto_default_instance_;
class RewardProto;
struct RewardProtoDefaultTypeInternal;
extern RewardProtoDefaultTypeInternal _RewardProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ActionProto* Arena::CreateMaybeMessage<::ActionProto>(Arena*);
template<> ::GymizeProto* Arena::CreateMaybeMessage<::GymizeProto>(Arena*);
template<> ::InfoProto* Arena::CreateMaybeMessage<::InfoProto>(Arena*);
template<> ::ObservationProto* Arena::CreateMaybeMessage<::ObservationProto>(Arena*);
template<> ::RewardProto* Arena::CreateMaybeMessage<::RewardProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ActionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionProto) */ {
 public:
  inline ActionProto() : ActionProto(nullptr) {}
  ~ActionProto() override;
  explicit constexpr ActionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionProto(const ActionProto& from);
  ActionProto(ActionProto&& from) noexcept
    : ActionProto() {
    *this = ::std::move(from);
  }

  inline ActionProto& operator=(const ActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionProto& operator=(ActionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionProto* internal_default_instance() {
    return reinterpret_cast<const ActionProto*>(
               &_ActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActionProto& a, ActionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActionProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionProto";
  }
  protected:
  explicit ActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string agent = 1;
  void clear_agent();
  const std::string& agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent();
  PROTOBUF_NODISCARD std::string* release_agent();
  void set_allocated_agent(std::string* agent);
  private:
  const std::string& _internal_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent(const std::string& value);
  std::string* _internal_mutable_agent();
  public:

  // .InstanceProto action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::InstanceProto& action() const;
  PROTOBUF_NODISCARD ::InstanceProto* release_action();
  ::InstanceProto* mutable_action();
  void set_allocated_action(::InstanceProto* action);
  private:
  const ::InstanceProto& _internal_action() const;
  ::InstanceProto* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::InstanceProto* action);
  ::InstanceProto* unsafe_arena_release_action();

  // @@protoc_insertion_point(class_scope:ActionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_;
  ::InstanceProto* action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymize_2eproto;
};
// -------------------------------------------------------------------

class ObservationProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObservationProto) */ {
 public:
  inline ObservationProto() : ObservationProto(nullptr) {}
  ~ObservationProto() override;
  explicit constexpr ObservationProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObservationProto(const ObservationProto& from);
  ObservationProto(ObservationProto&& from) noexcept
    : ObservationProto() {
    *this = ::std::move(from);
  }

  inline ObservationProto& operator=(const ObservationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservationProto& operator=(ObservationProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObservationProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObservationProto* internal_default_instance() {
    return reinterpret_cast<const ObservationProto*>(
               &_ObservationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObservationProto& a, ObservationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservationProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservationProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObservationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObservationProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObservationProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObservationProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObservationProto";
  }
  protected:
  explicit ObservationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocatorFieldNumber = 1,
    kObservationFieldNumber = 2,
  };
  // .LocatorProto locator = 1;
  bool has_locator() const;
  private:
  bool _internal_has_locator() const;
  public:
  void clear_locator();
  const ::LocatorProto& locator() const;
  PROTOBUF_NODISCARD ::LocatorProto* release_locator();
  ::LocatorProto* mutable_locator();
  void set_allocated_locator(::LocatorProto* locator);
  private:
  const ::LocatorProto& _internal_locator() const;
  ::LocatorProto* _internal_mutable_locator();
  public:
  void unsafe_arena_set_allocated_locator(
      ::LocatorProto* locator);
  ::LocatorProto* unsafe_arena_release_locator();

  // .InstanceProto observation = 2;
  bool has_observation() const;
  private:
  bool _internal_has_observation() const;
  public:
  void clear_observation();
  const ::InstanceProto& observation() const;
  PROTOBUF_NODISCARD ::InstanceProto* release_observation();
  ::InstanceProto* mutable_observation();
  void set_allocated_observation(::InstanceProto* observation);
  private:
  const ::InstanceProto& _internal_observation() const;
  ::InstanceProto* _internal_mutable_observation();
  public:
  void unsafe_arena_set_allocated_observation(
      ::InstanceProto* observation);
  ::InstanceProto* unsafe_arena_release_observation();

  // @@protoc_insertion_point(class_scope:ObservationProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::LocatorProto* locator_;
  ::InstanceProto* observation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymize_2eproto;
};
// -------------------------------------------------------------------

class RewardProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RewardProto) */ {
 public:
  inline RewardProto() : RewardProto(nullptr) {}
  ~RewardProto() override;
  explicit constexpr RewardProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewardProto(const RewardProto& from);
  RewardProto(RewardProto&& from) noexcept
    : RewardProto() {
    *this = ::std::move(from);
  }

  inline RewardProto& operator=(const RewardProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardProto& operator=(RewardProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewardProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewardProto* internal_default_instance() {
    return reinterpret_cast<const RewardProto*>(
               &_RewardProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RewardProto& a, RewardProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RewardProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RewardProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RewardProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RewardProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RewardProto";
  }
  protected:
  explicit RewardProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
    kRewardFieldNumber = 2,
  };
  // string agent = 1;
  void clear_agent();
  const std::string& agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent();
  PROTOBUF_NODISCARD std::string* release_agent();
  void set_allocated_agent(std::string* agent);
  private:
  const std::string& _internal_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent(const std::string& value);
  std::string* _internal_mutable_agent();
  public:

  // double reward = 2;
  void clear_reward();
  double reward() const;
  void set_reward(double value);
  private:
  double _internal_reward() const;
  void _internal_set_reward(double value);
  public:

  // @@protoc_insertion_point(class_scope:RewardProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_;
  double reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymize_2eproto;
};
// -------------------------------------------------------------------

class InfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InfoProto) */ {
 public:
  inline InfoProto() : InfoProto(nullptr) {}
  ~InfoProto() override;
  explicit constexpr InfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoProto(const InfoProto& from);
  InfoProto(InfoProto&& from) noexcept
    : InfoProto() {
    *this = ::std::move(from);
  }

  inline InfoProto& operator=(const InfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoProto& operator=(InfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoProto* internal_default_instance() {
    return reinterpret_cast<const InfoProto*>(
               &_InfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InfoProto& a, InfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InfoProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InfoProto";
  }
  protected:
  explicit InfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kAgentFieldNumber = 1,
  };
  // repeated .InstanceProto infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::InstanceProto* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InstanceProto >*
      mutable_infos();
  private:
  const ::InstanceProto& _internal_infos(int index) const;
  ::InstanceProto* _internal_add_infos();
  public:
  const ::InstanceProto& infos(int index) const;
  ::InstanceProto* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InstanceProto >&
      infos() const;

  // string agent = 1;
  void clear_agent();
  const std::string& agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent();
  PROTOBUF_NODISCARD std::string* release_agent();
  void set_allocated_agent(std::string* agent);
  private:
  const std::string& _internal_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent(const std::string& value);
  std::string* _internal_mutable_agent();
  public:

  // @@protoc_insertion_point(class_scope:InfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InstanceProto > infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymize_2eproto;
};
// -------------------------------------------------------------------

class GymizeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GymizeProto) */ {
 public:
  inline GymizeProto() : GymizeProto(nullptr) {}
  ~GymizeProto() override;
  explicit constexpr GymizeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GymizeProto(const GymizeProto& from);
  GymizeProto(GymizeProto&& from) noexcept
    : GymizeProto() {
    *this = ::std::move(from);
  }

  inline GymizeProto& operator=(const GymizeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GymizeProto& operator=(GymizeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GymizeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const GymizeProto* internal_default_instance() {
    return reinterpret_cast<const GymizeProto*>(
               &_GymizeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GymizeProto& a, GymizeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GymizeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GymizeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GymizeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GymizeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GymizeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GymizeProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GymizeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GymizeProto";
  }
  protected:
  explicit GymizeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResetAgentsFieldNumber = 1,
    kRequestAgentsFieldNumber = 2,
    kResponseAgentsFieldNumber = 3,
    kActionsFieldNumber = 4,
    kObservationsFieldNumber = 5,
    kRewardsFieldNumber = 6,
    kTerminatedAgentsFieldNumber = 7,
    kTruncatedAgentsFieldNumber = 8,
    kInfosFieldNumber = 9,
    kRecordingFieldNumber = 10,
  };
  // repeated string reset_agents = 1;
  int reset_agents_size() const;
  private:
  int _internal_reset_agents_size() const;
  public:
  void clear_reset_agents();
  const std::string& reset_agents(int index) const;
  std::string* mutable_reset_agents(int index);
  void set_reset_agents(int index, const std::string& value);
  void set_reset_agents(int index, std::string&& value);
  void set_reset_agents(int index, const char* value);
  void set_reset_agents(int index, const char* value, size_t size);
  std::string* add_reset_agents();
  void add_reset_agents(const std::string& value);
  void add_reset_agents(std::string&& value);
  void add_reset_agents(const char* value);
  void add_reset_agents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reset_agents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reset_agents();
  private:
  const std::string& _internal_reset_agents(int index) const;
  std::string* _internal_add_reset_agents();
  public:

  // repeated string request_agents = 2;
  int request_agents_size() const;
  private:
  int _internal_request_agents_size() const;
  public:
  void clear_request_agents();
  const std::string& request_agents(int index) const;
  std::string* mutable_request_agents(int index);
  void set_request_agents(int index, const std::string& value);
  void set_request_agents(int index, std::string&& value);
  void set_request_agents(int index, const char* value);
  void set_request_agents(int index, const char* value, size_t size);
  std::string* add_request_agents();
  void add_request_agents(const std::string& value);
  void add_request_agents(std::string&& value);
  void add_request_agents(const char* value);
  void add_request_agents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& request_agents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_request_agents();
  private:
  const std::string& _internal_request_agents(int index) const;
  std::string* _internal_add_request_agents();
  public:

  // repeated string response_agents = 3;
  int response_agents_size() const;
  private:
  int _internal_response_agents_size() const;
  public:
  void clear_response_agents();
  const std::string& response_agents(int index) const;
  std::string* mutable_response_agents(int index);
  void set_response_agents(int index, const std::string& value);
  void set_response_agents(int index, std::string&& value);
  void set_response_agents(int index, const char* value);
  void set_response_agents(int index, const char* value, size_t size);
  std::string* add_response_agents();
  void add_response_agents(const std::string& value);
  void add_response_agents(std::string&& value);
  void add_response_agents(const char* value);
  void add_response_agents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& response_agents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_response_agents();
  private:
  const std::string& _internal_response_agents(int index) const;
  std::string* _internal_add_response_agents();
  public:

  // repeated .ActionProto actions = 4;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::ActionProto* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActionProto >*
      mutable_actions();
  private:
  const ::ActionProto& _internal_actions(int index) const;
  ::ActionProto* _internal_add_actions();
  public:
  const ::ActionProto& actions(int index) const;
  ::ActionProto* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActionProto >&
      actions() const;

  // repeated .ObservationProto observations = 5;
  int observations_size() const;
  private:
  int _internal_observations_size() const;
  public:
  void clear_observations();
  ::ObservationProto* mutable_observations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObservationProto >*
      mutable_observations();
  private:
  const ::ObservationProto& _internal_observations(int index) const;
  ::ObservationProto* _internal_add_observations();
  public:
  const ::ObservationProto& observations(int index) const;
  ::ObservationProto* add_observations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObservationProto >&
      observations() const;

  // repeated .RewardProto rewards = 6;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::RewardProto* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardProto >*
      mutable_rewards();
  private:
  const ::RewardProto& _internal_rewards(int index) const;
  ::RewardProto* _internal_add_rewards();
  public:
  const ::RewardProto& rewards(int index) const;
  ::RewardProto* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardProto >&
      rewards() const;

  // repeated string terminated_agents = 7;
  int terminated_agents_size() const;
  private:
  int _internal_terminated_agents_size() const;
  public:
  void clear_terminated_agents();
  const std::string& terminated_agents(int index) const;
  std::string* mutable_terminated_agents(int index);
  void set_terminated_agents(int index, const std::string& value);
  void set_terminated_agents(int index, std::string&& value);
  void set_terminated_agents(int index, const char* value);
  void set_terminated_agents(int index, const char* value, size_t size);
  std::string* add_terminated_agents();
  void add_terminated_agents(const std::string& value);
  void add_terminated_agents(std::string&& value);
  void add_terminated_agents(const char* value);
  void add_terminated_agents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& terminated_agents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_terminated_agents();
  private:
  const std::string& _internal_terminated_agents(int index) const;
  std::string* _internal_add_terminated_agents();
  public:

  // repeated string truncated_agents = 8;
  int truncated_agents_size() const;
  private:
  int _internal_truncated_agents_size() const;
  public:
  void clear_truncated_agents();
  const std::string& truncated_agents(int index) const;
  std::string* mutable_truncated_agents(int index);
  void set_truncated_agents(int index, const std::string& value);
  void set_truncated_agents(int index, std::string&& value);
  void set_truncated_agents(int index, const char* value);
  void set_truncated_agents(int index, const char* value, size_t size);
  std::string* add_truncated_agents();
  void add_truncated_agents(const std::string& value);
  void add_truncated_agents(std::string&& value);
  void add_truncated_agents(const char* value);
  void add_truncated_agents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& truncated_agents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_truncated_agents();
  private:
  const std::string& _internal_truncated_agents(int index) const;
  std::string* _internal_add_truncated_agents();
  public:

  // repeated .InfoProto infos = 9;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::InfoProto* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoProto >*
      mutable_infos();
  private:
  const ::InfoProto& _internal_infos(int index) const;
  ::InfoProto* _internal_add_infos();
  public:
  const ::InfoProto& infos(int index) const;
  ::InfoProto* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoProto >&
      infos() const;

  // .RecordingProto recording = 10;
  bool has_recording() const;
  private:
  bool _internal_has_recording() const;
  public:
  void clear_recording();
  const ::RecordingProto& recording() const;
  PROTOBUF_NODISCARD ::RecordingProto* release_recording();
  ::RecordingProto* mutable_recording();
  void set_allocated_recording(::RecordingProto* recording);
  private:
  const ::RecordingProto& _internal_recording() const;
  ::RecordingProto* _internal_mutable_recording();
  public:
  void unsafe_arena_set_allocated_recording(
      ::RecordingProto* recording);
  ::RecordingProto* unsafe_arena_release_recording();

  // @@protoc_insertion_point(class_scope:GymizeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reset_agents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> request_agents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> response_agents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActionProto > actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObservationProto > observations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardProto > rewards_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> terminated_agents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> truncated_agents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoProto > infos_;
  ::RecordingProto* recording_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gymize_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActionProto

// string agent = 1;
inline void ActionProto::clear_agent() {
  agent_.ClearToEmpty();
}
inline const std::string& ActionProto::agent() const {
  // @@protoc_insertion_point(field_get:ActionProto.agent)
  return _internal_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActionProto::set_agent(ArgT0&& arg0, ArgT... args) {
 
 agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ActionProto.agent)
}
inline std::string* ActionProto::mutable_agent() {
  std::string* _s = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:ActionProto.agent)
  return _s;
}
inline const std::string& ActionProto::_internal_agent() const {
  return agent_.Get();
}
inline void ActionProto::_internal_set_agent(const std::string& value) {
  
  agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActionProto::_internal_mutable_agent() {
  
  return agent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActionProto::release_agent() {
  // @@protoc_insertion_point(field_release:ActionProto.agent)
  return agent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActionProto::set_allocated_agent(std::string* agent) {
  if (agent != nullptr) {
    
  } else {
    
  }
  agent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (agent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ActionProto.agent)
}

// .InstanceProto action = 2;
inline bool ActionProto::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool ActionProto::has_action() const {
  return _internal_has_action();
}
inline const ::InstanceProto& ActionProto::_internal_action() const {
  const ::InstanceProto* p = action_;
  return p != nullptr ? *p : reinterpret_cast<const ::InstanceProto&>(
      ::_InstanceProto_default_instance_);
}
inline const ::InstanceProto& ActionProto::action() const {
  // @@protoc_insertion_point(field_get:ActionProto.action)
  return _internal_action();
}
inline void ActionProto::unsafe_arena_set_allocated_action(
    ::InstanceProto* action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ActionProto.action)
}
inline ::InstanceProto* ActionProto::release_action() {
  
  ::InstanceProto* temp = action_;
  action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InstanceProto* ActionProto::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:ActionProto.action)
  
  ::InstanceProto* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::InstanceProto* ActionProto::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::InstanceProto>(GetArenaForAllocation());
    action_ = p;
  }
  return action_;
}
inline ::InstanceProto* ActionProto::mutable_action() {
  ::InstanceProto* _msg = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:ActionProto.action)
  return _msg;
}
inline void ActionProto::set_allocated_action(::InstanceProto* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action));
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:ActionProto.action)
}

// -------------------------------------------------------------------

// ObservationProto

// .LocatorProto locator = 1;
inline bool ObservationProto::_internal_has_locator() const {
  return this != internal_default_instance() && locator_ != nullptr;
}
inline bool ObservationProto::has_locator() const {
  return _internal_has_locator();
}
inline const ::LocatorProto& ObservationProto::_internal_locator() const {
  const ::LocatorProto* p = locator_;
  return p != nullptr ? *p : reinterpret_cast<const ::LocatorProto&>(
      ::_LocatorProto_default_instance_);
}
inline const ::LocatorProto& ObservationProto::locator() const {
  // @@protoc_insertion_point(field_get:ObservationProto.locator)
  return _internal_locator();
}
inline void ObservationProto::unsafe_arena_set_allocated_locator(
    ::LocatorProto* locator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locator_);
  }
  locator_ = locator;
  if (locator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ObservationProto.locator)
}
inline ::LocatorProto* ObservationProto::release_locator() {
  
  ::LocatorProto* temp = locator_;
  locator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LocatorProto* ObservationProto::unsafe_arena_release_locator() {
  // @@protoc_insertion_point(field_release:ObservationProto.locator)
  
  ::LocatorProto* temp = locator_;
  locator_ = nullptr;
  return temp;
}
inline ::LocatorProto* ObservationProto::_internal_mutable_locator() {
  
  if (locator_ == nullptr) {
    auto* p = CreateMaybeMessage<::LocatorProto>(GetArenaForAllocation());
    locator_ = p;
  }
  return locator_;
}
inline ::LocatorProto* ObservationProto::mutable_locator() {
  ::LocatorProto* _msg = _internal_mutable_locator();
  // @@protoc_insertion_point(field_mutable:ObservationProto.locator)
  return _msg;
}
inline void ObservationProto::set_allocated_locator(::LocatorProto* locator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(locator_);
  }
  if (locator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locator));
    if (message_arena != submessage_arena) {
      locator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locator, submessage_arena);
    }
    
  } else {
    
  }
  locator_ = locator;
  // @@protoc_insertion_point(field_set_allocated:ObservationProto.locator)
}

// .InstanceProto observation = 2;
inline bool ObservationProto::_internal_has_observation() const {
  return this != internal_default_instance() && observation_ != nullptr;
}
inline bool ObservationProto::has_observation() const {
  return _internal_has_observation();
}
inline const ::InstanceProto& ObservationProto::_internal_observation() const {
  const ::InstanceProto* p = observation_;
  return p != nullptr ? *p : reinterpret_cast<const ::InstanceProto&>(
      ::_InstanceProto_default_instance_);
}
inline const ::InstanceProto& ObservationProto::observation() const {
  // @@protoc_insertion_point(field_get:ObservationProto.observation)
  return _internal_observation();
}
inline void ObservationProto::unsafe_arena_set_allocated_observation(
    ::InstanceProto* observation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_);
  }
  observation_ = observation;
  if (observation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ObservationProto.observation)
}
inline ::InstanceProto* ObservationProto::release_observation() {
  
  ::InstanceProto* temp = observation_;
  observation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InstanceProto* ObservationProto::unsafe_arena_release_observation() {
  // @@protoc_insertion_point(field_release:ObservationProto.observation)
  
  ::InstanceProto* temp = observation_;
  observation_ = nullptr;
  return temp;
}
inline ::InstanceProto* ObservationProto::_internal_mutable_observation() {
  
  if (observation_ == nullptr) {
    auto* p = CreateMaybeMessage<::InstanceProto>(GetArenaForAllocation());
    observation_ = p;
  }
  return observation_;
}
inline ::InstanceProto* ObservationProto::mutable_observation() {
  ::InstanceProto* _msg = _internal_mutable_observation();
  // @@protoc_insertion_point(field_mutable:ObservationProto.observation)
  return _msg;
}
inline void ObservationProto::set_allocated_observation(::InstanceProto* observation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_);
  }
  if (observation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation));
    if (message_arena != submessage_arena) {
      observation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation, submessage_arena);
    }
    
  } else {
    
  }
  observation_ = observation;
  // @@protoc_insertion_point(field_set_allocated:ObservationProto.observation)
}

// -------------------------------------------------------------------

// RewardProto

// string agent = 1;
inline void RewardProto::clear_agent() {
  agent_.ClearToEmpty();
}
inline const std::string& RewardProto::agent() const {
  // @@protoc_insertion_point(field_get:RewardProto.agent)
  return _internal_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewardProto::set_agent(ArgT0&& arg0, ArgT... args) {
 
 agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RewardProto.agent)
}
inline std::string* RewardProto::mutable_agent() {
  std::string* _s = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:RewardProto.agent)
  return _s;
}
inline const std::string& RewardProto::_internal_agent() const {
  return agent_.Get();
}
inline void RewardProto::_internal_set_agent(const std::string& value) {
  
  agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RewardProto::_internal_mutable_agent() {
  
  return agent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RewardProto::release_agent() {
  // @@protoc_insertion_point(field_release:RewardProto.agent)
  return agent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RewardProto::set_allocated_agent(std::string* agent) {
  if (agent != nullptr) {
    
  } else {
    
  }
  agent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (agent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RewardProto.agent)
}

// double reward = 2;
inline void RewardProto::clear_reward() {
  reward_ = 0;
}
inline double RewardProto::_internal_reward() const {
  return reward_;
}
inline double RewardProto::reward() const {
  // @@protoc_insertion_point(field_get:RewardProto.reward)
  return _internal_reward();
}
inline void RewardProto::_internal_set_reward(double value) {
  
  reward_ = value;
}
inline void RewardProto::set_reward(double value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:RewardProto.reward)
}

// -------------------------------------------------------------------

// InfoProto

// string agent = 1;
inline void InfoProto::clear_agent() {
  agent_.ClearToEmpty();
}
inline const std::string& InfoProto::agent() const {
  // @@protoc_insertion_point(field_get:InfoProto.agent)
  return _internal_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoProto::set_agent(ArgT0&& arg0, ArgT... args) {
 
 agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InfoProto.agent)
}
inline std::string* InfoProto::mutable_agent() {
  std::string* _s = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:InfoProto.agent)
  return _s;
}
inline const std::string& InfoProto::_internal_agent() const {
  return agent_.Get();
}
inline void InfoProto::_internal_set_agent(const std::string& value) {
  
  agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InfoProto::_internal_mutable_agent() {
  
  return agent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InfoProto::release_agent() {
  // @@protoc_insertion_point(field_release:InfoProto.agent)
  return agent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InfoProto::set_allocated_agent(std::string* agent) {
  if (agent != nullptr) {
    
  } else {
    
  }
  agent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (agent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InfoProto.agent)
}

// repeated .InstanceProto infos = 2;
inline int InfoProto::_internal_infos_size() const {
  return infos_.size();
}
inline int InfoProto::infos_size() const {
  return _internal_infos_size();
}
inline ::InstanceProto* InfoProto::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:InfoProto.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InstanceProto >*
InfoProto::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:InfoProto.infos)
  return &infos_;
}
inline const ::InstanceProto& InfoProto::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::InstanceProto& InfoProto::infos(int index) const {
  // @@protoc_insertion_point(field_get:InfoProto.infos)
  return _internal_infos(index);
}
inline ::InstanceProto* InfoProto::_internal_add_infos() {
  return infos_.Add();
}
inline ::InstanceProto* InfoProto::add_infos() {
  ::InstanceProto* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:InfoProto.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InstanceProto >&
InfoProto::infos() const {
  // @@protoc_insertion_point(field_list:InfoProto.infos)
  return infos_;
}

// -------------------------------------------------------------------

// GymizeProto

// repeated string reset_agents = 1;
inline int GymizeProto::_internal_reset_agents_size() const {
  return reset_agents_.size();
}
inline int GymizeProto::reset_agents_size() const {
  return _internal_reset_agents_size();
}
inline void GymizeProto::clear_reset_agents() {
  reset_agents_.Clear();
}
inline std::string* GymizeProto::add_reset_agents() {
  std::string* _s = _internal_add_reset_agents();
  // @@protoc_insertion_point(field_add_mutable:GymizeProto.reset_agents)
  return _s;
}
inline const std::string& GymizeProto::_internal_reset_agents(int index) const {
  return reset_agents_.Get(index);
}
inline const std::string& GymizeProto::reset_agents(int index) const {
  // @@protoc_insertion_point(field_get:GymizeProto.reset_agents)
  return _internal_reset_agents(index);
}
inline std::string* GymizeProto::mutable_reset_agents(int index) {
  // @@protoc_insertion_point(field_mutable:GymizeProto.reset_agents)
  return reset_agents_.Mutable(index);
}
inline void GymizeProto::set_reset_agents(int index, const std::string& value) {
  reset_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GymizeProto.reset_agents)
}
inline void GymizeProto::set_reset_agents(int index, std::string&& value) {
  reset_agents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GymizeProto.reset_agents)
}
inline void GymizeProto::set_reset_agents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reset_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GymizeProto.reset_agents)
}
inline void GymizeProto::set_reset_agents(int index, const char* value, size_t size) {
  reset_agents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GymizeProto.reset_agents)
}
inline std::string* GymizeProto::_internal_add_reset_agents() {
  return reset_agents_.Add();
}
inline void GymizeProto::add_reset_agents(const std::string& value) {
  reset_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GymizeProto.reset_agents)
}
inline void GymizeProto::add_reset_agents(std::string&& value) {
  reset_agents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GymizeProto.reset_agents)
}
inline void GymizeProto::add_reset_agents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reset_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GymizeProto.reset_agents)
}
inline void GymizeProto::add_reset_agents(const char* value, size_t size) {
  reset_agents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GymizeProto.reset_agents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GymizeProto::reset_agents() const {
  // @@protoc_insertion_point(field_list:GymizeProto.reset_agents)
  return reset_agents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GymizeProto::mutable_reset_agents() {
  // @@protoc_insertion_point(field_mutable_list:GymizeProto.reset_agents)
  return &reset_agents_;
}

// repeated string request_agents = 2;
inline int GymizeProto::_internal_request_agents_size() const {
  return request_agents_.size();
}
inline int GymizeProto::request_agents_size() const {
  return _internal_request_agents_size();
}
inline void GymizeProto::clear_request_agents() {
  request_agents_.Clear();
}
inline std::string* GymizeProto::add_request_agents() {
  std::string* _s = _internal_add_request_agents();
  // @@protoc_insertion_point(field_add_mutable:GymizeProto.request_agents)
  return _s;
}
inline const std::string& GymizeProto::_internal_request_agents(int index) const {
  return request_agents_.Get(index);
}
inline const std::string& GymizeProto::request_agents(int index) const {
  // @@protoc_insertion_point(field_get:GymizeProto.request_agents)
  return _internal_request_agents(index);
}
inline std::string* GymizeProto::mutable_request_agents(int index) {
  // @@protoc_insertion_point(field_mutable:GymizeProto.request_agents)
  return request_agents_.Mutable(index);
}
inline void GymizeProto::set_request_agents(int index, const std::string& value) {
  request_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GymizeProto.request_agents)
}
inline void GymizeProto::set_request_agents(int index, std::string&& value) {
  request_agents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GymizeProto.request_agents)
}
inline void GymizeProto::set_request_agents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GymizeProto.request_agents)
}
inline void GymizeProto::set_request_agents(int index, const char* value, size_t size) {
  request_agents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GymizeProto.request_agents)
}
inline std::string* GymizeProto::_internal_add_request_agents() {
  return request_agents_.Add();
}
inline void GymizeProto::add_request_agents(const std::string& value) {
  request_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GymizeProto.request_agents)
}
inline void GymizeProto::add_request_agents(std::string&& value) {
  request_agents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GymizeProto.request_agents)
}
inline void GymizeProto::add_request_agents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GymizeProto.request_agents)
}
inline void GymizeProto::add_request_agents(const char* value, size_t size) {
  request_agents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GymizeProto.request_agents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GymizeProto::request_agents() const {
  // @@protoc_insertion_point(field_list:GymizeProto.request_agents)
  return request_agents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GymizeProto::mutable_request_agents() {
  // @@protoc_insertion_point(field_mutable_list:GymizeProto.request_agents)
  return &request_agents_;
}

// repeated string response_agents = 3;
inline int GymizeProto::_internal_response_agents_size() const {
  return response_agents_.size();
}
inline int GymizeProto::response_agents_size() const {
  return _internal_response_agents_size();
}
inline void GymizeProto::clear_response_agents() {
  response_agents_.Clear();
}
inline std::string* GymizeProto::add_response_agents() {
  std::string* _s = _internal_add_response_agents();
  // @@protoc_insertion_point(field_add_mutable:GymizeProto.response_agents)
  return _s;
}
inline const std::string& GymizeProto::_internal_response_agents(int index) const {
  return response_agents_.Get(index);
}
inline const std::string& GymizeProto::response_agents(int index) const {
  // @@protoc_insertion_point(field_get:GymizeProto.response_agents)
  return _internal_response_agents(index);
}
inline std::string* GymizeProto::mutable_response_agents(int index) {
  // @@protoc_insertion_point(field_mutable:GymizeProto.response_agents)
  return response_agents_.Mutable(index);
}
inline void GymizeProto::set_response_agents(int index, const std::string& value) {
  response_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GymizeProto.response_agents)
}
inline void GymizeProto::set_response_agents(int index, std::string&& value) {
  response_agents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GymizeProto.response_agents)
}
inline void GymizeProto::set_response_agents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GymizeProto.response_agents)
}
inline void GymizeProto::set_response_agents(int index, const char* value, size_t size) {
  response_agents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GymizeProto.response_agents)
}
inline std::string* GymizeProto::_internal_add_response_agents() {
  return response_agents_.Add();
}
inline void GymizeProto::add_response_agents(const std::string& value) {
  response_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GymizeProto.response_agents)
}
inline void GymizeProto::add_response_agents(std::string&& value) {
  response_agents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GymizeProto.response_agents)
}
inline void GymizeProto::add_response_agents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GymizeProto.response_agents)
}
inline void GymizeProto::add_response_agents(const char* value, size_t size) {
  response_agents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GymizeProto.response_agents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GymizeProto::response_agents() const {
  // @@protoc_insertion_point(field_list:GymizeProto.response_agents)
  return response_agents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GymizeProto::mutable_response_agents() {
  // @@protoc_insertion_point(field_mutable_list:GymizeProto.response_agents)
  return &response_agents_;
}

// repeated .ActionProto actions = 4;
inline int GymizeProto::_internal_actions_size() const {
  return actions_.size();
}
inline int GymizeProto::actions_size() const {
  return _internal_actions_size();
}
inline void GymizeProto::clear_actions() {
  actions_.Clear();
}
inline ::ActionProto* GymizeProto::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:GymizeProto.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActionProto >*
GymizeProto::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:GymizeProto.actions)
  return &actions_;
}
inline const ::ActionProto& GymizeProto::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::ActionProto& GymizeProto::actions(int index) const {
  // @@protoc_insertion_point(field_get:GymizeProto.actions)
  return _internal_actions(index);
}
inline ::ActionProto* GymizeProto::_internal_add_actions() {
  return actions_.Add();
}
inline ::ActionProto* GymizeProto::add_actions() {
  ::ActionProto* _add = _internal_add_actions();
  // @@protoc_insertion_point(field_add:GymizeProto.actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ActionProto >&
GymizeProto::actions() const {
  // @@protoc_insertion_point(field_list:GymizeProto.actions)
  return actions_;
}

// repeated .ObservationProto observations = 5;
inline int GymizeProto::_internal_observations_size() const {
  return observations_.size();
}
inline int GymizeProto::observations_size() const {
  return _internal_observations_size();
}
inline void GymizeProto::clear_observations() {
  observations_.Clear();
}
inline ::ObservationProto* GymizeProto::mutable_observations(int index) {
  // @@protoc_insertion_point(field_mutable:GymizeProto.observations)
  return observations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObservationProto >*
GymizeProto::mutable_observations() {
  // @@protoc_insertion_point(field_mutable_list:GymizeProto.observations)
  return &observations_;
}
inline const ::ObservationProto& GymizeProto::_internal_observations(int index) const {
  return observations_.Get(index);
}
inline const ::ObservationProto& GymizeProto::observations(int index) const {
  // @@protoc_insertion_point(field_get:GymizeProto.observations)
  return _internal_observations(index);
}
inline ::ObservationProto* GymizeProto::_internal_add_observations() {
  return observations_.Add();
}
inline ::ObservationProto* GymizeProto::add_observations() {
  ::ObservationProto* _add = _internal_add_observations();
  // @@protoc_insertion_point(field_add:GymizeProto.observations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObservationProto >&
GymizeProto::observations() const {
  // @@protoc_insertion_point(field_list:GymizeProto.observations)
  return observations_;
}

// repeated .RewardProto rewards = 6;
inline int GymizeProto::_internal_rewards_size() const {
  return rewards_.size();
}
inline int GymizeProto::rewards_size() const {
  return _internal_rewards_size();
}
inline void GymizeProto::clear_rewards() {
  rewards_.Clear();
}
inline ::RewardProto* GymizeProto::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:GymizeProto.rewards)
  return rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardProto >*
GymizeProto::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:GymizeProto.rewards)
  return &rewards_;
}
inline const ::RewardProto& GymizeProto::_internal_rewards(int index) const {
  return rewards_.Get(index);
}
inline const ::RewardProto& GymizeProto::rewards(int index) const {
  // @@protoc_insertion_point(field_get:GymizeProto.rewards)
  return _internal_rewards(index);
}
inline ::RewardProto* GymizeProto::_internal_add_rewards() {
  return rewards_.Add();
}
inline ::RewardProto* GymizeProto::add_rewards() {
  ::RewardProto* _add = _internal_add_rewards();
  // @@protoc_insertion_point(field_add:GymizeProto.rewards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RewardProto >&
GymizeProto::rewards() const {
  // @@protoc_insertion_point(field_list:GymizeProto.rewards)
  return rewards_;
}

// repeated string terminated_agents = 7;
inline int GymizeProto::_internal_terminated_agents_size() const {
  return terminated_agents_.size();
}
inline int GymizeProto::terminated_agents_size() const {
  return _internal_terminated_agents_size();
}
inline void GymizeProto::clear_terminated_agents() {
  terminated_agents_.Clear();
}
inline std::string* GymizeProto::add_terminated_agents() {
  std::string* _s = _internal_add_terminated_agents();
  // @@protoc_insertion_point(field_add_mutable:GymizeProto.terminated_agents)
  return _s;
}
inline const std::string& GymizeProto::_internal_terminated_agents(int index) const {
  return terminated_agents_.Get(index);
}
inline const std::string& GymizeProto::terminated_agents(int index) const {
  // @@protoc_insertion_point(field_get:GymizeProto.terminated_agents)
  return _internal_terminated_agents(index);
}
inline std::string* GymizeProto::mutable_terminated_agents(int index) {
  // @@protoc_insertion_point(field_mutable:GymizeProto.terminated_agents)
  return terminated_agents_.Mutable(index);
}
inline void GymizeProto::set_terminated_agents(int index, const std::string& value) {
  terminated_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GymizeProto.terminated_agents)
}
inline void GymizeProto::set_terminated_agents(int index, std::string&& value) {
  terminated_agents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GymizeProto.terminated_agents)
}
inline void GymizeProto::set_terminated_agents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  terminated_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GymizeProto.terminated_agents)
}
inline void GymizeProto::set_terminated_agents(int index, const char* value, size_t size) {
  terminated_agents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GymizeProto.terminated_agents)
}
inline std::string* GymizeProto::_internal_add_terminated_agents() {
  return terminated_agents_.Add();
}
inline void GymizeProto::add_terminated_agents(const std::string& value) {
  terminated_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GymizeProto.terminated_agents)
}
inline void GymizeProto::add_terminated_agents(std::string&& value) {
  terminated_agents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GymizeProto.terminated_agents)
}
inline void GymizeProto::add_terminated_agents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  terminated_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GymizeProto.terminated_agents)
}
inline void GymizeProto::add_terminated_agents(const char* value, size_t size) {
  terminated_agents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GymizeProto.terminated_agents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GymizeProto::terminated_agents() const {
  // @@protoc_insertion_point(field_list:GymizeProto.terminated_agents)
  return terminated_agents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GymizeProto::mutable_terminated_agents() {
  // @@protoc_insertion_point(field_mutable_list:GymizeProto.terminated_agents)
  return &terminated_agents_;
}

// repeated string truncated_agents = 8;
inline int GymizeProto::_internal_truncated_agents_size() const {
  return truncated_agents_.size();
}
inline int GymizeProto::truncated_agents_size() const {
  return _internal_truncated_agents_size();
}
inline void GymizeProto::clear_truncated_agents() {
  truncated_agents_.Clear();
}
inline std::string* GymizeProto::add_truncated_agents() {
  std::string* _s = _internal_add_truncated_agents();
  // @@protoc_insertion_point(field_add_mutable:GymizeProto.truncated_agents)
  return _s;
}
inline const std::string& GymizeProto::_internal_truncated_agents(int index) const {
  return truncated_agents_.Get(index);
}
inline const std::string& GymizeProto::truncated_agents(int index) const {
  // @@protoc_insertion_point(field_get:GymizeProto.truncated_agents)
  return _internal_truncated_agents(index);
}
inline std::string* GymizeProto::mutable_truncated_agents(int index) {
  // @@protoc_insertion_point(field_mutable:GymizeProto.truncated_agents)
  return truncated_agents_.Mutable(index);
}
inline void GymizeProto::set_truncated_agents(int index, const std::string& value) {
  truncated_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GymizeProto.truncated_agents)
}
inline void GymizeProto::set_truncated_agents(int index, std::string&& value) {
  truncated_agents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GymizeProto.truncated_agents)
}
inline void GymizeProto::set_truncated_agents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  truncated_agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GymizeProto.truncated_agents)
}
inline void GymizeProto::set_truncated_agents(int index, const char* value, size_t size) {
  truncated_agents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GymizeProto.truncated_agents)
}
inline std::string* GymizeProto::_internal_add_truncated_agents() {
  return truncated_agents_.Add();
}
inline void GymizeProto::add_truncated_agents(const std::string& value) {
  truncated_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GymizeProto.truncated_agents)
}
inline void GymizeProto::add_truncated_agents(std::string&& value) {
  truncated_agents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GymizeProto.truncated_agents)
}
inline void GymizeProto::add_truncated_agents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  truncated_agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GymizeProto.truncated_agents)
}
inline void GymizeProto::add_truncated_agents(const char* value, size_t size) {
  truncated_agents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GymizeProto.truncated_agents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GymizeProto::truncated_agents() const {
  // @@protoc_insertion_point(field_list:GymizeProto.truncated_agents)
  return truncated_agents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GymizeProto::mutable_truncated_agents() {
  // @@protoc_insertion_point(field_mutable_list:GymizeProto.truncated_agents)
  return &truncated_agents_;
}

// repeated .InfoProto infos = 9;
inline int GymizeProto::_internal_infos_size() const {
  return infos_.size();
}
inline int GymizeProto::infos_size() const {
  return _internal_infos_size();
}
inline void GymizeProto::clear_infos() {
  infos_.Clear();
}
inline ::InfoProto* GymizeProto::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:GymizeProto.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoProto >*
GymizeProto::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:GymizeProto.infos)
  return &infos_;
}
inline const ::InfoProto& GymizeProto::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::InfoProto& GymizeProto::infos(int index) const {
  // @@protoc_insertion_point(field_get:GymizeProto.infos)
  return _internal_infos(index);
}
inline ::InfoProto* GymizeProto::_internal_add_infos() {
  return infos_.Add();
}
inline ::InfoProto* GymizeProto::add_infos() {
  ::InfoProto* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:GymizeProto.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InfoProto >&
GymizeProto::infos() const {
  // @@protoc_insertion_point(field_list:GymizeProto.infos)
  return infos_;
}

// .RecordingProto recording = 10;
inline bool GymizeProto::_internal_has_recording() const {
  return this != internal_default_instance() && recording_ != nullptr;
}
inline bool GymizeProto::has_recording() const {
  return _internal_has_recording();
}
inline const ::RecordingProto& GymizeProto::_internal_recording() const {
  const ::RecordingProto* p = recording_;
  return p != nullptr ? *p : reinterpret_cast<const ::RecordingProto&>(
      ::_RecordingProto_default_instance_);
}
inline const ::RecordingProto& GymizeProto::recording() const {
  // @@protoc_insertion_point(field_get:GymizeProto.recording)
  return _internal_recording();
}
inline void GymizeProto::unsafe_arena_set_allocated_recording(
    ::RecordingProto* recording) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recording_);
  }
  recording_ = recording;
  if (recording) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GymizeProto.recording)
}
inline ::RecordingProto* GymizeProto::release_recording() {
  
  ::RecordingProto* temp = recording_;
  recording_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RecordingProto* GymizeProto::unsafe_arena_release_recording() {
  // @@protoc_insertion_point(field_release:GymizeProto.recording)
  
  ::RecordingProto* temp = recording_;
  recording_ = nullptr;
  return temp;
}
inline ::RecordingProto* GymizeProto::_internal_mutable_recording() {
  
  if (recording_ == nullptr) {
    auto* p = CreateMaybeMessage<::RecordingProto>(GetArenaForAllocation());
    recording_ = p;
  }
  return recording_;
}
inline ::RecordingProto* GymizeProto::mutable_recording() {
  ::RecordingProto* _msg = _internal_mutable_recording();
  // @@protoc_insertion_point(field_mutable:GymizeProto.recording)
  return _msg;
}
inline void GymizeProto::set_allocated_recording(::RecordingProto* recording) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recording_);
  }
  if (recording) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recording));
    if (message_arena != submessage_arena) {
      recording = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recording, submessage_arena);
    }
    
  } else {
    
  }
  recording_ = recording;
  // @@protoc_insertion_point(field_set_allocated:GymizeProto.recording)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gymize_2eproto
