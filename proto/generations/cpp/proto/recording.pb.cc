// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recording.proto

#include "recording.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ImageFrameProto::ImageFrameProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(nullptr)
  , duration_(0){}
struct ImageFrameProtoDefaultTypeInternal {
  constexpr ImageFrameProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageFrameProtoDefaultTypeInternal() {}
  union {
    ImageFrameProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageFrameProtoDefaultTypeInternal _ImageFrameProto_default_instance_;
constexpr AudioFrameProto::AudioFrameProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , duration_(0){}
struct AudioFrameProtoDefaultTypeInternal {
  constexpr AudioFrameProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioFrameProtoDefaultTypeInternal() {}
  union {
    AudioFrameProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioFrameProtoDefaultTypeInternal _AudioFrameProto_default_instance_;
constexpr VideoProto::VideoProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : images_()
  , audios_(){}
struct VideoProtoDefaultTypeInternal {
  constexpr VideoProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoProtoDefaultTypeInternal() {}
  union {
    VideoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoProtoDefaultTypeInternal _VideoProto_default_instance_;
constexpr RecordingProto::RecordingProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : render_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , video_(nullptr){}
struct RecordingProtoDefaultTypeInternal {
  constexpr RecordingProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordingProtoDefaultTypeInternal() {}
  union {
    RecordingProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordingProtoDefaultTypeInternal _RecordingProto_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_recording_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_recording_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_recording_2eproto = nullptr;

const uint32_t TableStruct_recording_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageFrameProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ImageFrameProto, image_),
  PROTOBUF_FIELD_OFFSET(::ImageFrameProto, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AudioFrameProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AudioFrameProto, data_),
  PROTOBUF_FIELD_OFFSET(::AudioFrameProto, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VideoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VideoProto, images_),
  PROTOBUF_FIELD_OFFSET(::VideoProto, audios_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RecordingProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RecordingProto, render_mode_),
  PROTOBUF_FIELD_OFFSET(::RecordingProto, video_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ImageFrameProto)},
  { 8, -1, -1, sizeof(::AudioFrameProto)},
  { 16, -1, -1, sizeof(::VideoProto)},
  { 24, -1, -1, sizeof(::RecordingProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageFrameProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AudioFrameProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VideoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RecordingProto_default_instance_),
};

const char descriptor_table_protodef_recording_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017recording.proto\032\013space.proto\"B\n\017ImageF"
  "rameProto\022\035\n\005image\030\001 \001(\0132\016.InstanceProto"
  "\022\020\n\010duration\030\002 \001(\002\"A\n\017AudioFrameProto\022\034\n"
  "\004data\030\001 \001(\0132\016.InstanceProto\022\020\n\010duration\030"
  "\002 \001(\002\"P\n\nVideoProto\022 \n\006images\030\001 \003(\0132\020.Im"
  "ageFrameProto\022 \n\006audios\030\002 \003(\0132\020.AudioFra"
  "meProto\"A\n\016RecordingProto\022\023\n\013render_mode"
  "\030\001 \001(\t\022\032\n\005video\030\002 \001(\0132\013.VideoProtoB\022\252\002\017G"
  "ymize.Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_recording_2eproto_deps[1] = {
  &::descriptor_table_space_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_recording_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_recording_2eproto = {
  false, false, 342, descriptor_table_protodef_recording_2eproto, "recording.proto", 
  &descriptor_table_recording_2eproto_once, descriptor_table_recording_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_recording_2eproto::offsets,
  file_level_metadata_recording_2eproto, file_level_enum_descriptors_recording_2eproto, file_level_service_descriptors_recording_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_recording_2eproto_getter() {
  return &descriptor_table_recording_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_recording_2eproto(&descriptor_table_recording_2eproto);

// ===================================================================

class ImageFrameProto::_Internal {
 public:
  static const ::InstanceProto& image(const ImageFrameProto* msg);
};

const ::InstanceProto&
ImageFrameProto::_Internal::image(const ImageFrameProto* msg) {
  return *msg->image_;
}
void ImageFrameProto::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
ImageFrameProto::ImageFrameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ImageFrameProto)
}
ImageFrameProto::ImageFrameProto(const ImageFrameProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::InstanceProto(*from.image_);
  } else {
    image_ = nullptr;
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:ImageFrameProto)
}

inline void ImageFrameProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&image_)) + sizeof(duration_));
}

ImageFrameProto::~ImageFrameProto() {
  // @@protoc_insertion_point(destructor:ImageFrameProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageFrameProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void ImageFrameProto::ArenaDtor(void* object) {
  ImageFrameProto* _this = reinterpret_cast< ImageFrameProto* >(object);
  (void)_this;
}
void ImageFrameProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFrameProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageFrameProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageFrameProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  duration_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFrameProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .InstanceProto image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageFrameProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageFrameProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .InstanceProto image = 1;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // float duration = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageFrameProto)
  return target;
}

size_t ImageFrameProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageFrameProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InstanceProto image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // float duration = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageFrameProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageFrameProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageFrameProto::GetClassData() const { return &_class_data_; }

void ImageFrameProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageFrameProto *>(to)->MergeFrom(
      static_cast<const ImageFrameProto &>(from));
}


void ImageFrameProto::MergeFrom(const ImageFrameProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageFrameProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::InstanceProto::MergeFrom(from._internal_image());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = from._internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageFrameProto::CopyFrom(const ImageFrameProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageFrameProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFrameProto::IsInitialized() const {
  return true;
}

void ImageFrameProto::InternalSwap(ImageFrameProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageFrameProto, duration_)
      + sizeof(ImageFrameProto::duration_)
      - PROTOBUF_FIELD_OFFSET(ImageFrameProto, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFrameProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_recording_2eproto_getter, &descriptor_table_recording_2eproto_once,
      file_level_metadata_recording_2eproto[0]);
}

// ===================================================================

class AudioFrameProto::_Internal {
 public:
  static const ::InstanceProto& data(const AudioFrameProto* msg);
};

const ::InstanceProto&
AudioFrameProto::_Internal::data(const AudioFrameProto* msg) {
  return *msg->data_;
}
void AudioFrameProto::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
AudioFrameProto::AudioFrameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AudioFrameProto)
}
AudioFrameProto::AudioFrameProto(const AudioFrameProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::InstanceProto(*from.data_);
  } else {
    data_ = nullptr;
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:AudioFrameProto)
}

inline void AudioFrameProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&data_)) + sizeof(duration_));
}

AudioFrameProto::~AudioFrameProto() {
  // @@protoc_insertion_point(destructor:AudioFrameProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioFrameProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void AudioFrameProto::ArenaDtor(void* object) {
  AudioFrameProto* _this = reinterpret_cast< AudioFrameProto* >(object);
  (void)_this;
}
void AudioFrameProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioFrameProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioFrameProto::Clear() {
// @@protoc_insertion_point(message_clear_start:AudioFrameProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  duration_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioFrameProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .InstanceProto data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioFrameProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AudioFrameProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .InstanceProto data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // float duration = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AudioFrameProto)
  return target;
}

size_t AudioFrameProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AudioFrameProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InstanceProto data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // float duration = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioFrameProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioFrameProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioFrameProto::GetClassData() const { return &_class_data_; }

void AudioFrameProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioFrameProto *>(to)->MergeFrom(
      static_cast<const AudioFrameProto &>(from));
}


void AudioFrameProto::MergeFrom(const AudioFrameProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AudioFrameProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::InstanceProto::MergeFrom(from._internal_data());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = from._internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioFrameProto::CopyFrom(const AudioFrameProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AudioFrameProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFrameProto::IsInitialized() const {
  return true;
}

void AudioFrameProto::InternalSwap(AudioFrameProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioFrameProto, duration_)
      + sizeof(AudioFrameProto::duration_)
      - PROTOBUF_FIELD_OFFSET(AudioFrameProto, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioFrameProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_recording_2eproto_getter, &descriptor_table_recording_2eproto_once,
      file_level_metadata_recording_2eproto[1]);
}

// ===================================================================

class VideoProto::_Internal {
 public:
};

VideoProto::VideoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  images_(arena),
  audios_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:VideoProto)
}
VideoProto::VideoProto(const VideoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      images_(from.images_),
      audios_(from.audios_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VideoProto)
}

inline void VideoProto::SharedCtor() {
}

VideoProto::~VideoProto() {
  // @@protoc_insertion_point(destructor:VideoProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoProto::ArenaDtor(void* object) {
  VideoProto* _this = reinterpret_cast< VideoProto* >(object);
  (void)_this;
}
void VideoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  audios_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ImageFrameProto images = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AudioFrameProto audios = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_audios(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VideoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ImageFrameProto images = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_images(i), target, stream);
  }

  // repeated .AudioFrameProto audios = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_audios_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_audios(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VideoProto)
  return target;
}

size_t VideoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ImageFrameProto images = 1;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AudioFrameProto audios = 2;
  total_size += 1UL * this->_internal_audios_size();
  for (const auto& msg : this->audios_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoProto::GetClassData() const { return &_class_data_; }

void VideoProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoProto *>(to)->MergeFrom(
      static_cast<const VideoProto &>(from));
}


void VideoProto::MergeFrom(const VideoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  audios_.MergeFrom(from.audios_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoProto::CopyFrom(const VideoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoProto::IsInitialized() const {
  return true;
}

void VideoProto::InternalSwap(VideoProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  images_.InternalSwap(&other->images_);
  audios_.InternalSwap(&other->audios_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_recording_2eproto_getter, &descriptor_table_recording_2eproto_once,
      file_level_metadata_recording_2eproto[2]);
}

// ===================================================================

class RecordingProto::_Internal {
 public:
  static const ::VideoProto& video(const RecordingProto* msg);
};

const ::VideoProto&
RecordingProto::_Internal::video(const RecordingProto* msg) {
  return *msg->video_;
}
RecordingProto::RecordingProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RecordingProto)
}
RecordingProto::RecordingProto(const RecordingProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  render_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    render_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_render_mode().empty()) {
    render_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_render_mode(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_video()) {
    video_ = new ::VideoProto(*from.video_);
  } else {
    video_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RecordingProto)
}

inline void RecordingProto::SharedCtor() {
render_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  render_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
video_ = nullptr;
}

RecordingProto::~RecordingProto() {
  // @@protoc_insertion_point(destructor:RecordingProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecordingProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  render_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete video_;
}

void RecordingProto::ArenaDtor(void* object) {
  RecordingProto* _this = reinterpret_cast< RecordingProto* >(object);
  (void)_this;
}
void RecordingProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordingProto::Clear() {
// @@protoc_insertion_point(message_clear_start:RecordingProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  render_mode_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && video_ != nullptr) {
    delete video_;
  }
  video_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string render_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_render_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RecordingProto.render_mode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .VideoProto video = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RecordingProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string render_mode = 1;
  if (!this->_internal_render_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_render_mode().data(), static_cast<int>(this->_internal_render_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RecordingProto.render_mode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_render_mode(), target);
  }

  // .VideoProto video = 2;
  if (this->_internal_has_video()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::video(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RecordingProto)
  return target;
}

size_t RecordingProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RecordingProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string render_mode = 1;
  if (!this->_internal_render_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_render_mode());
  }

  // .VideoProto video = 2;
  if (this->_internal_has_video()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordingProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingProto::GetClassData() const { return &_class_data_; }

void RecordingProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordingProto *>(to)->MergeFrom(
      static_cast<const RecordingProto &>(from));
}


void RecordingProto::MergeFrom(const RecordingProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RecordingProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_render_mode().empty()) {
    _internal_set_render_mode(from._internal_render_mode());
  }
  if (from._internal_has_video()) {
    _internal_mutable_video()->::VideoProto::MergeFrom(from._internal_video());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingProto::CopyFrom(const RecordingProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RecordingProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingProto::IsInitialized() const {
  return true;
}

void RecordingProto::InternalSwap(RecordingProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &render_mode_, lhs_arena,
      &other->render_mode_, rhs_arena
  );
  swap(video_, other->video_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_recording_2eproto_getter, &descriptor_table_recording_2eproto_once,
      file_level_metadata_recording_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ImageFrameProto* Arena::CreateMaybeMessage< ::ImageFrameProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageFrameProto >(arena);
}
template<> PROTOBUF_NOINLINE ::AudioFrameProto* Arena::CreateMaybeMessage< ::AudioFrameProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AudioFrameProto >(arena);
}
template<> PROTOBUF_NOINLINE ::VideoProto* Arena::CreateMaybeMessage< ::VideoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VideoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::RecordingProto* Arena::CreateMaybeMessage< ::RecordingProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RecordingProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
