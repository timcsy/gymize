// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: space.proto

#include "space.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr TensorProto::TensorProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TensorProtoDefaultTypeInternal {
  constexpr TensorProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TensorProtoDefaultTypeInternal() {}
  union {
    TensorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
constexpr GraphProto::GraphProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_(nullptr)
  , edges_(nullptr)
  , edge_links_(nullptr){}
struct GraphProtoDefaultTypeInternal {
  constexpr GraphProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphProtoDefaultTypeInternal() {}
  union {
    GraphProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphProtoDefaultTypeInternal _GraphProto_default_instance_;
constexpr ImageProto::ImageProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , transpose_axes_()
  , _transpose_axes_cached_byte_size_(0)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , compression_type_(0)
{}
struct ImageProtoDefaultTypeInternal {
  constexpr ImageProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageProtoDefaultTypeInternal() {}
  union {
    ImageProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageProtoDefaultTypeInternal _ImageProto_default_instance_;
constexpr InstanceProto_DictEntry_DoNotUse::InstanceProto_DictEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct InstanceProto_DictEntry_DoNotUseDefaultTypeInternal {
  constexpr InstanceProto_DictEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstanceProto_DictEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InstanceProto_DictEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstanceProto_DictEntry_DoNotUseDefaultTypeInternal _InstanceProto_DictEntry_DoNotUse_default_instance_;
constexpr InstanceProto::InstanceProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dict_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , list_()
  , raw_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tensor_(nullptr)
  , graph_(nullptr)
  , image_(nullptr)
  , discrete_(int64_t{0})
  , type_(0)

  , boolean_(false)
  , float__(0){}
struct InstanceProtoDefaultTypeInternal {
  constexpr InstanceProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstanceProtoDefaultTypeInternal() {}
  union {
    InstanceProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstanceProtoDefaultTypeInternal _InstanceProto_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_space_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_space_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_space_2eproto = nullptr;

const uint32_t TableStruct_space_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TensorProto, data_),
  PROTOBUF_FIELD_OFFSET(::TensorProto, dtype_),
  PROTOBUF_FIELD_OFFSET(::TensorProto, shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GraphProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GraphProto, nodes_),
  PROTOBUF_FIELD_OFFSET(::GraphProto, edges_),
  PROTOBUF_FIELD_OFFSET(::GraphProto, edge_links_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImageProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ImageProto, compression_type_),
  PROTOBUF_FIELD_OFFSET(::ImageProto, data_),
  PROTOBUF_FIELD_OFFSET(::ImageProto, dtype_),
  PROTOBUF_FIELD_OFFSET(::ImageProto, shape_),
  PROTOBUF_FIELD_OFFSET(::ImageProto, transpose_axes_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto_DictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto_DictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InstanceProto_DictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto_DictEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InstanceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InstanceProto, type_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, raw_data_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, tensor_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, discrete_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, text_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, dict_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, list_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, graph_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, image_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, float__),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, boolean_),
  PROTOBUF_FIELD_OFFSET(::InstanceProto, json_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TensorProto)},
  { 9, -1, -1, sizeof(::GraphProto)},
  { 18, -1, -1, sizeof(::ImageProto)},
  { 29, 37, -1, sizeof(::InstanceProto_DictEntry_DoNotUse)},
  { 39, -1, -1, sizeof(::InstanceProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TensorProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GraphProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ImageProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InstanceProto_DictEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InstanceProto_default_instance_),
};

const char descriptor_table_protodef_space_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013space.proto\"9\n\013TensorProto\022\014\n\004data\030\001 \001"
  "(\014\022\r\n\005dtype\030\002 \001(\t\022\r\n\005shape\030\003 \003(\005\"h\n\nGrap"
  "hProto\022\033\n\005nodes\030\001 \001(\0132\014.TensorProto\022\033\n\005e"
  "dges\030\002 \001(\0132\014.TensorProto\022 \n\nedge_links\030\003"
  " \001(\0132\014.TensorProto\"\201\001\n\nImageProto\022/\n\020com"
  "pression_type\030\001 \001(\0162\025.CompressionTypePro"
  "to\022\014\n\004data\030\002 \001(\014\022\r\n\005dtype\030\003 \001(\t\022\r\n\005shape"
  "\030\004 \003(\005\022\026\n\016transpose_axes\030\005 \003(\005\"\352\002\n\rInsta"
  "nceProto\022 \n\004type\030\001 \001(\0162\022.InstanceTypePro"
  "to\022\020\n\010raw_data\030\002 \001(\014\022\034\n\006tensor\030\003 \001(\0132\014.T"
  "ensorProto\022\020\n\010discrete\030\004 \001(\003\022\014\n\004text\030\005 \001"
  "(\t\022&\n\004dict\030\006 \003(\0132\030.InstanceProto.DictEnt"
  "ry\022\034\n\004list\030\007 \003(\0132\016.InstanceProto\022\032\n\005grap"
  "h\030\010 \001(\0132\013.GraphProto\022\032\n\005image\030\t \001(\0132\013.Im"
  "ageProto\022\r\n\005float\030\n \001(\001\022\017\n\007boolean\030\013 \001(\010"
  "\022\014\n\004json\030\014 \001(\t\032;\n\tDictEntry\022\013\n\003key\030\001 \001(\t"
  "\022\035\n\005value\030\002 \001(\0132\016.InstanceProto:\0028\001*\237\001\n\024"
  "CompressionTypeProto\022&\n\"COMPRESSION_TYPE"
  "_PROTO_UNSPECIFIED\020\000\022\037\n\033COMPRESSION_TYPE"
  "_PROTO_NONE\020\001\022\036\n\032COMPRESSION_TYPE_PROTO_"
  "PNG\020\002\022\036\n\032COMPRESSION_TYPE_PROTO_JPG\020\003*\250\003"
  "\n\021InstanceTypeProto\022#\n\037INSTANCE_TYPE_PRO"
  "TO_UNSPECIFIED\020\000\022\033\n\027INSTANCE_TYPE_PROTO_"
  "RAW\020\001\022\036\n\032INSTANCE_TYPE_PROTO_TENSOR\020\002\022 \n"
  "\034INSTANCE_TYPE_PROTO_DISCRETE\020\003\022\034\n\030INSTA"
  "NCE_TYPE_PROTO_TEXT\020\004\022\034\n\030INSTANCE_TYPE_P"
  "ROTO_DICT\020\005\022\034\n\030INSTANCE_TYPE_PROTO_LIST\020"
  "\006\022\035\n\031INSTANCE_TYPE_PROTO_GRAPH\020\007\022\035\n\031INST"
  "ANCE_TYPE_PROTO_IMAGE\020\010\022\035\n\031INSTANCE_TYPE"
  "_PROTO_FLOAT\020\t\022\034\n\030INSTANCE_TYPE_PROTO_BO"
  "OL\020\n\022\034\n\030INSTANCE_TYPE_PROTO_NULL\020\013\022\034\n\030IN"
  "STANCE_TYPE_PROTO_JSON\020\014B\022\252\002\017Gymize.Prot"
  "obufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_space_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_space_2eproto = {
  false, false, 1292, descriptor_table_protodef_space_2eproto, "space.proto", 
  &descriptor_table_space_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_space_2eproto::offsets,
  file_level_metadata_space_2eproto, file_level_enum_descriptors_space_2eproto, file_level_service_descriptors_space_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_space_2eproto_getter() {
  return &descriptor_table_space_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_space_2eproto(&descriptor_table_space_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionTypeProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_space_2eproto);
  return file_level_enum_descriptors_space_2eproto[0];
}
bool CompressionTypeProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstanceTypeProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_space_2eproto);
  return file_level_enum_descriptors_space_2eproto[1];
}
bool InstanceTypeProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TensorProto::_Internal {
 public:
};

TensorProto::TensorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TensorProto)
}
TensorProto::TensorProto(const TensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dtype().empty()) {
    dtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dtype(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TensorProto)
}

inline void TensorProto::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:TensorProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TensorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TensorProto::ArenaDtor(void* object) {
  TensorProto* _this = reinterpret_cast< TensorProto* >(object);
  (void)_this;
}
void TensorProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:TensorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  data_.ClearToEmpty();
  dtype_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TensorProto.dtype"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TensorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string dtype = 2;
  if (!this->_internal_dtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TensorProto.dtype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dtype(), target);
  }

  // repeated int32 shape = 3;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_shape(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TensorProto)
  return target;
}

size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TensorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string dtype = 2;
  if (!this->_internal_dtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TensorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorProto::GetClassData() const { return &_class_data_; }

void TensorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TensorProto *>(to)->MergeFrom(
      static_cast<const TensorProto &>(from));
}


void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_dtype().empty()) {
    _internal_set_dtype(from._internal_dtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {
  return true;
}

void TensorProto::InternalSwap(TensorProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dtype_, lhs_arena,
      &other->dtype_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[0]);
}

// ===================================================================

class GraphProto::_Internal {
 public:
  static const ::TensorProto& nodes(const GraphProto* msg);
  static const ::TensorProto& edges(const GraphProto* msg);
  static const ::TensorProto& edge_links(const GraphProto* msg);
};

const ::TensorProto&
GraphProto::_Internal::nodes(const GraphProto* msg) {
  return *msg->nodes_;
}
const ::TensorProto&
GraphProto::_Internal::edges(const GraphProto* msg) {
  return *msg->edges_;
}
const ::TensorProto&
GraphProto::_Internal::edge_links(const GraphProto* msg) {
  return *msg->edge_links_;
}
GraphProto::GraphProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GraphProto)
}
GraphProto::GraphProto(const GraphProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodes()) {
    nodes_ = new ::TensorProto(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  if (from._internal_has_edges()) {
    edges_ = new ::TensorProto(*from.edges_);
  } else {
    edges_ = nullptr;
  }
  if (from._internal_has_edge_links()) {
    edge_links_ = new ::TensorProto(*from.edge_links_);
  } else {
    edge_links_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GraphProto)
}

inline void GraphProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edge_links_) -
    reinterpret_cast<char*>(&nodes_)) + sizeof(edge_links_));
}

GraphProto::~GraphProto() {
  // @@protoc_insertion_point(destructor:GraphProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodes_;
  if (this != internal_default_instance()) delete edges_;
  if (this != internal_default_instance()) delete edge_links_;
}

void GraphProto::ArenaDtor(void* object) {
  GraphProto* _this = reinterpret_cast< GraphProto* >(object);
  (void)_this;
}
void GraphProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphProto::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edges_ != nullptr) {
    delete edges_;
  }
  edges_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edge_links_ != nullptr) {
    delete edge_links_;
  }
  edge_links_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TensorProto nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TensorProto edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TensorProto edge_links = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_links(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TensorProto nodes = 1;
  if (this->_internal_has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodes(this), target, stream);
  }

  // .TensorProto edges = 2;
  if (this->_internal_has_edges()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::edges(this), target, stream);
  }

  // .TensorProto edge_links = 3;
  if (this->_internal_has_edge_links()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::edge_links(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphProto)
  return target;
}

size_t GraphProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TensorProto nodes = 1;
  if (this->_internal_has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // .TensorProto edges = 2;
  if (this->_internal_has_edges()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edges_);
  }

  // .TensorProto edge_links = 3;
  if (this->_internal_has_edge_links()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_links_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphProto::GetClassData() const { return &_class_data_; }

void GraphProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphProto *>(to)->MergeFrom(
      static_cast<const GraphProto &>(from));
}


void GraphProto::MergeFrom(const GraphProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodes()) {
    _internal_mutable_nodes()->::TensorProto::MergeFrom(from._internal_nodes());
  }
  if (from._internal_has_edges()) {
    _internal_mutable_edges()->::TensorProto::MergeFrom(from._internal_edges());
  }
  if (from._internal_has_edge_links()) {
    _internal_mutable_edge_links()->::TensorProto::MergeFrom(from._internal_edge_links());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphProto::CopyFrom(const GraphProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphProto::IsInitialized() const {
  return true;
}

void GraphProto::InternalSwap(GraphProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphProto, edge_links_)
      + sizeof(GraphProto::edge_links_)
      - PROTOBUF_FIELD_OFFSET(GraphProto, nodes_)>(
          reinterpret_cast<char*>(&nodes_),
          reinterpret_cast<char*>(&other->nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[1]);
}

// ===================================================================

class ImageProto::_Internal {
 public:
};

ImageProto::ImageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena),
  transpose_axes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ImageProto)
}
ImageProto::ImageProto(const ImageProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      transpose_axes_(from.transpose_axes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dtype().empty()) {
    dtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dtype(), 
      GetArenaForAllocation());
  }
  compression_type_ = from.compression_type_;
  // @@protoc_insertion_point(copy_constructor:ImageProto)
}

inline void ImageProto::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
compression_type_ = 0;
}

ImageProto::~ImageProto() {
  // @@protoc_insertion_point(destructor:ImageProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageProto::ArenaDtor(void* object) {
  ImageProto* _this = reinterpret_cast< ImageProto* >(object);
  (void)_this;
}
void ImageProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  transpose_axes_.Clear();
  data_.ClearToEmpty();
  dtype_.ClearToEmpty();
  compression_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CompressionTypeProto compression_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compression_type(static_cast<::CompressionTypeProto>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ImageProto.dtype"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 transpose_axes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_transpose_axes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_transpose_axes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CompressionTypeProto compression_type = 1;
  if (this->_internal_compression_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_compression_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string dtype = 3;
  if (!this->_internal_dtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ImageProto.dtype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dtype(), target);
  }

  // repeated int32 shape = 4;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_shape(), byte_size, target);
    }
  }

  // repeated int32 transpose_axes = 5;
  {
    int byte_size = _transpose_axes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_transpose_axes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageProto)
  return target;
}

size_t ImageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 transpose_axes = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->transpose_axes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _transpose_axes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string dtype = 3;
  if (!this->_internal_dtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtype());
  }

  // .CompressionTypeProto compression_type = 1;
  if (this->_internal_compression_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_compression_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageProto::GetClassData() const { return &_class_data_; }

void ImageProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageProto *>(to)->MergeFrom(
      static_cast<const ImageProto &>(from));
}


void ImageProto::MergeFrom(const ImageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  transpose_axes_.MergeFrom(from.transpose_axes_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_dtype().empty()) {
    _internal_set_dtype(from._internal_dtype());
  }
  if (from._internal_compression_type() != 0) {
    _internal_set_compression_type(from._internal_compression_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageProto::CopyFrom(const ImageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProto::IsInitialized() const {
  return true;
}

void ImageProto::InternalSwap(ImageProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  transpose_axes_.InternalSwap(&other->transpose_axes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dtype_, lhs_arena,
      &other->dtype_, rhs_arena
  );
  swap(compression_type_, other->compression_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[2]);
}

// ===================================================================

InstanceProto_DictEntry_DoNotUse::InstanceProto_DictEntry_DoNotUse() {}
InstanceProto_DictEntry_DoNotUse::InstanceProto_DictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InstanceProto_DictEntry_DoNotUse::MergeFrom(const InstanceProto_DictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InstanceProto_DictEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[3]);
}

// ===================================================================

class InstanceProto::_Internal {
 public:
  static const ::TensorProto& tensor(const InstanceProto* msg);
  static const ::GraphProto& graph(const InstanceProto* msg);
  static const ::ImageProto& image(const InstanceProto* msg);
};

const ::TensorProto&
InstanceProto::_Internal::tensor(const InstanceProto* msg) {
  return *msg->tensor_;
}
const ::GraphProto&
InstanceProto::_Internal::graph(const InstanceProto* msg) {
  return *msg->graph_;
}
const ::ImageProto&
InstanceProto::_Internal::image(const InstanceProto* msg) {
  return *msg->image_;
}
InstanceProto::InstanceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dict_(arena),
  list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:InstanceProto)
}
InstanceProto::InstanceProto(const InstanceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dict_.MergeFrom(from.dict_);
  raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_data().empty()) {
    raw_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_data(), 
      GetArenaForAllocation());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_json().empty()) {
    json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tensor()) {
    tensor_ = new ::TensorProto(*from.tensor_);
  } else {
    tensor_ = nullptr;
  }
  if (from._internal_has_graph()) {
    graph_ = new ::GraphProto(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::ImageProto(*from.image_);
  } else {
    image_ = nullptr;
  }
  ::memcpy(&discrete_, &from.discrete_,
    static_cast<size_t>(reinterpret_cast<char*>(&float__) -
    reinterpret_cast<char*>(&discrete_)) + sizeof(float__));
  // @@protoc_insertion_point(copy_constructor:InstanceProto)
}

inline void InstanceProto::SharedCtor() {
raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tensor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&float__) -
    reinterpret_cast<char*>(&tensor_)) + sizeof(float__));
}

InstanceProto::~InstanceProto() {
  // @@protoc_insertion_point(destructor:InstanceProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstanceProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_;
  if (this != internal_default_instance()) delete graph_;
  if (this != internal_default_instance()) delete image_;
}

void InstanceProto::ArenaDtor(void* object) {
  InstanceProto* _this = reinterpret_cast< InstanceProto* >(object);
  (void)_this;
  _this->dict_. ~MapField();
}
inline void InstanceProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &InstanceProto::ArenaDtor);
  }
}
void InstanceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstanceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:InstanceProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dict_.Clear();
  list_.Clear();
  raw_data_.ClearToEmpty();
  text_.ClearToEmpty();
  json_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  ::memset(&discrete_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float__) -
      reinterpret_cast<char*>(&discrete_)) + sizeof(float__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .InstanceTypeProto type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::InstanceTypeProto>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes raw_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_raw_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TensorProto tensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 discrete = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          discrete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstanceProto.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .InstanceProto> dict = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dict_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .InstanceProto list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .GraphProto graph = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ImageProto image = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double float = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          float__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool boolean = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          boolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string json = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstanceProto.json"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstanceProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstanceProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .InstanceTypeProto type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes raw_data = 2;
  if (!this->_internal_raw_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_raw_data(), target);
  }

  // .TensorProto tensor = 3;
  if (this->_internal_has_tensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tensor(this), target, stream);
  }

  // int64 discrete = 4;
  if (this->_internal_discrete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_discrete(), target);
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstanceProto.text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_text(), target);
  }

  // map<string, .InstanceProto> dict = 6;
  if (!this->_internal_dict().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::InstanceProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "InstanceProto.DictEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dict().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::InstanceProto >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::InstanceProto >::const_iterator
          it = this->_internal_dict().begin();
          it != this->_internal_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InstanceProto_DictEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::InstanceProto >::const_iterator
          it = this->_internal_dict().begin();
          it != this->_internal_dict().end(); ++it) {
        target = InstanceProto_DictEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .InstanceProto list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_list(i), target, stream);
  }

  // .GraphProto graph = 8;
  if (this->_internal_has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::graph(this), target, stream);
  }

  // .ImageProto image = 9;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::image(this), target, stream);
  }

  // double float = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_float_ = this->_internal_float_();
  uint64_t raw_float_;
  memcpy(&raw_float_, &tmp_float_, sizeof(tmp_float_));
  if (raw_float_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_float_(), target);
  }

  // bool boolean = 11;
  if (this->_internal_boolean() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_boolean(), target);
  }

  // string json = 12;
  if (!this->_internal_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstanceProto.json");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstanceProto)
  return target;
}

size_t InstanceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InstanceProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .InstanceProto> dict = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dict_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::InstanceProto >::const_iterator
      it = this->_internal_dict().begin();
      it != this->_internal_dict().end(); ++it) {
    total_size += InstanceProto_DictEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .InstanceProto list = 7;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes raw_data = 2;
  if (!this->_internal_raw_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_data());
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string json = 12;
  if (!this->_internal_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json());
  }

  // .TensorProto tensor = 3;
  if (this->_internal_has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_);
  }

  // .GraphProto graph = 8;
  if (this->_internal_has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // .ImageProto image = 9;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // int64 discrete = 4;
  if (this->_internal_discrete() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_discrete());
  }

  // .InstanceTypeProto type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool boolean = 11;
  if (this->_internal_boolean() != 0) {
    total_size += 1 + 1;
  }

  // double float = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_float_ = this->_internal_float_();
  uint64_t raw_float_;
  memcpy(&raw_float_, &tmp_float_, sizeof(tmp_float_));
  if (raw_float_ != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstanceProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstanceProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstanceProto::GetClassData() const { return &_class_data_; }

void InstanceProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InstanceProto *>(to)->MergeFrom(
      static_cast<const InstanceProto &>(from));
}


void InstanceProto::MergeFrom(const InstanceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InstanceProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dict_.MergeFrom(from.dict_);
  list_.MergeFrom(from.list_);
  if (!from._internal_raw_data().empty()) {
    _internal_set_raw_data(from._internal_raw_data());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_json().empty()) {
    _internal_set_json(from._internal_json());
  }
  if (from._internal_has_tensor()) {
    _internal_mutable_tensor()->::TensorProto::MergeFrom(from._internal_tensor());
  }
  if (from._internal_has_graph()) {
    _internal_mutable_graph()->::GraphProto::MergeFrom(from._internal_graph());
  }
  if (from._internal_has_image()) {
    _internal_mutable_image()->::ImageProto::MergeFrom(from._internal_image());
  }
  if (from._internal_discrete() != 0) {
    _internal_set_discrete(from._internal_discrete());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_boolean() != 0) {
    _internal_set_boolean(from._internal_boolean());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_float_ = from._internal_float_();
  uint64_t raw_float_;
  memcpy(&raw_float_, &tmp_float_, sizeof(tmp_float_));
  if (raw_float_ != 0) {
    _internal_set_float_(from._internal_float_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstanceProto::CopyFrom(const InstanceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InstanceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceProto::IsInitialized() const {
  return true;
}

void InstanceProto::InternalSwap(InstanceProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dict_.InternalSwap(&other->dict_);
  list_.InternalSwap(&other->list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_data_, lhs_arena,
      &other->raw_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_, lhs_arena,
      &other->json_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstanceProto, float__)
      + sizeof(InstanceProto::float__)
      - PROTOBUF_FIELD_OFFSET(InstanceProto, tensor_)>(
          reinterpret_cast<char*>(&tensor_),
          reinterpret_cast<char*>(&other->tensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TensorProto* Arena::CreateMaybeMessage< ::TensorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::GraphProto* Arena::CreateMaybeMessage< ::GraphProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GraphProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageProto* Arena::CreateMaybeMessage< ::ImageProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageProto >(arena);
}
template<> PROTOBUF_NOINLINE ::InstanceProto_DictEntry_DoNotUse* Arena::CreateMaybeMessage< ::InstanceProto_DictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InstanceProto_DictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::InstanceProto* Arena::CreateMaybeMessage< ::InstanceProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InstanceProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
