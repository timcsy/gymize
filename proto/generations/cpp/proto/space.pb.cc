// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: space.proto

#include "space.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr FloatTensor::FloatTensor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , array_(){}
struct FloatTensorDefaultTypeInternal {
  constexpr FloatTensorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatTensorDefaultTypeInternal() {}
  union {
    FloatTensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatTensorDefaultTypeInternal _FloatTensor_default_instance_;
constexpr IntTensor::IntTensor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , array_()
  , _array_cached_byte_size_(0){}
struct IntTensorDefaultTypeInternal {
  constexpr IntTensorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntTensorDefaultTypeInternal() {}
  union {
    IntTensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntTensorDefaultTypeInternal _IntTensor_default_instance_;
constexpr BoolTensor::BoolTensor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , array_(){}
struct BoolTensorDefaultTypeInternal {
  constexpr BoolTensorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoolTensorDefaultTypeInternal() {}
  union {
    BoolTensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoolTensorDefaultTypeInternal _BoolTensor_default_instance_;
constexpr GraphSpace::GraphSpace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_space_(nullptr)
  , edge_space_(nullptr){}
struct GraphSpaceDefaultTypeInternal {
  constexpr GraphSpaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphSpaceDefaultTypeInternal() {}
  union {
    GraphSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphSpaceDefaultTypeInternal _GraphSpace_default_instance_;
constexpr Graph::Graph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_(nullptr)
  , edges_(nullptr)
  , edge_links_(nullptr){}
struct GraphDefaultTypeInternal {
  constexpr GraphDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphDefaultTypeInternal() {}
  union {
    Graph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphDefaultTypeInternal _Graph_default_instance_;
constexpr Image::Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , dimension_mapping_()
  , _dimension_mapping_cached_byte_size_(0)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , compression_type_(0)
{}
struct ImageDefaultTypeInternal {
  constexpr ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDefaultTypeInternal _Image_default_instance_;
constexpr Space_DictSpaceEntry_DoNotUse::Space_DictSpaceEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Space_DictSpaceEntry_DoNotUseDefaultTypeInternal {
  constexpr Space_DictSpaceEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Space_DictSpaceEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Space_DictSpaceEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Space_DictSpaceEntry_DoNotUseDefaultTypeInternal _Space_DictSpaceEntry_DoNotUse_default_instance_;
constexpr Space_ListSpaceEntry_DoNotUse::Space_ListSpaceEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Space_ListSpaceEntry_DoNotUseDefaultTypeInternal {
  constexpr Space_ListSpaceEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Space_ListSpaceEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Space_ListSpaceEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Space_ListSpaceEntry_DoNotUseDefaultTypeInternal _Space_ListSpaceEntry_DoNotUse_default_instance_;
constexpr Space::Space(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , low_()
  , high_()
  , nvec_()
  , _nvec_cached_byte_size_(0)
  , charset_()
  , dict_space_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , list_space_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , graph_space_(nullptr)
  , space_type_(0)

  , data_type_(0)

  , min_(0)
  , max_(0){}
struct SpaceDefaultTypeInternal {
  constexpr SpaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpaceDefaultTypeInternal() {}
  union {
    Space _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpaceDefaultTypeInternal _Space_default_instance_;
constexpr Data_DictEntry_DoNotUse::Data_DictEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Data_DictEntry_DoNotUseDefaultTypeInternal {
  constexpr Data_DictEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Data_DictEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Data_DictEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Data_DictEntry_DoNotUseDefaultTypeInternal _Data_DictEntry_DoNotUse_default_instance_;
constexpr Data_ListEntry_DoNotUse::Data_ListEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Data_ListEntry_DoNotUseDefaultTypeInternal {
  constexpr Data_ListEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Data_ListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Data_ListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Data_ListEntry_DoNotUseDefaultTypeInternal _Data_ListEntry_DoNotUse_default_instance_;
constexpr Data::Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dict_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , list_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , box_(nullptr)
  , multi_binary_(nullptr)
  , multi_discrete_(nullptr)
  , graph_(nullptr)
  , image_(nullptr)
  , space_type_(0)

  , discrete_(0){}
struct DataDefaultTypeInternal {
  constexpr DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataDefaultTypeInternal _Data_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_space_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_space_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_space_2eproto = nullptr;

const uint32_t TableStruct_space_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FloatTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FloatTensor, shape_),
  PROTOBUF_FIELD_OFFSET(::FloatTensor, array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntTensor, shape_),
  PROTOBUF_FIELD_OFFSET(::IntTensor, array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BoolTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BoolTensor, shape_),
  PROTOBUF_FIELD_OFFSET(::BoolTensor, array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GraphSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GraphSpace, node_space_),
  PROTOBUF_FIELD_OFFSET(::GraphSpace, edge_space_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Graph, nodes_),
  PROTOBUF_FIELD_OFFSET(::Graph, edges_),
  PROTOBUF_FIELD_OFFSET(::Graph, edge_links_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Image, compression_type_),
  PROTOBUF_FIELD_OFFSET(::Image, data_),
  PROTOBUF_FIELD_OFFSET(::Image, shape_),
  PROTOBUF_FIELD_OFFSET(::Image, dimension_mapping_),
  PROTOBUF_FIELD_OFFSET(::Space_DictSpaceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Space_DictSpaceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Space_DictSpaceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Space_DictSpaceEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Space_ListSpaceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Space_ListSpaceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Space_ListSpaceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Space_ListSpaceEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Space, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Space, space_type_),
  PROTOBUF_FIELD_OFFSET(::Space, shape_),
  PROTOBUF_FIELD_OFFSET(::Space, data_type_),
  PROTOBUF_FIELD_OFFSET(::Space, low_),
  PROTOBUF_FIELD_OFFSET(::Space, high_),
  PROTOBUF_FIELD_OFFSET(::Space, min_),
  PROTOBUF_FIELD_OFFSET(::Space, max_),
  PROTOBUF_FIELD_OFFSET(::Space, nvec_),
  PROTOBUF_FIELD_OFFSET(::Space, charset_),
  PROTOBUF_FIELD_OFFSET(::Space, dict_space_),
  PROTOBUF_FIELD_OFFSET(::Space, list_space_),
  PROTOBUF_FIELD_OFFSET(::Space, graph_space_),
  PROTOBUF_FIELD_OFFSET(::Data_DictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Data_DictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Data_DictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Data_DictEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Data_ListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Data_ListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Data_ListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Data_ListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Data, space_type_),
  PROTOBUF_FIELD_OFFSET(::Data, box_),
  PROTOBUF_FIELD_OFFSET(::Data, discrete_),
  PROTOBUF_FIELD_OFFSET(::Data, multi_binary_),
  PROTOBUF_FIELD_OFFSET(::Data, multi_discrete_),
  PROTOBUF_FIELD_OFFSET(::Data, text_),
  PROTOBUF_FIELD_OFFSET(::Data, dict_),
  PROTOBUF_FIELD_OFFSET(::Data, list_),
  PROTOBUF_FIELD_OFFSET(::Data, graph_),
  PROTOBUF_FIELD_OFFSET(::Data, image_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FloatTensor)},
  { 8, -1, -1, sizeof(::IntTensor)},
  { 16, -1, -1, sizeof(::BoolTensor)},
  { 24, -1, -1, sizeof(::GraphSpace)},
  { 32, -1, -1, sizeof(::Graph)},
  { 41, -1, -1, sizeof(::Image)},
  { 51, 59, -1, sizeof(::Space_DictSpaceEntry_DoNotUse)},
  { 61, 69, -1, sizeof(::Space_ListSpaceEntry_DoNotUse)},
  { 71, -1, -1, sizeof(::Space)},
  { 89, 97, -1, sizeof(::Data_DictEntry_DoNotUse)},
  { 99, 107, -1, sizeof(::Data_ListEntry_DoNotUse)},
  { 109, -1, -1, sizeof(::Data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FloatTensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IntTensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BoolTensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GraphSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Graph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Space_DictSpaceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Space_ListSpaceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Space_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Data_DictEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Data_ListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Data_default_instance_),
};

const char descriptor_table_protodef_space_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013space.proto\"+\n\013FloatTensor\022\r\n\005shape\030\001 "
  "\003(\005\022\r\n\005array\030\002 \003(\002\")\n\tIntTensor\022\r\n\005shape"
  "\030\001 \003(\005\022\r\n\005array\030\002 \003(\005\"*\n\nBoolTensor\022\r\n\005s"
  "hape\030\001 \003(\005\022\r\n\005array\030\002 \003(\010\"D\n\nGraphSpace\022"
  "\032\n\nnode_space\030\001 \001(\0132\006.Space\022\032\n\nedge_spac"
  "e\030\002 \001(\0132\006.Space\"a\n\005Graph\022\033\n\005nodes\030\001 \001(\0132"
  "\014.FloatTensor\022\033\n\005edges\030\002 \001(\0132\014.FloatTens"
  "or\022\036\n\nedge_links\030\003 \001(\0132\n.IntTensor\"k\n\005Im"
  "age\022*\n\020compression_type\030\001 \001(\0162\020.Compress"
  "ionType\022\014\n\004data\030\002 \001(\014\022\r\n\005shape\030\003 \003(\005\022\031\n\021"
  "dimension_mapping\030\004 \003(\005\"\224\003\n\005Space\022\036\n\nspa"
  "ce_type\030\001 \001(\0162\n.SpaceType\022\r\n\005shape\030\002 \003(\005"
  "\022\034\n\tdata_type\030\003 \001(\0162\t.DataType\022\013\n\003low\030\004 "
  "\003(\002\022\014\n\004high\030\005 \003(\002\022\013\n\003min\030\006 \001(\005\022\013\n\003max\030\007 "
  "\001(\005\022\014\n\004nvec\030\010 \003(\005\022\017\n\007charset\030\t \003(\t\022)\n\ndi"
  "ct_space\030\n \003(\0132\025.Space.DictSpaceEntry\022)\n"
  "\nlist_space\030\013 \003(\0132\025.Space.ListSpaceEntry"
  "\022 \n\013graph_space\030\014 \001(\0132\013.GraphSpace\0328\n\016Di"
  "ctSpaceEntry\022\013\n\003key\030\001 \001(\t\022\025\n\005value\030\002 \001(\013"
  "2\006.Space:\0028\001\0328\n\016ListSpaceEntry\022\013\n\003key\030\001 "
  "\001(\005\022\025\n\005value\030\002 \001(\0132\006.Space:\0028\001\"\374\002\n\004Data\022"
  "\036\n\nspace_type\030\001 \001(\0162\n.SpaceType\022\031\n\003box\030\002"
  " \001(\0132\014.FloatTensor\022\020\n\010discrete\030\003 \001(\005\022!\n\014"
  "multi_binary\030\004 \001(\0132\013.BoolTensor\022\"\n\016multi"
  "_discrete\030\005 \001(\0132\n.IntTensor\022\014\n\004text\030\006 \001("
  "\t\022\035\n\004dict\030\007 \003(\0132\017.Data.DictEntry\022\035\n\004list"
  "\030\010 \003(\0132\017.Data.ListEntry\022\025\n\005graph\030\t \001(\0132\006"
  ".Graph\022\025\n\005image\030\n \001(\0132\006.Image\0322\n\tDictEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\024\n\005value\030\002 \001(\0132\005.Data:\0028"
  "\001\0322\n\tListEntry\022\013\n\003key\030\001 \001(\005\022\024\n\005value\030\002 \001"
  "(\0132\005.Data:\0028\001*\202\001\n\017CompressionType\022 \n\034COM"
  "PRESSION_TYPE_UNSPECIFIED\020\000\022\031\n\025COMPRESSI"
  "ON_TYPE_NONE\020\001\022\030\n\024COMPRESSION_TYPE_PNG\020\002"
  "\022\030\n\024COMPRESSION_TYPE_JPG\020\003*\377\001\n\tSpaceType"
  "\022\032\n\026SPACE_TYPE_UNSPECIFIED\020\000\022\022\n\016SPACE_TY"
  "PE_BOX\020\001\022\027\n\023SPACE_TYPE_DISCRETE\020\002\022\033\n\027SPA"
  "CE_TYPE_MULTI_BINARY\020\003\022\035\n\031SPACE_TYPE_MUL"
  "TI_DISCRETE\020\004\022\023\n\017SPACE_TYPE_TEXT\020\005\022\023\n\017SP"
  "ACE_TYPE_DICT\020\006\022\024\n\020SPACE_TYPE_TUPLE\020\007\022\027\n"
  "\023SPACE_TYPE_SEQUENCE\020\010\022\024\n\020SPACE_TYPE_GRA"
  "PH\020\t*d\n\010DataType\022\031\n\025DATA_TYPE_UNSPECIFIE"
  "D\020\000\022\023\n\017DATA_TYPE_FLOAT\020\001\022\021\n\rDATA_TYPE_IN"
  "T\020\002\022\025\n\021DATA_TYPE_BOOLEAN\020\003B\027\252\002\024PAIA.Mare"
  "nv.Protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_space_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_space_2eproto = {
  false, false, 1739, descriptor_table_protodef_space_2eproto, "space.proto", 
  &descriptor_table_space_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_space_2eproto::offsets,
  file_level_metadata_space_2eproto, file_level_enum_descriptors_space_2eproto, file_level_service_descriptors_space_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_space_2eproto_getter() {
  return &descriptor_table_space_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_space_2eproto(&descriptor_table_space_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_space_2eproto);
  return file_level_enum_descriptors_space_2eproto[0];
}
bool CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_space_2eproto);
  return file_level_enum_descriptors_space_2eproto[1];
}
bool SpaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_space_2eproto);
  return file_level_enum_descriptors_space_2eproto[2];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FloatTensor::_Internal {
 public:
};

FloatTensor::FloatTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena),
  array_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FloatTensor)
}
FloatTensor::FloatTensor(const FloatTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FloatTensor)
}

inline void FloatTensor::SharedCtor() {
}

FloatTensor::~FloatTensor() {
  // @@protoc_insertion_point(destructor:FloatTensor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FloatTensor::ArenaDtor(void* object) {
  FloatTensor* _this = reinterpret_cast< FloatTensor* >(object);
  (void)_this;
}
void FloatTensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatTensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:FloatTensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  array_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatTensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_array(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatTensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FloatTensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_shape(), byte_size, target);
    }
  }

  // repeated float array = 2;
  if (this->_internal_array_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_array(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FloatTensor)
  return target;
}

size_t FloatTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FloatTensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float array = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_array_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatTensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatTensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatTensor::GetClassData() const { return &_class_data_; }

void FloatTensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FloatTensor *>(to)->MergeFrom(
      static_cast<const FloatTensor &>(from));
}


void FloatTensor::MergeFrom(const FloatTensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FloatTensor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  array_.MergeFrom(from.array_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatTensor::CopyFrom(const FloatTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FloatTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatTensor::IsInitialized() const {
  return true;
}

void FloatTensor::InternalSwap(FloatTensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  array_.InternalSwap(&other->array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatTensor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[0]);
}

// ===================================================================

class IntTensor::_Internal {
 public:
};

IntTensor::IntTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena),
  array_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntTensor)
}
IntTensor::IntTensor(const IntTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IntTensor)
}

inline void IntTensor::SharedCtor() {
}

IntTensor::~IntTensor() {
  // @@protoc_insertion_point(destructor:IntTensor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IntTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntTensor::ArenaDtor(void* object) {
  IntTensor* _this = reinterpret_cast< IntTensor* >(object);
  (void)_this;
}
void IntTensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntTensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:IntTensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  array_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntTensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_array(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntTensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntTensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_shape(), byte_size, target);
    }
  }

  // repeated int32 array = 2;
  {
    int byte_size = _array_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_array(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntTensor)
  return target;
}

size_t IntTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntTensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 array = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->array_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _array_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntTensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntTensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntTensor::GetClassData() const { return &_class_data_; }

void IntTensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntTensor *>(to)->MergeFrom(
      static_cast<const IntTensor &>(from));
}


void IntTensor::MergeFrom(const IntTensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntTensor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  array_.MergeFrom(from.array_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntTensor::CopyFrom(const IntTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntTensor::IsInitialized() const {
  return true;
}

void IntTensor::InternalSwap(IntTensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  array_.InternalSwap(&other->array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntTensor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[1]);
}

// ===================================================================

class BoolTensor::_Internal {
 public:
};

BoolTensor::BoolTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena),
  array_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BoolTensor)
}
BoolTensor::BoolTensor(const BoolTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BoolTensor)
}

inline void BoolTensor::SharedCtor() {
}

BoolTensor::~BoolTensor() {
  // @@protoc_insertion_point(destructor:BoolTensor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoolTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoolTensor::ArenaDtor(void* object) {
  BoolTensor* _this = reinterpret_cast< BoolTensor* >(object);
  (void)_this;
}
void BoolTensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolTensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoolTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:BoolTensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  array_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolTensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_array(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoolTensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BoolTensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_shape(), byte_size, target);
    }
  }

  // repeated bool array = 2;
  if (this->_internal_array_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_array(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BoolTensor)
  return target;
}

size_t BoolTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BoolTensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool array = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_array_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolTensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoolTensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoolTensor::GetClassData() const { return &_class_data_; }

void BoolTensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoolTensor *>(to)->MergeFrom(
      static_cast<const BoolTensor &>(from));
}


void BoolTensor::MergeFrom(const BoolTensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BoolTensor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  array_.MergeFrom(from.array_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoolTensor::CopyFrom(const BoolTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BoolTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolTensor::IsInitialized() const {
  return true;
}

void BoolTensor::InternalSwap(BoolTensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  array_.InternalSwap(&other->array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolTensor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[2]);
}

// ===================================================================

class GraphSpace::_Internal {
 public:
  static const ::Space& node_space(const GraphSpace* msg);
  static const ::Space& edge_space(const GraphSpace* msg);
};

const ::Space&
GraphSpace::_Internal::node_space(const GraphSpace* msg) {
  return *msg->node_space_;
}
const ::Space&
GraphSpace::_Internal::edge_space(const GraphSpace* msg) {
  return *msg->edge_space_;
}
GraphSpace::GraphSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GraphSpace)
}
GraphSpace::GraphSpace(const GraphSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node_space()) {
    node_space_ = new ::Space(*from.node_space_);
  } else {
    node_space_ = nullptr;
  }
  if (from._internal_has_edge_space()) {
    edge_space_ = new ::Space(*from.edge_space_);
  } else {
    edge_space_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GraphSpace)
}

inline void GraphSpace::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_space_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edge_space_) -
    reinterpret_cast<char*>(&node_space_)) + sizeof(edge_space_));
}

GraphSpace::~GraphSpace() {
  // @@protoc_insertion_point(destructor:GraphSpace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GraphSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete node_space_;
  if (this != internal_default_instance()) delete edge_space_;
}

void GraphSpace::ArenaDtor(void* object) {
  GraphSpace* _this = reinterpret_cast< GraphSpace* >(object);
  (void)_this;
}
void GraphSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphSpace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && node_space_ != nullptr) {
    delete node_space_;
  }
  node_space_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edge_space_ != nullptr) {
    delete edge_space_;
  }
  edge_space_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Space node_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Space edge_space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphSpace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GraphSpace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Space node_space = 1;
  if (this->_internal_has_node_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_space(this), target, stream);
  }

  // .Space edge_space = 2;
  if (this->_internal_has_edge_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::edge_space(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GraphSpace)
  return target;
}

size_t GraphSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphSpace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Space node_space = 1;
  if (this->_internal_has_node_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_space_);
  }

  // .Space edge_space = 2;
  if (this->_internal_has_edge_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_space_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GraphSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphSpace::GetClassData() const { return &_class_data_; }

void GraphSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GraphSpace *>(to)->MergeFrom(
      static_cast<const GraphSpace &>(from));
}


void GraphSpace::MergeFrom(const GraphSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphSpace)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_node_space()) {
    _internal_mutable_node_space()->::Space::MergeFrom(from._internal_node_space());
  }
  if (from._internal_has_edge_space()) {
    _internal_mutable_edge_space()->::Space::MergeFrom(from._internal_edge_space());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphSpace::CopyFrom(const GraphSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphSpace::IsInitialized() const {
  return true;
}

void GraphSpace::InternalSwap(GraphSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphSpace, edge_space_)
      + sizeof(GraphSpace::edge_space_)
      - PROTOBUF_FIELD_OFFSET(GraphSpace, node_space_)>(
          reinterpret_cast<char*>(&node_space_),
          reinterpret_cast<char*>(&other->node_space_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphSpace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[3]);
}

// ===================================================================

class Graph::_Internal {
 public:
  static const ::FloatTensor& nodes(const Graph* msg);
  static const ::FloatTensor& edges(const Graph* msg);
  static const ::IntTensor& edge_links(const Graph* msg);
};

const ::FloatTensor&
Graph::_Internal::nodes(const Graph* msg) {
  return *msg->nodes_;
}
const ::FloatTensor&
Graph::_Internal::edges(const Graph* msg) {
  return *msg->edges_;
}
const ::IntTensor&
Graph::_Internal::edge_links(const Graph* msg) {
  return *msg->edge_links_;
}
Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodes()) {
    nodes_ = new ::FloatTensor(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  if (from._internal_has_edges()) {
    edges_ = new ::FloatTensor(*from.edges_);
  } else {
    edges_ = nullptr;
  }
  if (from._internal_has_edge_links()) {
    edge_links_ = new ::IntTensor(*from.edge_links_);
  } else {
    edge_links_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Graph)
}

inline void Graph::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edge_links_) -
    reinterpret_cast<char*>(&nodes_)) + sizeof(edge_links_));
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:Graph)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nodes_;
  if (this != internal_default_instance()) delete edges_;
  if (this != internal_default_instance()) delete edge_links_;
}

void Graph::ArenaDtor(void* object) {
  Graph* _this = reinterpret_cast< Graph* >(object);
  (void)_this;
}
void Graph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:Graph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edges_ != nullptr) {
    delete edges_;
  }
  edges_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edge_links_ != nullptr) {
    delete edge_links_;
  }
  edge_links_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FloatTensor nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FloatTensor edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntTensor edge_links = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_links(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Graph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FloatTensor nodes = 1;
  if (this->_internal_has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodes(this), target, stream);
  }

  // .FloatTensor edges = 2;
  if (this->_internal_has_edges()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::edges(this), target, stream);
  }

  // .IntTensor edge_links = 3;
  if (this->_internal_has_edge_links()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::edge_links(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Graph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FloatTensor nodes = 1;
  if (this->_internal_has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // .FloatTensor edges = 2;
  if (this->_internal_has_edges()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edges_);
  }

  // .IntTensor edge_links = 3;
  if (this->_internal_has_edge_links()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_links_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Graph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph::GetClassData() const { return &_class_data_; }

void Graph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Graph *>(to)->MergeFrom(
      static_cast<const Graph &>(from));
}


void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Graph)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodes()) {
    _internal_mutable_nodes()->::FloatTensor::MergeFrom(from._internal_nodes());
  }
  if (from._internal_has_edges()) {
    _internal_mutable_edges()->::FloatTensor::MergeFrom(from._internal_edges());
  }
  if (from._internal_has_edge_links()) {
    _internal_mutable_edge_links()->::IntTensor::MergeFrom(from._internal_edge_links());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Graph, edge_links_)
      + sizeof(Graph::edge_links_)
      - PROTOBUF_FIELD_OFFSET(Graph, nodes_)>(
          reinterpret_cast<char*>(&nodes_),
          reinterpret_cast<char*>(&other->nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[4]);
}

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena),
  dimension_mapping_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      dimension_mapping_(from.dimension_mapping_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  compression_type_ = from.compression_type_;
  // @@protoc_insertion_point(copy_constructor:Image)
}

inline void Image::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
compression_type_ = 0;
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:Image)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  dimension_mapping_.Clear();
  data_.ClearToEmpty();
  compression_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CompressionType compression_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compression_type(static_cast<::CompressionType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 dimension_mapping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dimension_mapping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_dimension_mapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CompressionType compression_type = 1;
  if (this->_internal_compression_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_compression_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // repeated int32 shape = 3;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_shape(), byte_size, target);
    }
  }

  // repeated int32 dimension_mapping = 4;
  {
    int byte_size = _dimension_mapping_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_dimension_mapping(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 dimension_mapping = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dimension_mapping_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dimension_mapping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .CompressionType compression_type = 1;
  if (this->_internal_compression_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_compression_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }

void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Image *>(to)->MergeFrom(
      static_cast<const Image &>(from));
}


void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  dimension_mapping_.MergeFrom(from.dimension_mapping_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_compression_type() != 0) {
    _internal_set_compression_type(from._internal_compression_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  dimension_mapping_.InternalSwap(&other->dimension_mapping_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(compression_type_, other->compression_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[5]);
}

// ===================================================================

Space_DictSpaceEntry_DoNotUse::Space_DictSpaceEntry_DoNotUse() {}
Space_DictSpaceEntry_DoNotUse::Space_DictSpaceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Space_DictSpaceEntry_DoNotUse::MergeFrom(const Space_DictSpaceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Space_DictSpaceEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[6]);
}

// ===================================================================

Space_ListSpaceEntry_DoNotUse::Space_ListSpaceEntry_DoNotUse() {}
Space_ListSpaceEntry_DoNotUse::Space_ListSpaceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Space_ListSpaceEntry_DoNotUse::MergeFrom(const Space_ListSpaceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Space_ListSpaceEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[7]);
}

// ===================================================================

class Space::_Internal {
 public:
  static const ::GraphSpace& graph_space(const Space* msg);
};

const ::GraphSpace&
Space::_Internal::graph_space(const Space* msg) {
  return *msg->graph_space_;
}
Space::Space(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena),
  low_(arena),
  high_(arena),
  nvec_(arena),
  charset_(arena),
  dict_space_(arena),
  list_space_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Space)
}
Space::Space(const Space& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      low_(from.low_),
      high_(from.high_),
      nvec_(from.nvec_),
      charset_(from.charset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dict_space_.MergeFrom(from.dict_space_);
  list_space_.MergeFrom(from.list_space_);
  if (from._internal_has_graph_space()) {
    graph_space_ = new ::GraphSpace(*from.graph_space_);
  } else {
    graph_space_ = nullptr;
  }
  ::memcpy(&space_type_, &from.space_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&space_type_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:Space)
}

inline void Space::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&graph_space_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&graph_space_)) + sizeof(max_));
}

Space::~Space() {
  // @@protoc_insertion_point(destructor:Space)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Space::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete graph_space_;
}

void Space::ArenaDtor(void* object) {
  Space* _this = reinterpret_cast< Space* >(object);
  (void)_this;
  _this->dict_space_. ~MapField();
  _this->list_space_. ~MapField();
}
inline void Space::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Space::ArenaDtor);
  }
}
void Space::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Space::Clear() {
// @@protoc_insertion_point(message_clear_start:Space)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  low_.Clear();
  high_.Clear();
  nvec_.Clear();
  charset_.Clear();
  dict_space_.Clear();
  list_space_.Clear();
  if (GetArenaForAllocation() == nullptr && graph_space_ != nullptr) {
    delete graph_space_;
  }
  graph_space_ = nullptr;
  ::memset(&space_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&space_type_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Space::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SpaceType space_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_space_type(static_cast<::SpaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DataType data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated float low = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_low(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_low(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float high = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_high(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_high(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 nvec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nvec(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_nvec(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string charset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_charset();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Space.charset"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Space> dict_space = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dict_space_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .Space> list_space = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&list_space_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .GraphSpace graph_space = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Space::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Space)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SpaceType space_type = 1;
  if (this->_internal_space_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_space_type(), target);
  }

  // repeated int32 shape = 2;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_shape(), byte_size, target);
    }
  }

  // .DataType data_type = 3;
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_type(), target);
  }

  // repeated float low = 4;
  if (this->_internal_low_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_low(), target);
  }

  // repeated float high = 5;
  if (this->_internal_high_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_high(), target);
  }

  // int32 min = 6;
  if (this->_internal_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_min(), target);
  }

  // int32 max = 7;
  if (this->_internal_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max(), target);
  }

  // repeated int32 nvec = 8;
  {
    int byte_size = _nvec_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_nvec(), byte_size, target);
    }
  }

  // repeated string charset = 9;
  for (int i = 0, n = this->_internal_charset_size(); i < n; i++) {
    const auto& s = this->_internal_charset(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Space.charset");
    target = stream->WriteString(9, s, target);
  }

  // map<string, .Space> dict_space = 10;
  if (!this->_internal_dict_space().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Space >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Space.DictSpaceEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dict_space().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dict_space().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Space >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Space >::const_iterator
          it = this->_internal_dict_space().begin();
          it != this->_internal_dict_space().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Space_DictSpaceEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Space >::const_iterator
          it = this->_internal_dict_space().begin();
          it != this->_internal_dict_space().end(); ++it) {
        target = Space_DictSpaceEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, .Space> list_space = 11;
  if (!this->_internal_list_space().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Space >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_list_space().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_list_space().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Space >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Space >::const_iterator
          it = this->_internal_list_space().begin();
          it != this->_internal_list_space().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Space_ListSpaceEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Space >::const_iterator
          it = this->_internal_list_space().begin();
          it != this->_internal_list_space().end(); ++it) {
        target = Space_ListSpaceEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  // .GraphSpace graph_space = 12;
  if (this->_internal_has_graph_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::graph_space(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Space)
  return target;
}

size_t Space::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Space)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float low = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_low_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float high = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_high_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 nvec = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nvec_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nvec_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string charset = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(charset_.size());
  for (int i = 0, n = charset_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      charset_.Get(i));
  }

  // map<string, .Space> dict_space = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dict_space_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Space >::const_iterator
      it = this->_internal_dict_space().begin();
      it != this->_internal_dict_space().end(); ++it) {
    total_size += Space_DictSpaceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .Space> list_space = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_list_space_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Space >::const_iterator
      it = this->_internal_list_space().begin();
      it != this->_internal_list_space().end(); ++it) {
    total_size += Space_ListSpaceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .GraphSpace graph_space = 12;
  if (this->_internal_has_graph_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_space_);
  }

  // .SpaceType space_type = 1;
  if (this->_internal_space_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_space_type());
  }

  // .DataType data_type = 3;
  if (this->_internal_data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // int32 min = 6;
  if (this->_internal_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_min());
  }

  // int32 max = 7;
  if (this->_internal_max() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Space::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Space::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Space::GetClassData() const { return &_class_data_; }

void Space::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Space *>(to)->MergeFrom(
      static_cast<const Space &>(from));
}


void Space::MergeFrom(const Space& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Space)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  low_.MergeFrom(from.low_);
  high_.MergeFrom(from.high_);
  nvec_.MergeFrom(from.nvec_);
  charset_.MergeFrom(from.charset_);
  dict_space_.MergeFrom(from.dict_space_);
  list_space_.MergeFrom(from.list_space_);
  if (from._internal_has_graph_space()) {
    _internal_mutable_graph_space()->::GraphSpace::MergeFrom(from._internal_graph_space());
  }
  if (from._internal_space_type() != 0) {
    _internal_set_space_type(from._internal_space_type());
  }
  if (from._internal_data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from._internal_min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from._internal_max() != 0) {
    _internal_set_max(from._internal_max());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Space::CopyFrom(const Space& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Space)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Space::IsInitialized() const {
  return true;
}

void Space::InternalSwap(Space* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  low_.InternalSwap(&other->low_);
  high_.InternalSwap(&other->high_);
  nvec_.InternalSwap(&other->nvec_);
  charset_.InternalSwap(&other->charset_);
  dict_space_.InternalSwap(&other->dict_space_);
  list_space_.InternalSwap(&other->list_space_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Space, max_)
      + sizeof(Space::max_)
      - PROTOBUF_FIELD_OFFSET(Space, graph_space_)>(
          reinterpret_cast<char*>(&graph_space_),
          reinterpret_cast<char*>(&other->graph_space_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Space::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[8]);
}

// ===================================================================

Data_DictEntry_DoNotUse::Data_DictEntry_DoNotUse() {}
Data_DictEntry_DoNotUse::Data_DictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Data_DictEntry_DoNotUse::MergeFrom(const Data_DictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Data_DictEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[9]);
}

// ===================================================================

Data_ListEntry_DoNotUse::Data_ListEntry_DoNotUse() {}
Data_ListEntry_DoNotUse::Data_ListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Data_ListEntry_DoNotUse::MergeFrom(const Data_ListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Data_ListEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[10]);
}

// ===================================================================

class Data::_Internal {
 public:
  static const ::FloatTensor& box(const Data* msg);
  static const ::BoolTensor& multi_binary(const Data* msg);
  static const ::IntTensor& multi_discrete(const Data* msg);
  static const ::Graph& graph(const Data* msg);
  static const ::Image& image(const Data* msg);
};

const ::FloatTensor&
Data::_Internal::box(const Data* msg) {
  return *msg->box_;
}
const ::BoolTensor&
Data::_Internal::multi_binary(const Data* msg) {
  return *msg->multi_binary_;
}
const ::IntTensor&
Data::_Internal::multi_discrete(const Data* msg) {
  return *msg->multi_discrete_;
}
const ::Graph&
Data::_Internal::graph(const Data* msg) {
  return *msg->graph_;
}
const ::Image&
Data::_Internal::image(const Data* msg) {
  return *msg->image_;
}
Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dict_(arena),
  list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dict_.MergeFrom(from.dict_);
  list_.MergeFrom(from.list_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_box()) {
    box_ = new ::FloatTensor(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from._internal_has_multi_binary()) {
    multi_binary_ = new ::BoolTensor(*from.multi_binary_);
  } else {
    multi_binary_ = nullptr;
  }
  if (from._internal_has_multi_discrete()) {
    multi_discrete_ = new ::IntTensor(*from.multi_discrete_);
  } else {
    multi_discrete_ = nullptr;
  }
  if (from._internal_has_graph()) {
    graph_ = new ::Graph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  ::memcpy(&space_type_, &from.space_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&discrete_) -
    reinterpret_cast<char*>(&space_type_)) + sizeof(discrete_));
  // @@protoc_insertion_point(copy_constructor:Data)
}

inline void Data::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&box_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&discrete_) -
    reinterpret_cast<char*>(&box_)) + sizeof(discrete_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete multi_binary_;
  if (this != internal_default_instance()) delete multi_discrete_;
  if (this != internal_default_instance()) delete graph_;
  if (this != internal_default_instance()) delete image_;
}

void Data::ArenaDtor(void* object) {
  Data* _this = reinterpret_cast< Data* >(object);
  (void)_this;
  _this->dict_. ~MapField();
  _this->list_. ~MapField();
}
inline void Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Data::ArenaDtor);
  }
}
void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dict_.Clear();
  list_.Clear();
  text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
  if (GetArenaForAllocation() == nullptr && multi_binary_ != nullptr) {
    delete multi_binary_;
  }
  multi_binary_ = nullptr;
  if (GetArenaForAllocation() == nullptr && multi_discrete_ != nullptr) {
    delete multi_discrete_;
  }
  multi_discrete_ = nullptr;
  if (GetArenaForAllocation() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  ::memset(&space_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discrete_) -
      reinterpret_cast<char*>(&space_type_)) + sizeof(discrete_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SpaceType space_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_space_type(static_cast<::SpaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .FloatTensor box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 discrete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          discrete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BoolTensor multi_binary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_binary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntTensor multi_discrete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_discrete(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Data.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .Data> dict = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dict_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .Data> list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Graph graph = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Image image = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SpaceType space_type = 1;
  if (this->_internal_space_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_space_type(), target);
  }

  // .FloatTensor box = 2;
  if (this->_internal_has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::box(this), target, stream);
  }

  // int32 discrete = 3;
  if (this->_internal_discrete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_discrete(), target);
  }

  // .BoolTensor multi_binary = 4;
  if (this->_internal_has_multi_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::multi_binary(this), target, stream);
  }

  // .IntTensor multi_discrete = 5;
  if (this->_internal_has_multi_discrete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::multi_discrete(this), target, stream);
  }

  // string text = 6;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Data.text");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_text(), target);
  }

  // map<string, .Data> dict = 7;
  if (!this->_internal_dict().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Data >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Data.DictEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dict().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dict().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Data >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Data >::const_iterator
          it = this->_internal_dict().begin();
          it != this->_internal_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Data_DictEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Data >::const_iterator
          it = this->_internal_dict().begin();
          it != this->_internal_dict().end(); ++it) {
        target = Data_DictEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, .Data> list = 8;
  if (!this->_internal_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Data >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Data >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Data >::const_iterator
          it = this->_internal_list().begin();
          it != this->_internal_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Data_ListEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Data >::const_iterator
          it = this->_internal_list().begin();
          it != this->_internal_list().end(); ++it) {
        target = Data_ListEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
      }
    }
  }

  // .Graph graph = 9;
  if (this->_internal_has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::graph(this), target, stream);
  }

  // .Image image = 10;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Data> dict = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dict_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Data >::const_iterator
      it = this->_internal_dict().begin();
      it != this->_internal_dict().end(); ++it) {
    total_size += Data_DictEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .Data> list = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::Data >::const_iterator
      it = this->_internal_list().begin();
      it != this->_internal_list().end(); ++it) {
    total_size += Data_ListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string text = 6;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .FloatTensor box = 2;
  if (this->_internal_has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .BoolTensor multi_binary = 4;
  if (this->_internal_has_multi_binary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multi_binary_);
  }

  // .IntTensor multi_discrete = 5;
  if (this->_internal_has_multi_discrete()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multi_discrete_);
  }

  // .Graph graph = 9;
  if (this->_internal_has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // .Image image = 10;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .SpaceType space_type = 1;
  if (this->_internal_space_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_space_type());
  }

  // int32 discrete = 3;
  if (this->_internal_discrete() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_discrete());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }

void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Data *>(to)->MergeFrom(
      static_cast<const Data &>(from));
}


void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dict_.MergeFrom(from.dict_);
  list_.MergeFrom(from.list_);
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_has_box()) {
    _internal_mutable_box()->::FloatTensor::MergeFrom(from._internal_box());
  }
  if (from._internal_has_multi_binary()) {
    _internal_mutable_multi_binary()->::BoolTensor::MergeFrom(from._internal_multi_binary());
  }
  if (from._internal_has_multi_discrete()) {
    _internal_mutable_multi_discrete()->::IntTensor::MergeFrom(from._internal_multi_discrete());
  }
  if (from._internal_has_graph()) {
    _internal_mutable_graph()->::Graph::MergeFrom(from._internal_graph());
  }
  if (from._internal_has_image()) {
    _internal_mutable_image()->::Image::MergeFrom(from._internal_image());
  }
  if (from._internal_space_type() != 0) {
    _internal_set_space_type(from._internal_space_type());
  }
  if (from._internal_discrete() != 0) {
    _internal_set_discrete(from._internal_discrete());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dict_.InternalSwap(&other->dict_);
  list_.InternalSwap(&other->list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data, discrete_)
      + sizeof(Data::discrete_)
      - PROTOBUF_FIELD_OFFSET(Data, box_)>(
          reinterpret_cast<char*>(&box_),
          reinterpret_cast<char*>(&other->box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_space_2eproto_getter, &descriptor_table_space_2eproto_once,
      file_level_metadata_space_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FloatTensor* Arena::CreateMaybeMessage< ::FloatTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FloatTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::IntTensor* Arena::CreateMaybeMessage< ::IntTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::BoolTensor* Arena::CreateMaybeMessage< ::BoolTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BoolTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::GraphSpace* Arena::CreateMaybeMessage< ::GraphSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GraphSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::Graph* Arena::CreateMaybeMessage< ::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Graph >(arena);
}
template<> PROTOBUF_NOINLINE ::Image* Arena::CreateMaybeMessage< ::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::Space_DictSpaceEntry_DoNotUse* Arena::CreateMaybeMessage< ::Space_DictSpaceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Space_DictSpaceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Space_ListSpaceEntry_DoNotUse* Arena::CreateMaybeMessage< ::Space_ListSpaceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Space_ListSpaceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Space* Arena::CreateMaybeMessage< ::Space >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Space >(arena);
}
template<> PROTOBUF_NOINLINE ::Data_DictEntry_DoNotUse* Arena::CreateMaybeMessage< ::Data_DictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Data_DictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Data_ListEntry_DoNotUse* Arena::CreateMaybeMessage< ::Data_ListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Data_ListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Data* Arena::CreateMaybeMessage< ::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
