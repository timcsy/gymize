// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: locator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_locator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_locator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_locator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_locator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_locator_2eproto;
class LocatorProto;
struct LocatorProtoDefaultTypeInternal;
extern LocatorProtoDefaultTypeInternal _LocatorProto_default_instance_;
class MappingProto;
struct MappingProtoDefaultTypeInternal;
extern MappingProtoDefaultTypeInternal _MappingProto_default_instance_;
class SelectorProto;
struct SelectorProtoDefaultTypeInternal;
extern SelectorProtoDefaultTypeInternal _SelectorProto_default_instance_;
class SliceProto;
struct SliceProtoDefaultTypeInternal;
extern SliceProtoDefaultTypeInternal _SliceProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LocatorProto* Arena::CreateMaybeMessage<::LocatorProto>(Arena*);
template<> ::MappingProto* Arena::CreateMaybeMessage<::MappingProto>(Arena*);
template<> ::SelectorProto* Arena::CreateMaybeMessage<::SelectorProto>(Arena*);
template<> ::SliceProto* Arena::CreateMaybeMessage<::SliceProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SelectorTypeProto : int {
  SELECTOR_TYPE_PROTO_UNSPECIFIED = 0,
  SELECTOR_TYPE_PROTO_DICT = 1,
  SELECTOR_TYPE_PROTO_TUPLE = 2,
  SELECTOR_TYPE_PROTO_SEQUENCE = 3,
  SELECTOR_TYPE_PROTO_TENSOR = 4,
  SelectorTypeProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SelectorTypeProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SelectorTypeProto_IsValid(int value);
constexpr SelectorTypeProto SelectorTypeProto_MIN = SELECTOR_TYPE_PROTO_UNSPECIFIED;
constexpr SelectorTypeProto SelectorTypeProto_MAX = SELECTOR_TYPE_PROTO_TENSOR;
constexpr int SelectorTypeProto_ARRAYSIZE = SelectorTypeProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectorTypeProto_descriptor();
template<typename T>
inline const std::string& SelectorTypeProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectorTypeProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectorTypeProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectorTypeProto_descriptor(), enum_t_value);
}
inline bool SelectorTypeProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SelectorTypeProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectorTypeProto>(
    SelectorTypeProto_descriptor(), name, value);
}
// ===================================================================

class SliceProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SliceProto) */ {
 public:
  inline SliceProto() : SliceProto(nullptr) {}
  ~SliceProto() override;
  explicit constexpr SliceProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SliceProto(const SliceProto& from);
  SliceProto(SliceProto&& from) noexcept
    : SliceProto() {
    *this = ::std::move(from);
  }

  inline SliceProto& operator=(const SliceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceProto& operator=(SliceProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SliceProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SliceProto* internal_default_instance() {
    return reinterpret_cast<const SliceProto*>(
               &_SliceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SliceProto& a, SliceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SliceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SliceProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SliceProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SliceProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SliceProto";
  }
  protected:
  explicit SliceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 2,
    kStopFieldNumber = 4,
    kHasStartFieldNumber = 1,
    kHasStopFieldNumber = 3,
    kIsIndexFieldNumber = 6,
    kIsEllipsisFieldNumber = 7,
    kStepFieldNumber = 5,
    kIsNewAxisFieldNumber = 8,
  };
  // int32 start = 2;
  void clear_start();
  int32_t start() const;
  void set_start(int32_t value);
  private:
  int32_t _internal_start() const;
  void _internal_set_start(int32_t value);
  public:

  // int32 stop = 4;
  void clear_stop();
  int32_t stop() const;
  void set_stop(int32_t value);
  private:
  int32_t _internal_stop() const;
  void _internal_set_stop(int32_t value);
  public:

  // bool has_start = 1;
  void clear_has_start();
  bool has_start() const;
  void set_has_start(bool value);
  private:
  bool _internal_has_start() const;
  void _internal_set_has_start(bool value);
  public:

  // bool has_stop = 3;
  void clear_has_stop();
  bool has_stop() const;
  void set_has_stop(bool value);
  private:
  bool _internal_has_stop() const;
  void _internal_set_has_stop(bool value);
  public:

  // bool is_index = 6;
  void clear_is_index();
  bool is_index() const;
  void set_is_index(bool value);
  private:
  bool _internal_is_index() const;
  void _internal_set_is_index(bool value);
  public:

  // bool is_ellipsis = 7;
  void clear_is_ellipsis();
  bool is_ellipsis() const;
  void set_is_ellipsis(bool value);
  private:
  bool _internal_is_ellipsis() const;
  void _internal_set_is_ellipsis(bool value);
  public:

  // int32 step = 5;
  void clear_step();
  int32_t step() const;
  void set_step(int32_t value);
  private:
  int32_t _internal_step() const;
  void _internal_set_step(int32_t value);
  public:

  // bool is_new_axis = 8;
  void clear_is_new_axis();
  bool is_new_axis() const;
  void set_is_new_axis(bool value);
  private:
  bool _internal_is_new_axis() const;
  void _internal_set_is_new_axis(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SliceProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t start_;
  int32_t stop_;
  bool has_start_;
  bool has_stop_;
  bool is_index_;
  bool is_ellipsis_;
  int32_t step_;
  bool is_new_axis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_locator_2eproto;
};
// -------------------------------------------------------------------

class SelectorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SelectorProto) */ {
 public:
  inline SelectorProto() : SelectorProto(nullptr) {}
  ~SelectorProto() override;
  explicit constexpr SelectorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectorProto(const SelectorProto& from);
  SelectorProto(SelectorProto&& from) noexcept
    : SelectorProto() {
    *this = ::std::move(from);
  }

  inline SelectorProto& operator=(const SelectorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectorProto& operator=(SelectorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectorProto* internal_default_instance() {
    return reinterpret_cast<const SelectorProto*>(
               &_SelectorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SelectorProto& a, SelectorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectorProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SelectorProto";
  }
  protected:
  explicit SelectorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicesFieldNumber = 2,
    kKeyFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated .SliceProto slices = 2;
  int slices_size() const;
  private:
  int _internal_slices_size() const;
  public:
  void clear_slices();
  ::SliceProto* mutable_slices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SliceProto >*
      mutable_slices();
  private:
  const ::SliceProto& _internal_slices(int index) const;
  ::SliceProto* _internal_add_slices();
  public:
  const ::SliceProto& slices(int index) const;
  ::SliceProto* add_slices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SliceProto >&
      slices() const;

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .SelectorTypeProto type = 1;
  void clear_type();
  ::SelectorTypeProto type() const;
  void set_type(::SelectorTypeProto value);
  private:
  ::SelectorTypeProto _internal_type() const;
  void _internal_set_type(::SelectorTypeProto value);
  public:

  // @@protoc_insertion_point(class_scope:SelectorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SliceProto > slices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_locator_2eproto;
};
// -------------------------------------------------------------------

class MappingProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MappingProto) */ {
 public:
  inline MappingProto() : MappingProto(nullptr) {}
  ~MappingProto() override;
  explicit constexpr MappingProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MappingProto(const MappingProto& from);
  MappingProto(MappingProto&& from) noexcept
    : MappingProto() {
    *this = ::std::move(from);
  }

  inline MappingProto& operator=(const MappingProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MappingProto& operator=(MappingProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MappingProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const MappingProto* internal_default_instance() {
    return reinterpret_cast<const MappingProto*>(
               &_MappingProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MappingProto& a, MappingProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MappingProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MappingProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MappingProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MappingProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MappingProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MappingProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MappingProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MappingProto";
  }
  protected:
  explicit MappingProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 2,
    kDestinationFieldNumber = 4,
    kSourceFieldNumber = 5,
    kIsAllAgentsFieldNumber = 1,
    kIsRootFieldNumber = 3,
  };
  // repeated string agents = 2;
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  const std::string& agents(int index) const;
  std::string* mutable_agents(int index);
  void set_agents(int index, const std::string& value);
  void set_agents(int index, std::string&& value);
  void set_agents(int index, const char* value);
  void set_agents(int index, const char* value, size_t size);
  std::string* add_agents();
  void add_agents(const std::string& value);
  void add_agents(std::string&& value);
  void add_agents(const char* value);
  void add_agents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& agents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_agents();
  private:
  const std::string& _internal_agents(int index) const;
  std::string* _internal_add_agents();
  public:

  // repeated .SelectorProto destination = 4;
  int destination_size() const;
  private:
  int _internal_destination_size() const;
  public:
  void clear_destination();
  ::SelectorProto* mutable_destination(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto >*
      mutable_destination();
  private:
  const ::SelectorProto& _internal_destination(int index) const;
  ::SelectorProto* _internal_add_destination();
  public:
  const ::SelectorProto& destination(int index) const;
  ::SelectorProto* add_destination();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto >&
      destination() const;

  // repeated .SelectorProto source = 5;
  int source_size() const;
  private:
  int _internal_source_size() const;
  public:
  void clear_source();
  ::SelectorProto* mutable_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto >*
      mutable_source();
  private:
  const ::SelectorProto& _internal_source(int index) const;
  ::SelectorProto* _internal_add_source();
  public:
  const ::SelectorProto& source(int index) const;
  ::SelectorProto* add_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto >&
      source() const;

  // bool is_all_agents = 1;
  void clear_is_all_agents();
  bool is_all_agents() const;
  void set_is_all_agents(bool value);
  private:
  bool _internal_is_all_agents() const;
  void _internal_set_is_all_agents(bool value);
  public:

  // bool is_root = 3;
  void clear_is_root();
  bool is_root() const;
  void set_is_root(bool value);
  private:
  bool _internal_is_root() const;
  void _internal_set_is_root(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MappingProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> agents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto > destination_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto > source_;
  bool is_all_agents_;
  bool is_root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_locator_2eproto;
};
// -------------------------------------------------------------------

class LocatorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LocatorProto) */ {
 public:
  inline LocatorProto() : LocatorProto(nullptr) {}
  ~LocatorProto() override;
  explicit constexpr LocatorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocatorProto(const LocatorProto& from);
  LocatorProto(LocatorProto&& from) noexcept
    : LocatorProto() {
    *this = ::std::move(from);
  }

  inline LocatorProto& operator=(const LocatorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocatorProto& operator=(LocatorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocatorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocatorProto* internal_default_instance() {
    return reinterpret_cast<const LocatorProto*>(
               &_LocatorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocatorProto& a, LocatorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LocatorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocatorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocatorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocatorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocatorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocatorProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocatorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LocatorProto";
  }
  protected:
  explicit LocatorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappingsFieldNumber = 1,
  };
  // repeated .MappingProto mappings = 1;
  int mappings_size() const;
  private:
  int _internal_mappings_size() const;
  public:
  void clear_mappings();
  ::MappingProto* mutable_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MappingProto >*
      mutable_mappings();
  private:
  const ::MappingProto& _internal_mappings(int index) const;
  ::MappingProto* _internal_add_mappings();
  public:
  const ::MappingProto& mappings(int index) const;
  ::MappingProto* add_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MappingProto >&
      mappings() const;

  // @@protoc_insertion_point(class_scope:LocatorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MappingProto > mappings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_locator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SliceProto

// bool has_start = 1;
inline void SliceProto::clear_has_start() {
  has_start_ = false;
}
inline bool SliceProto::_internal_has_start() const {
  return has_start_;
}
inline bool SliceProto::has_start() const {
  // @@protoc_insertion_point(field_get:SliceProto.has_start)
  return _internal_has_start();
}
inline void SliceProto::_internal_set_has_start(bool value) {
  
  has_start_ = value;
}
inline void SliceProto::set_has_start(bool value) {
  _internal_set_has_start(value);
  // @@protoc_insertion_point(field_set:SliceProto.has_start)
}

// int32 start = 2;
inline void SliceProto::clear_start() {
  start_ = 0;
}
inline int32_t SliceProto::_internal_start() const {
  return start_;
}
inline int32_t SliceProto::start() const {
  // @@protoc_insertion_point(field_get:SliceProto.start)
  return _internal_start();
}
inline void SliceProto::_internal_set_start(int32_t value) {
  
  start_ = value;
}
inline void SliceProto::set_start(int32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:SliceProto.start)
}

// bool has_stop = 3;
inline void SliceProto::clear_has_stop() {
  has_stop_ = false;
}
inline bool SliceProto::_internal_has_stop() const {
  return has_stop_;
}
inline bool SliceProto::has_stop() const {
  // @@protoc_insertion_point(field_get:SliceProto.has_stop)
  return _internal_has_stop();
}
inline void SliceProto::_internal_set_has_stop(bool value) {
  
  has_stop_ = value;
}
inline void SliceProto::set_has_stop(bool value) {
  _internal_set_has_stop(value);
  // @@protoc_insertion_point(field_set:SliceProto.has_stop)
}

// int32 stop = 4;
inline void SliceProto::clear_stop() {
  stop_ = 0;
}
inline int32_t SliceProto::_internal_stop() const {
  return stop_;
}
inline int32_t SliceProto::stop() const {
  // @@protoc_insertion_point(field_get:SliceProto.stop)
  return _internal_stop();
}
inline void SliceProto::_internal_set_stop(int32_t value) {
  
  stop_ = value;
}
inline void SliceProto::set_stop(int32_t value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:SliceProto.stop)
}

// int32 step = 5;
inline void SliceProto::clear_step() {
  step_ = 0;
}
inline int32_t SliceProto::_internal_step() const {
  return step_;
}
inline int32_t SliceProto::step() const {
  // @@protoc_insertion_point(field_get:SliceProto.step)
  return _internal_step();
}
inline void SliceProto::_internal_set_step(int32_t value) {
  
  step_ = value;
}
inline void SliceProto::set_step(int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:SliceProto.step)
}

// bool is_index = 6;
inline void SliceProto::clear_is_index() {
  is_index_ = false;
}
inline bool SliceProto::_internal_is_index() const {
  return is_index_;
}
inline bool SliceProto::is_index() const {
  // @@protoc_insertion_point(field_get:SliceProto.is_index)
  return _internal_is_index();
}
inline void SliceProto::_internal_set_is_index(bool value) {
  
  is_index_ = value;
}
inline void SliceProto::set_is_index(bool value) {
  _internal_set_is_index(value);
  // @@protoc_insertion_point(field_set:SliceProto.is_index)
}

// bool is_ellipsis = 7;
inline void SliceProto::clear_is_ellipsis() {
  is_ellipsis_ = false;
}
inline bool SliceProto::_internal_is_ellipsis() const {
  return is_ellipsis_;
}
inline bool SliceProto::is_ellipsis() const {
  // @@protoc_insertion_point(field_get:SliceProto.is_ellipsis)
  return _internal_is_ellipsis();
}
inline void SliceProto::_internal_set_is_ellipsis(bool value) {
  
  is_ellipsis_ = value;
}
inline void SliceProto::set_is_ellipsis(bool value) {
  _internal_set_is_ellipsis(value);
  // @@protoc_insertion_point(field_set:SliceProto.is_ellipsis)
}

// bool is_new_axis = 8;
inline void SliceProto::clear_is_new_axis() {
  is_new_axis_ = false;
}
inline bool SliceProto::_internal_is_new_axis() const {
  return is_new_axis_;
}
inline bool SliceProto::is_new_axis() const {
  // @@protoc_insertion_point(field_get:SliceProto.is_new_axis)
  return _internal_is_new_axis();
}
inline void SliceProto::_internal_set_is_new_axis(bool value) {
  
  is_new_axis_ = value;
}
inline void SliceProto::set_is_new_axis(bool value) {
  _internal_set_is_new_axis(value);
  // @@protoc_insertion_point(field_set:SliceProto.is_new_axis)
}

// -------------------------------------------------------------------

// SelectorProto

// .SelectorTypeProto type = 1;
inline void SelectorProto::clear_type() {
  type_ = 0;
}
inline ::SelectorTypeProto SelectorProto::_internal_type() const {
  return static_cast< ::SelectorTypeProto >(type_);
}
inline ::SelectorTypeProto SelectorProto::type() const {
  // @@protoc_insertion_point(field_get:SelectorProto.type)
  return _internal_type();
}
inline void SelectorProto::_internal_set_type(::SelectorTypeProto value) {
  
  type_ = value;
}
inline void SelectorProto::set_type(::SelectorTypeProto value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SelectorProto.type)
}

// repeated .SliceProto slices = 2;
inline int SelectorProto::_internal_slices_size() const {
  return slices_.size();
}
inline int SelectorProto::slices_size() const {
  return _internal_slices_size();
}
inline void SelectorProto::clear_slices() {
  slices_.Clear();
}
inline ::SliceProto* SelectorProto::mutable_slices(int index) {
  // @@protoc_insertion_point(field_mutable:SelectorProto.slices)
  return slices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SliceProto >*
SelectorProto::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:SelectorProto.slices)
  return &slices_;
}
inline const ::SliceProto& SelectorProto::_internal_slices(int index) const {
  return slices_.Get(index);
}
inline const ::SliceProto& SelectorProto::slices(int index) const {
  // @@protoc_insertion_point(field_get:SelectorProto.slices)
  return _internal_slices(index);
}
inline ::SliceProto* SelectorProto::_internal_add_slices() {
  return slices_.Add();
}
inline ::SliceProto* SelectorProto::add_slices() {
  ::SliceProto* _add = _internal_add_slices();
  // @@protoc_insertion_point(field_add:SelectorProto.slices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SliceProto >&
SelectorProto::slices() const {
  // @@protoc_insertion_point(field_list:SelectorProto.slices)
  return slices_;
}

// string key = 3;
inline void SelectorProto::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& SelectorProto::key() const {
  // @@protoc_insertion_point(field_get:SelectorProto.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectorProto::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SelectorProto.key)
}
inline std::string* SelectorProto::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:SelectorProto.key)
  return _s;
}
inline const std::string& SelectorProto::_internal_key() const {
  return key_.Get();
}
inline void SelectorProto::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SelectorProto::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SelectorProto::release_key() {
  // @@protoc_insertion_point(field_release:SelectorProto.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SelectorProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SelectorProto.key)
}

// -------------------------------------------------------------------

// MappingProto

// bool is_all_agents = 1;
inline void MappingProto::clear_is_all_agents() {
  is_all_agents_ = false;
}
inline bool MappingProto::_internal_is_all_agents() const {
  return is_all_agents_;
}
inline bool MappingProto::is_all_agents() const {
  // @@protoc_insertion_point(field_get:MappingProto.is_all_agents)
  return _internal_is_all_agents();
}
inline void MappingProto::_internal_set_is_all_agents(bool value) {
  
  is_all_agents_ = value;
}
inline void MappingProto::set_is_all_agents(bool value) {
  _internal_set_is_all_agents(value);
  // @@protoc_insertion_point(field_set:MappingProto.is_all_agents)
}

// repeated string agents = 2;
inline int MappingProto::_internal_agents_size() const {
  return agents_.size();
}
inline int MappingProto::agents_size() const {
  return _internal_agents_size();
}
inline void MappingProto::clear_agents() {
  agents_.Clear();
}
inline std::string* MappingProto::add_agents() {
  std::string* _s = _internal_add_agents();
  // @@protoc_insertion_point(field_add_mutable:MappingProto.agents)
  return _s;
}
inline const std::string& MappingProto::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const std::string& MappingProto::agents(int index) const {
  // @@protoc_insertion_point(field_get:MappingProto.agents)
  return _internal_agents(index);
}
inline std::string* MappingProto::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:MappingProto.agents)
  return agents_.Mutable(index);
}
inline void MappingProto::set_agents(int index, const std::string& value) {
  agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:MappingProto.agents)
}
inline void MappingProto::set_agents(int index, std::string&& value) {
  agents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:MappingProto.agents)
}
inline void MappingProto::set_agents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MappingProto.agents)
}
inline void MappingProto::set_agents(int index, const char* value, size_t size) {
  agents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MappingProto.agents)
}
inline std::string* MappingProto::_internal_add_agents() {
  return agents_.Add();
}
inline void MappingProto::add_agents(const std::string& value) {
  agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MappingProto.agents)
}
inline void MappingProto::add_agents(std::string&& value) {
  agents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MappingProto.agents)
}
inline void MappingProto::add_agents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MappingProto.agents)
}
inline void MappingProto::add_agents(const char* value, size_t size) {
  agents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MappingProto.agents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MappingProto::agents() const {
  // @@protoc_insertion_point(field_list:MappingProto.agents)
  return agents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MappingProto::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:MappingProto.agents)
  return &agents_;
}

// bool is_root = 3;
inline void MappingProto::clear_is_root() {
  is_root_ = false;
}
inline bool MappingProto::_internal_is_root() const {
  return is_root_;
}
inline bool MappingProto::is_root() const {
  // @@protoc_insertion_point(field_get:MappingProto.is_root)
  return _internal_is_root();
}
inline void MappingProto::_internal_set_is_root(bool value) {
  
  is_root_ = value;
}
inline void MappingProto::set_is_root(bool value) {
  _internal_set_is_root(value);
  // @@protoc_insertion_point(field_set:MappingProto.is_root)
}

// repeated .SelectorProto destination = 4;
inline int MappingProto::_internal_destination_size() const {
  return destination_.size();
}
inline int MappingProto::destination_size() const {
  return _internal_destination_size();
}
inline void MappingProto::clear_destination() {
  destination_.Clear();
}
inline ::SelectorProto* MappingProto::mutable_destination(int index) {
  // @@protoc_insertion_point(field_mutable:MappingProto.destination)
  return destination_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto >*
MappingProto::mutable_destination() {
  // @@protoc_insertion_point(field_mutable_list:MappingProto.destination)
  return &destination_;
}
inline const ::SelectorProto& MappingProto::_internal_destination(int index) const {
  return destination_.Get(index);
}
inline const ::SelectorProto& MappingProto::destination(int index) const {
  // @@protoc_insertion_point(field_get:MappingProto.destination)
  return _internal_destination(index);
}
inline ::SelectorProto* MappingProto::_internal_add_destination() {
  return destination_.Add();
}
inline ::SelectorProto* MappingProto::add_destination() {
  ::SelectorProto* _add = _internal_add_destination();
  // @@protoc_insertion_point(field_add:MappingProto.destination)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto >&
MappingProto::destination() const {
  // @@protoc_insertion_point(field_list:MappingProto.destination)
  return destination_;
}

// repeated .SelectorProto source = 5;
inline int MappingProto::_internal_source_size() const {
  return source_.size();
}
inline int MappingProto::source_size() const {
  return _internal_source_size();
}
inline void MappingProto::clear_source() {
  source_.Clear();
}
inline ::SelectorProto* MappingProto::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:MappingProto.source)
  return source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto >*
MappingProto::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:MappingProto.source)
  return &source_;
}
inline const ::SelectorProto& MappingProto::_internal_source(int index) const {
  return source_.Get(index);
}
inline const ::SelectorProto& MappingProto::source(int index) const {
  // @@protoc_insertion_point(field_get:MappingProto.source)
  return _internal_source(index);
}
inline ::SelectorProto* MappingProto::_internal_add_source() {
  return source_.Add();
}
inline ::SelectorProto* MappingProto::add_source() {
  ::SelectorProto* _add = _internal_add_source();
  // @@protoc_insertion_point(field_add:MappingProto.source)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SelectorProto >&
MappingProto::source() const {
  // @@protoc_insertion_point(field_list:MappingProto.source)
  return source_;
}

// -------------------------------------------------------------------

// LocatorProto

// repeated .MappingProto mappings = 1;
inline int LocatorProto::_internal_mappings_size() const {
  return mappings_.size();
}
inline int LocatorProto::mappings_size() const {
  return _internal_mappings_size();
}
inline void LocatorProto::clear_mappings() {
  mappings_.Clear();
}
inline ::MappingProto* LocatorProto::mutable_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:LocatorProto.mappings)
  return mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MappingProto >*
LocatorProto::mutable_mappings() {
  // @@protoc_insertion_point(field_mutable_list:LocatorProto.mappings)
  return &mappings_;
}
inline const ::MappingProto& LocatorProto::_internal_mappings(int index) const {
  return mappings_.Get(index);
}
inline const ::MappingProto& LocatorProto::mappings(int index) const {
  // @@protoc_insertion_point(field_get:LocatorProto.mappings)
  return _internal_mappings(index);
}
inline ::MappingProto* LocatorProto::_internal_add_mappings() {
  return mappings_.Add();
}
inline ::MappingProto* LocatorProto::add_mappings() {
  ::MappingProto* _add = _internal_add_mappings();
  // @@protoc_insertion_point(field_add:LocatorProto.mappings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MappingProto >&
LocatorProto::mappings() const {
  // @@protoc_insertion_point(field_list:LocatorProto.mappings)
  return mappings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SelectorTypeProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SelectorTypeProto>() {
  return ::SelectorTypeProto_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_locator_2eproto
