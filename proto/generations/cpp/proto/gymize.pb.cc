// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gymize.proto

#include "gymize.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ActionProto::ActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : agent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(nullptr){}
struct ActionProtoDefaultTypeInternal {
  constexpr ActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionProtoDefaultTypeInternal() {}
  union {
    ActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionProtoDefaultTypeInternal _ActionProto_default_instance_;
constexpr ObservationProto::ObservationProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locator_(nullptr)
  , observation_(nullptr){}
struct ObservationProtoDefaultTypeInternal {
  constexpr ObservationProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObservationProtoDefaultTypeInternal() {}
  union {
    ObservationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObservationProtoDefaultTypeInternal _ObservationProto_default_instance_;
constexpr RewardProto::RewardProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : agent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_(0){}
struct RewardProtoDefaultTypeInternal {
  constexpr RewardProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RewardProtoDefaultTypeInternal() {}
  union {
    RewardProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RewardProtoDefaultTypeInternal _RewardProto_default_instance_;
constexpr InfoProto::InfoProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , agent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InfoProtoDefaultTypeInternal {
  constexpr InfoProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InfoProtoDefaultTypeInternal() {}
  union {
    InfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InfoProtoDefaultTypeInternal _InfoProto_default_instance_;
constexpr GymizeProto::GymizeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reset_agents_()
  , request_agents_()
  , response_agents_()
  , actions_()
  , observations_()
  , rewards_()
  , terminated_agents_()
  , truncated_agents_()
  , infos_()
  , recording_(nullptr){}
struct GymizeProtoDefaultTypeInternal {
  constexpr GymizeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GymizeProtoDefaultTypeInternal() {}
  union {
    GymizeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GymizeProtoDefaultTypeInternal _GymizeProto_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gymize_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gymize_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gymize_2eproto = nullptr;

const uint32_t TableStruct_gymize_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ActionProto, agent_),
  PROTOBUF_FIELD_OFFSET(::ActionProto, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ObservationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ObservationProto, locator_),
  PROTOBUF_FIELD_OFFSET(::ObservationProto, observation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RewardProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RewardProto, agent_),
  PROTOBUF_FIELD_OFFSET(::RewardProto, reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InfoProto, agent_),
  PROTOBUF_FIELD_OFFSET(::InfoProto, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GymizeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GymizeProto, reset_agents_),
  PROTOBUF_FIELD_OFFSET(::GymizeProto, request_agents_),
  PROTOBUF_FIELD_OFFSET(::GymizeProto, response_agents_),
  PROTOBUF_FIELD_OFFSET(::GymizeProto, actions_),
  PROTOBUF_FIELD_OFFSET(::GymizeProto, observations_),
  PROTOBUF_FIELD_OFFSET(::GymizeProto, rewards_),
  PROTOBUF_FIELD_OFFSET(::GymizeProto, terminated_agents_),
  PROTOBUF_FIELD_OFFSET(::GymizeProto, truncated_agents_),
  PROTOBUF_FIELD_OFFSET(::GymizeProto, infos_),
  PROTOBUF_FIELD_OFFSET(::GymizeProto, recording_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ActionProto)},
  { 8, -1, -1, sizeof(::ObservationProto)},
  { 16, -1, -1, sizeof(::RewardProto)},
  { 24, -1, -1, sizeof(::InfoProto)},
  { 32, -1, -1, sizeof(::GymizeProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ObservationProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RewardProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GymizeProto_default_instance_),
};

const char descriptor_table_protodef_gymize_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014gymize.proto\032\013space.proto\032\rlocator.pro"
  "to\032\017recording.proto\"<\n\013ActionProto\022\r\n\005ag"
  "ent\030\001 \001(\t\022\036\n\006action\030\002 \001(\0132\016.InstanceProt"
  "o\"W\n\020ObservationProto\022\036\n\007locator\030\001 \001(\0132\r"
  ".LocatorProto\022#\n\013observation\030\002 \001(\0132\016.Ins"
  "tanceProto\",\n\013RewardProto\022\r\n\005agent\030\001 \001(\t"
  "\022\016\n\006reward\030\002 \001(\001\"9\n\tInfoProto\022\r\n\005agent\030\001"
  " \001(\t\022\035\n\005infos\030\002 \003(\0132\016.InstanceProto\"\257\002\n\013"
  "GymizeProto\022\024\n\014reset_agents\030\001 \003(\t\022\026\n\016req"
  "uest_agents\030\002 \003(\t\022\027\n\017response_agents\030\003 \003"
  "(\t\022\035\n\007actions\030\004 \003(\0132\014.ActionProto\022\'\n\014obs"
  "ervations\030\005 \003(\0132\021.ObservationProto\022\035\n\007re"
  "wards\030\006 \003(\0132\014.RewardProto\022\031\n\021terminated_"
  "agents\030\007 \003(\t\022\030\n\020truncated_agents\030\010 \003(\t\022\031"
  "\n\005infos\030\t \003(\0132\n.InfoProto\022\"\n\trecording\030\n"
  " \001(\0132\017.RecordingProtoB\022\252\002\017Gymize.Protobu"
  "fb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gymize_2eproto_deps[3] = {
  &::descriptor_table_locator_2eproto,
  &::descriptor_table_recording_2eproto,
  &::descriptor_table_space_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gymize_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gymize_2eproto = {
  false, false, 649, descriptor_table_protodef_gymize_2eproto, "gymize.proto", 
  &descriptor_table_gymize_2eproto_once, descriptor_table_gymize_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_gymize_2eproto::offsets,
  file_level_metadata_gymize_2eproto, file_level_enum_descriptors_gymize_2eproto, file_level_service_descriptors_gymize_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gymize_2eproto_getter() {
  return &descriptor_table_gymize_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gymize_2eproto(&descriptor_table_gymize_2eproto);

// ===================================================================

class ActionProto::_Internal {
 public:
  static const ::InstanceProto& action(const ActionProto* msg);
};

const ::InstanceProto&
ActionProto::_Internal::action(const ActionProto* msg) {
  return *msg->action_;
}
void ActionProto::clear_action() {
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
ActionProto::ActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionProto)
}
ActionProto::ActionProto(const ActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent().empty()) {
    agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agent(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_action()) {
    action_ = new ::InstanceProto(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ActionProto)
}

inline void ActionProto::SharedCtor() {
agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_ = nullptr;
}

ActionProto::~ActionProto() {
  // @@protoc_insertion_point(destructor:ActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  agent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_;
}

void ActionProto::ArenaDtor(void* object) {
  ActionProto* _this = reinterpret_cast< ActionProto* >(object);
  (void)_this;
}
void ActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActionProto.agent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .InstanceProto action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent = 1;
  if (!this->_internal_agent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent().data(), static_cast<int>(this->_internal_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActionProto.agent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent(), target);
  }

  // .InstanceProto action = 2;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionProto)
  return target;
}

size_t ActionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent = 1;
  if (!this->_internal_agent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent());
  }

  // .InstanceProto action = 2;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionProto::GetClassData() const { return &_class_data_; }

void ActionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionProto *>(to)->MergeFrom(
      static_cast<const ActionProto &>(from));
}


void ActionProto::MergeFrom(const ActionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_agent().empty()) {
    _internal_set_agent(from._internal_agent());
  }
  if (from._internal_has_action()) {
    _internal_mutable_action()->::InstanceProto::MergeFrom(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionProto::CopyFrom(const ActionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProto::IsInitialized() const {
  return true;
}

void ActionProto::InternalSwap(ActionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &agent_, lhs_arena,
      &other->agent_, rhs_arena
  );
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gymize_2eproto_getter, &descriptor_table_gymize_2eproto_once,
      file_level_metadata_gymize_2eproto[0]);
}

// ===================================================================

class ObservationProto::_Internal {
 public:
  static const ::LocatorProto& locator(const ObservationProto* msg);
  static const ::InstanceProto& observation(const ObservationProto* msg);
};

const ::LocatorProto&
ObservationProto::_Internal::locator(const ObservationProto* msg) {
  return *msg->locator_;
}
const ::InstanceProto&
ObservationProto::_Internal::observation(const ObservationProto* msg) {
  return *msg->observation_;
}
void ObservationProto::clear_locator() {
  if (GetArenaForAllocation() == nullptr && locator_ != nullptr) {
    delete locator_;
  }
  locator_ = nullptr;
}
void ObservationProto::clear_observation() {
  if (GetArenaForAllocation() == nullptr && observation_ != nullptr) {
    delete observation_;
  }
  observation_ = nullptr;
}
ObservationProto::ObservationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ObservationProto)
}
ObservationProto::ObservationProto(const ObservationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_locator()) {
    locator_ = new ::LocatorProto(*from.locator_);
  } else {
    locator_ = nullptr;
  }
  if (from._internal_has_observation()) {
    observation_ = new ::InstanceProto(*from.observation_);
  } else {
    observation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ObservationProto)
}

inline void ObservationProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&locator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&observation_) -
    reinterpret_cast<char*>(&locator_)) + sizeof(observation_));
}

ObservationProto::~ObservationProto() {
  // @@protoc_insertion_point(destructor:ObservationProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObservationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete locator_;
  if (this != internal_default_instance()) delete observation_;
}

void ObservationProto::ArenaDtor(void* object) {
  ObservationProto* _this = reinterpret_cast< ObservationProto* >(object);
  (void)_this;
}
void ObservationProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObservationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObservationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ObservationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && locator_ != nullptr) {
    delete locator_;
  }
  locator_ = nullptr;
  if (GetArenaForAllocation() == nullptr && observation_ != nullptr) {
    delete observation_;
  }
  observation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LocatorProto locator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_locator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .InstanceProto observation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObservationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObservationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LocatorProto locator = 1;
  if (this->_internal_has_locator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::locator(this), target, stream);
  }

  // .InstanceProto observation = 2;
  if (this->_internal_has_observation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::observation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObservationProto)
  return target;
}

size_t ObservationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObservationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LocatorProto locator = 1;
  if (this->_internal_has_locator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locator_);
  }

  // .InstanceProto observation = 2;
  if (this->_internal_has_observation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *observation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObservationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObservationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObservationProto::GetClassData() const { return &_class_data_; }

void ObservationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObservationProto *>(to)->MergeFrom(
      static_cast<const ObservationProto &>(from));
}


void ObservationProto::MergeFrom(const ObservationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObservationProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_locator()) {
    _internal_mutable_locator()->::LocatorProto::MergeFrom(from._internal_locator());
  }
  if (from._internal_has_observation()) {
    _internal_mutable_observation()->::InstanceProto::MergeFrom(from._internal_observation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObservationProto::CopyFrom(const ObservationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObservationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationProto::IsInitialized() const {
  return true;
}

void ObservationProto::InternalSwap(ObservationProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObservationProto, observation_)
      + sizeof(ObservationProto::observation_)
      - PROTOBUF_FIELD_OFFSET(ObservationProto, locator_)>(
          reinterpret_cast<char*>(&locator_),
          reinterpret_cast<char*>(&other->locator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservationProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gymize_2eproto_getter, &descriptor_table_gymize_2eproto_once,
      file_level_metadata_gymize_2eproto[1]);
}

// ===================================================================

class RewardProto::_Internal {
 public:
};

RewardProto::RewardProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RewardProto)
}
RewardProto::RewardProto(const RewardProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent().empty()) {
    agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agent(), 
      GetArenaForAllocation());
  }
  reward_ = from.reward_;
  // @@protoc_insertion_point(copy_constructor:RewardProto)
}

inline void RewardProto::SharedCtor() {
agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reward_ = 0;
}

RewardProto::~RewardProto() {
  // @@protoc_insertion_point(destructor:RewardProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RewardProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  agent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewardProto::ArenaDtor(void* object) {
  RewardProto* _this = reinterpret_cast< RewardProto* >(object);
  (void)_this;
}
void RewardProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RewardProto::Clear() {
// @@protoc_insertion_point(message_clear_start:RewardProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_.ClearToEmpty();
  reward_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RewardProto.agent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RewardProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent = 1;
  if (!this->_internal_agent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent().data(), static_cast<int>(this->_internal_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RewardProto.agent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent(), target);
  }

  // double reward = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reward = this->_internal_reward();
  uint64_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardProto)
  return target;
}

size_t RewardProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RewardProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent = 1;
  if (!this->_internal_agent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent());
  }

  // double reward = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reward = this->_internal_reward();
  uint64_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewardProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RewardProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewardProto::GetClassData() const { return &_class_data_; }

void RewardProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RewardProto *>(to)->MergeFrom(
      static_cast<const RewardProto &>(from));
}


void RewardProto::MergeFrom(const RewardProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RewardProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_agent().empty()) {
    _internal_set_agent(from._internal_agent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reward = from._internal_reward();
  uint64_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    _internal_set_reward(from._internal_reward());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewardProto::CopyFrom(const RewardProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RewardProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardProto::IsInitialized() const {
  return true;
}

void RewardProto::InternalSwap(RewardProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &agent_, lhs_arena,
      &other->agent_, rhs_arena
  );
  swap(reward_, other->reward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gymize_2eproto_getter, &descriptor_table_gymize_2eproto_once,
      file_level_metadata_gymize_2eproto[2]);
}

// ===================================================================

class InfoProto::_Internal {
 public:
};

void InfoProto::clear_infos() {
  infos_.Clear();
}
InfoProto::InfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:InfoProto)
}
InfoProto::InfoProto(const InfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent().empty()) {
    agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agent(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:InfoProto)
}

inline void InfoProto::SharedCtor() {
agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InfoProto::~InfoProto() {
  // @@protoc_insertion_point(destructor:InfoProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  agent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InfoProto::ArenaDtor(void* object) {
  InfoProto* _this = reinterpret_cast< InfoProto* >(object);
  (void)_this;
}
void InfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:InfoProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  agent_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InfoProto.agent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .InstanceProto infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfoProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent = 1;
  if (!this->_internal_agent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent().data(), static_cast<int>(this->_internal_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InfoProto.agent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent(), target);
  }

  // repeated .InstanceProto infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfoProto)
  return target;
}

size_t InfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InfoProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InstanceProto infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string agent = 1;
  if (!this->_internal_agent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InfoProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoProto::GetClassData() const { return &_class_data_; }

void InfoProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InfoProto *>(to)->MergeFrom(
      static_cast<const InfoProto &>(from));
}


void InfoProto::MergeFrom(const InfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (!from._internal_agent().empty()) {
    _internal_set_agent(from._internal_agent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoProto::CopyFrom(const InfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoProto::IsInitialized() const {
  return true;
}

void InfoProto::InternalSwap(InfoProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &agent_, lhs_arena,
      &other->agent_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gymize_2eproto_getter, &descriptor_table_gymize_2eproto_once,
      file_level_metadata_gymize_2eproto[3]);
}

// ===================================================================

class GymizeProto::_Internal {
 public:
  static const ::RecordingProto& recording(const GymizeProto* msg);
};

const ::RecordingProto&
GymizeProto::_Internal::recording(const GymizeProto* msg) {
  return *msg->recording_;
}
void GymizeProto::clear_recording() {
  if (GetArenaForAllocation() == nullptr && recording_ != nullptr) {
    delete recording_;
  }
  recording_ = nullptr;
}
GymizeProto::GymizeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reset_agents_(arena),
  request_agents_(arena),
  response_agents_(arena),
  actions_(arena),
  observations_(arena),
  rewards_(arena),
  terminated_agents_(arena),
  truncated_agents_(arena),
  infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GymizeProto)
}
GymizeProto::GymizeProto(const GymizeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reset_agents_(from.reset_agents_),
      request_agents_(from.request_agents_),
      response_agents_(from.response_agents_),
      actions_(from.actions_),
      observations_(from.observations_),
      rewards_(from.rewards_),
      terminated_agents_(from.terminated_agents_),
      truncated_agents_(from.truncated_agents_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_recording()) {
    recording_ = new ::RecordingProto(*from.recording_);
  } else {
    recording_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GymizeProto)
}

inline void GymizeProto::SharedCtor() {
recording_ = nullptr;
}

GymizeProto::~GymizeProto() {
  // @@protoc_insertion_point(destructor:GymizeProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GymizeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete recording_;
}

void GymizeProto::ArenaDtor(void* object) {
  GymizeProto* _this = reinterpret_cast< GymizeProto* >(object);
  (void)_this;
}
void GymizeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GymizeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GymizeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:GymizeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reset_agents_.Clear();
  request_agents_.Clear();
  response_agents_.Clear();
  actions_.Clear();
  observations_.Clear();
  rewards_.Clear();
  terminated_agents_.Clear();
  truncated_agents_.Clear();
  infos_.Clear();
  if (GetArenaForAllocation() == nullptr && recording_ != nullptr) {
    delete recording_;
  }
  recording_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GymizeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string reset_agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reset_agents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GymizeProto.reset_agents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string request_agents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_request_agents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GymizeProto.request_agents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string response_agents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_response_agents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GymizeProto.response_agents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ActionProto actions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ObservationProto observations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .RewardProto rewards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string terminated_agents = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_terminated_agents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GymizeProto.terminated_agents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string truncated_agents = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_truncated_agents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GymizeProto.truncated_agents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .InfoProto infos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .RecordingProto recording = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GymizeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GymizeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string reset_agents = 1;
  for (int i = 0, n = this->_internal_reset_agents_size(); i < n; i++) {
    const auto& s = this->_internal_reset_agents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GymizeProto.reset_agents");
    target = stream->WriteString(1, s, target);
  }

  // repeated string request_agents = 2;
  for (int i = 0, n = this->_internal_request_agents_size(); i < n; i++) {
    const auto& s = this->_internal_request_agents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GymizeProto.request_agents");
    target = stream->WriteString(2, s, target);
  }

  // repeated string response_agents = 3;
  for (int i = 0, n = this->_internal_response_agents_size(); i < n; i++) {
    const auto& s = this->_internal_response_agents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GymizeProto.response_agents");
    target = stream->WriteString(3, s, target);
  }

  // repeated .ActionProto actions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_actions(i), target, stream);
  }

  // repeated .ObservationProto observations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_observations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_observations(i), target, stream);
  }

  // repeated .RewardProto rewards = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_rewards(i), target, stream);
  }

  // repeated string terminated_agents = 7;
  for (int i = 0, n = this->_internal_terminated_agents_size(); i < n; i++) {
    const auto& s = this->_internal_terminated_agents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GymizeProto.terminated_agents");
    target = stream->WriteString(7, s, target);
  }

  // repeated string truncated_agents = 8;
  for (int i = 0, n = this->_internal_truncated_agents_size(); i < n; i++) {
    const auto& s = this->_internal_truncated_agents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GymizeProto.truncated_agents");
    target = stream->WriteString(8, s, target);
  }

  // repeated .InfoProto infos = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_infos(i), target, stream);
  }

  // .RecordingProto recording = 10;
  if (this->_internal_has_recording()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::recording(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GymizeProto)
  return target;
}

size_t GymizeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GymizeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reset_agents = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reset_agents_.size());
  for (int i = 0, n = reset_agents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reset_agents_.Get(i));
  }

  // repeated string request_agents = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(request_agents_.size());
  for (int i = 0, n = request_agents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      request_agents_.Get(i));
  }

  // repeated string response_agents = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(response_agents_.size());
  for (int i = 0, n = response_agents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      response_agents_.Get(i));
  }

  // repeated .ActionProto actions = 4;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ObservationProto observations = 5;
  total_size += 1UL * this->_internal_observations_size();
  for (const auto& msg : this->observations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RewardProto rewards = 6;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string terminated_agents = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(terminated_agents_.size());
  for (int i = 0, n = terminated_agents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      terminated_agents_.Get(i));
  }

  // repeated string truncated_agents = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(truncated_agents_.size());
  for (int i = 0, n = truncated_agents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      truncated_agents_.Get(i));
  }

  // repeated .InfoProto infos = 9;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .RecordingProto recording = 10;
  if (this->_internal_has_recording()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recording_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GymizeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GymizeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GymizeProto::GetClassData() const { return &_class_data_; }

void GymizeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GymizeProto *>(to)->MergeFrom(
      static_cast<const GymizeProto &>(from));
}


void GymizeProto::MergeFrom(const GymizeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GymizeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  reset_agents_.MergeFrom(from.reset_agents_);
  request_agents_.MergeFrom(from.request_agents_);
  response_agents_.MergeFrom(from.response_agents_);
  actions_.MergeFrom(from.actions_);
  observations_.MergeFrom(from.observations_);
  rewards_.MergeFrom(from.rewards_);
  terminated_agents_.MergeFrom(from.terminated_agents_);
  truncated_agents_.MergeFrom(from.truncated_agents_);
  infos_.MergeFrom(from.infos_);
  if (from._internal_has_recording()) {
    _internal_mutable_recording()->::RecordingProto::MergeFrom(from._internal_recording());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GymizeProto::CopyFrom(const GymizeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GymizeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GymizeProto::IsInitialized() const {
  return true;
}

void GymizeProto::InternalSwap(GymizeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reset_agents_.InternalSwap(&other->reset_agents_);
  request_agents_.InternalSwap(&other->request_agents_);
  response_agents_.InternalSwap(&other->response_agents_);
  actions_.InternalSwap(&other->actions_);
  observations_.InternalSwap(&other->observations_);
  rewards_.InternalSwap(&other->rewards_);
  terminated_agents_.InternalSwap(&other->terminated_agents_);
  truncated_agents_.InternalSwap(&other->truncated_agents_);
  infos_.InternalSwap(&other->infos_);
  swap(recording_, other->recording_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GymizeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gymize_2eproto_getter, &descriptor_table_gymize_2eproto_once,
      file_level_metadata_gymize_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ActionProto* Arena::CreateMaybeMessage< ::ActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ObservationProto* Arena::CreateMaybeMessage< ::ObservationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ObservationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::RewardProto* Arena::CreateMaybeMessage< ::RewardProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RewardProto >(arena);
}
template<> PROTOBUF_NOINLINE ::InfoProto* Arena::CreateMaybeMessage< ::InfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::GymizeProto* Arena::CreateMaybeMessage< ::GymizeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GymizeProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
